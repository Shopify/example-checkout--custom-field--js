{"version":3,"file":"vscode.js","sourceRoot":"","sources":["../../../src/public/node/vscode.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAC,MAAM,SAAS,CAAA;AACnE,OAAO,EAAC,QAAQ,EAAE,GAAG,EAAC,MAAM,WAAW,CAAA;AACvC,OAAO,EAAC,aAAa,EAAE,WAAW,EAAE,WAAW,EAAC,MAAM,6BAA6B,CAAA;AAEnF;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,IAAI,GAAG,GAAG,EAAE;IACzC,WAAW,CACT,aAAa,CAAA,6BAA6B,WAAW,CAAC,IAAI,CACxD,IAAI,CACL,oDAAoD,CACtD,CAAA;IACD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC,CAAA;IAE/E,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,KAAK,CAAA;KACb;IAED,OAAO,UAAU,CAAC,MAAM,CAAC,CAAA;AAC3B,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,SAAiB,EAAE,eAAyB;IACzF,WAAW,CAAC,aAAa,CAAA,2CAA2C,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC;EAC/F,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC;GAChC,CAAC,CAAA;IACF,MAAM,cAAc,GAAG,QAAQ,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAA;IAErE,IAAI,MAAM,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC7B,IAAI,sBAAsB,GAAG,EAAC,eAAe,EAAE,EAAE,EAAC,CAAA;QAClD,IAAI,MAAM,UAAU,CAAC,cAAc,CAAC,EAAE;YACpC,MAAM,sBAAsB,GAAG,MAAM,QAAQ,CAAC,cAAc,CAAC,CAAA;YAC7D,sBAAsB,GAAG,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAA;SAC5D;QACD,MAAM,iBAAiB,GAAG;YACxB,GAAG,sBAAsB;YACzB,eAAe,EAAE,CAAC,GAAG,sBAAsB,CAAC,eAAe,EAAE,GAAG,eAAe,CAAC;SACjF,CAAA;QACD,MAAM,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;KAC5E;AACH,CAAC","sourcesContent":["import {fileExists, writeFile, readFile, findPathUp} from './fs.js'\nimport {joinPath, cwd} from './path.js'\nimport {outputContent, outputToken, outputDebug} from '../../public/node/output.js'\n\n/**\n * Check if user editor is VS Code.\n *\n * @param root - Root directory to start searching for .vscode directory.\n * @returns True if user editor is VS Code.\n */\nexport async function isVSCode(root = cwd()): Promise<boolean> {\n  outputDebug(\n    outputContent`Checking if the directory ${outputToken.path(\n      root,\n    )} or any of its parents has a .vscode directory... `,\n  )\n  const config = await findPathUp(joinPath(root, '.vscode'), {type: 'directory'})\n\n  if (!config) {\n    return false\n  }\n\n  return fileExists(config)\n}\n\n/**\n * Add VSCode extension recommendations.\n *\n * @param directory - Directory that contains the .vscode folder.\n * @param recommendations - List of VSCode extensions to recommend.\n */\nexport async function addRecommendedExtensions(directory: string, recommendations: string[]): Promise<void> {\n  outputDebug(outputContent`Adding VSCode recommended extensions at ${outputToken.path(directory)}:\n${outputToken.json(recommendations)}\n  `)\n  const extensionsPath = joinPath(directory, '.vscode/extensions.json')\n\n  if (await isVSCode(directory)) {\n    let originalExtensionsJson = {recommendations: []}\n    if (await fileExists(extensionsPath)) {\n      const originalExtensionsFile = await readFile(extensionsPath)\n      originalExtensionsJson = JSON.parse(originalExtensionsFile)\n    }\n    const newExtensionsJson = {\n      ...originalExtensionsJson,\n      recommendations: [...originalExtensionsJson.recommendations, ...recommendations],\n    }\n    await writeFile(extensionsPath, JSON.stringify(newExtensionsJson, null, 2))\n  }\n}\n"]}