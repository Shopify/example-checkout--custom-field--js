{"version":3,"file":"os.js","sourceRoot":"","sources":["../../../src/public/node/os.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAE,aAAa,EAAC,MAAM,6BAA6B,CAAA;AACtE,OAAO,EAAC,KAAK,EAAC,MAAM,OAAO,CAAA;AAC3B,OAAO,EAAC,QAAQ,IAAI,UAAU,EAAC,MAAM,IAAI,CAAA;AAEzC,4EAA4E;AAC5E,0EAA0E;AAC1E,iEAAiE;AACjE;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,WAAoC,OAAO,CAAC,QAAQ;IACjF,WAAW,CAAC,aAAa,CAAA,wBAAwB,CAAC,CAAA;IAClD,MAAM,mBAAmB,GAAG,sBAAsB,EAAE,CAAA;IACpD,IAAI,mBAAmB,EAAE;QACvB,OAAO,mBAAmB,CAAA;KAC3B;IAED,MAAM,gBAAgB,GAAG,yBAAyB,EAAE,CAAA;IACpD,IAAI,gBAAgB,EAAE;QACpB,OAAO,gBAAgB,CAAA;KACxB;IAED;;QAEI;IACJ,IAAI;QACF,IAAI,QAAQ,KAAK,OAAO,EAAE;YACxB,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,CAAA;YACtC,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAA;SACnC;QAED,MAAM,EAAC,MAAM,EAAE,MAAM,EAAC,GAAG,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;QAClD,IAAI;YACF,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;YACnD,OAAO,MAAM,CAAA;YAEb,8DAA8D;SAC/D;QAAC,MAAM,GAAE;QACV,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAA;QACjC,qDAAqD;KACtD;IAAC,MAAM;QACN,OAAO,IAAI,CAAA;KACZ;AACH,CAAC;AAID;;;GAGG;AACH,MAAM,UAAU,eAAe,CAC7B,WAAoC,OAAO,CAAC,QAAQ,EACpD,OAA4B,OAAO,CAAC,IAAI;IAKxC,IAAI,UAAU,GAAG,IAAI,CAAA;IACrB,IAAI,IAAI,KAAK,KAAK,EAAE;QAClB,UAAU,GAAG,OAAO,CAAA;KACrB;IACD,IAAI,IAAI,KAAK,MAAM,EAAE;QACnB,UAAU,GAAG,KAAK,CAAA;KACnB;IACD,MAAM,cAAc,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAoB,CAAA;IAC3F,OAAO,EAAC,QAAQ,EAAE,cAAc,EAAE,IAAI,EAAE,UAAU,EAAC,CAAA;AACrD,CAAC;AAED,SAAS,sBAAsB;IAC7B,MAAM,EAAC,GAAG,EAAC,GAAG,OAAO,CAAA;IAErB,OAAO,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAA;AAC7F,CAAC;AAED,SAAS,yBAAyB;IAChC,IAAI;QACF,OAAO,UAAU,EAAE,CAAC,QAAQ,CAAA;QAC5B,qDAAqD;KACtD;IAAC,MAAM;QACN,OAAO,IAAI,CAAA;KACZ;AACH,CAAC;AAED,SAAS,mBAAmB,CAAC,KAAa;IACxC,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;AACnC,CAAC;AAED,SAAS,kBAAkB,CAAC,MAAc;IACxC,OAAO,eAAe,MAAM,EAAE,CAAA;AAChC,CAAC","sourcesContent":["import {outputDebug, outputContent} from '../../public/node/output.js'\nimport {execa} from 'execa'\nimport {userInfo as osUserInfo} from 'os'\n\n// This code has been vendored from https://github.com/sindresorhus/username\n// because adding it as a transtive dependency causes conflicts with other\n// packages that haven't been yet migrated to the latest version.\n/**\n * @param platform - The platform to get the username for. Defaults to the current platform.\n * @returns The username of the current user.\n */\nexport async function username(platform: typeof process.platform = process.platform): Promise<string | null> {\n  outputDebug(outputContent`Obtaining user name...`)\n  const environmentVariable = getEnvironmentVariable()\n  if (environmentVariable) {\n    return environmentVariable\n  }\n\n  const userInfoUsername = getUsernameFromOsUserInfo()\n  if (userInfoUsername) {\n    return userInfoUsername\n  }\n\n  /**\n    First we try to get the ID of the user and then the actual username. We do this because in `docker run --user <uid>:<gid>` context, we don't have \"username\" available. Therefore, we have a fallback to `makeUsernameFromId` for such scenario. Applies also to the `sync()` method below.\n    */\n  try {\n    if (platform === 'win32') {\n      const {stdout} = await execa('whoami')\n      return cleanWindowsCommand(stdout)\n    }\n\n    const {stdout: userId} = await execa('id', ['-u'])\n    try {\n      const {stdout} = await execa('id', ['-un', userId])\n      return stdout\n\n      // eslint-disable-next-line no-catch-all/no-catch-all,no-empty\n    } catch {}\n    return makeUsernameFromId(userId)\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch {\n    return null\n  }\n}\n\ntype PlatformArch = Exclude<typeof process.arch, 'x64' | 'ia32'> | 'amd64' | '386'\ntype PlatformStrings = Exclude<typeof process.platform, 'win32'> | 'windows'\n/**\n * Returns the platform and architecture.\n * @returns Returns the current platform and architecture.\n */\nexport function platformAndArch(\n  platform: typeof process.platform = process.platform,\n  arch: typeof process.arch = process.arch,\n): {\n  platform: PlatformStrings\n  arch: PlatformArch\n} {\n  let archString = arch\n  if (arch === 'x64') {\n    archString = 'amd64'\n  }\n  if (arch === 'ia32') {\n    archString = '386'\n  }\n  const platformString = (platform.match(/^win.+/) ? 'windows' : platform) as PlatformStrings\n  return {platform: platformString, arch: archString}\n}\n\nfunction getEnvironmentVariable() {\n  const {env} = process\n\n  return env.SUDO_USER || env.C9_USER || env.LOGNAME || env.USER || env.LNAME || env.USERNAME\n}\n\nfunction getUsernameFromOsUserInfo(): string | null {\n  try {\n    return osUserInfo().username\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch {\n    return null\n  }\n}\n\nfunction cleanWindowsCommand(value: string) {\n  return value.replace(/^.*\\\\/, '')\n}\n\nfunction makeUsernameFromId(userId: string) {\n  return `no-username-${userId}`\n}\n"]}