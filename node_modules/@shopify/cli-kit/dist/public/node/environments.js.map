{"version":3,"file":"environments.js","sourceRoot":"","sources":["../../../src/public/node/environments.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAA;AACpC,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAC,MAAM,SAAS,CAAA;AAC5C,OAAO,EAAC,GAAG,EAAC,MAAM,WAAW,CAAA;AAC7B,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAA;AACzC,OAAO,EAAC,aAAa,EAAC,MAAM,SAAS,CAAA;AAUrC;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,eAAuB,EACvB,QAAgB,EAChB,OAAgC;IAEhC,MAAM,QAAQ,GAAG,OAAO,EAAE,IAAI,IAAI,OAAO,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;IAC9E,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,EAAE;QAC1C,GAAG,EAAE,QAAQ;QACb,IAAI,EAAE,MAAM;KACb,CAAC,CAAA;IACF,IAAI,CAAC,QAAQ,EAAE;QACb,aAAa,CAAC,EAAC,IAAI,EAAE,6BAA6B,EAAC,CAAC,CAAA;QACpD,OAAO,SAAS,CAAA;KACjB;IACD,MAAM,gBAAgB,GAAG,UAAU,CAAC,MAAM,QAAQ,CAAC,QAAQ,CAAC,CAAiB,CAAA;IAC7E,MAAM,YAAY,GAAG,gBAAgB,CAAC,YAAY,CAAA;IAClD,IAAI,CAAC,YAAY,EAAE;QACjB,aAAa,CAAC;YACZ,IAAI,EAAE,CAAC,0BAA0B,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,EAAE,EAAC,IAAI,EAAE,GAAG,EAAC,CAAC;SACrE,CAAC,CAAA;QACF,OAAO,SAAS,CAAA;KACjB;IACD,MAAM,WAAW,GAAG,YAAY,CAAC,eAAe,CAAY,CAAA;IAC5D,IAAI,CAAC,WAAW;QACd,aAAa,CAAC;YACZ,IAAI,EAAE,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,eAAe,EAAC,EAAE,YAAY,CAAC;SAChE,CAAC,CAAA;IAEJ,MAAM,QAAQ,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,CAAC;QACzC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;KAC9C,CAAC,CAAC,CAAA;IAEH,OAAO,WAAW,CAAA;AACpB,CAAC","sourcesContent":["import {decodeToml} from './toml.js'\nimport {findPathUp, readFile} from './fs.js'\nimport {cwd} from './path.js'\nimport * as metadata from './metadata.js'\nimport {renderWarning} from './ui.js'\nimport {JsonMap} from '../../private/common/json.js'\n\nexport interface Environments {\n  [name: string]: JsonMap\n}\n\ninterface LoadEnvironmentOptions {\n  from?: string\n}\n/**\n * Loads environments from a file.\n * @param dir - The file path to load environments from.\n * @returns The loaded environments.\n */\nexport async function loadEnvironment(\n  environmentName: string,\n  fileName: string,\n  options?: LoadEnvironmentOptions,\n): Promise<JsonMap | undefined> {\n  const basePath = options?.from && options?.from !== '.' ? options.from : cwd()\n  const filePath = await findPathUp(fileName, {\n    cwd: basePath,\n    type: 'file',\n  })\n  if (!filePath) {\n    renderWarning({body: 'Environment file not found.'})\n    return undefined\n  }\n  const environmentsJson = decodeToml(await readFile(filePath)) as Environments\n  const environments = environmentsJson.environments\n  if (!environments) {\n    renderWarning({\n      body: ['No environments found in', {command: filePath}, {char: '.'}],\n    })\n    return undefined\n  }\n  const environment = environments[environmentName] as JsonMap\n  if (!environment)\n    renderWarning({\n      body: ['Environment', {command: environmentName}, 'not found.'],\n    })\n\n  await metadata.addSensitiveMetadata(() => ({\n    environmentFlags: JSON.stringify(environment),\n  }))\n\n  return environment\n}\n"]}