{"version":3,"file":"local-storage.js","sourceRoot":"","sources":["../../../src/public/node/local-storage.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,MAAM,CAAA;AAEzB;;;GAGG;AACH,8DAA8D;AAC9D,MAAM,OAAO,YAAY;IAGvB,YAAY,OAA6C;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAI,OAAO,CAAC,CAAA;IACtC,CAAC;IAED;;;;;OAKG;IACH,GAAG,CAAuB,GAAS;QACjC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;IAED;;;;;OAKG;IACH,GAAG,CAAuB,GAAS,EAAE,KAAe;QAClD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IAC7B,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAuB,GAAS;QACpC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;IACrB,CAAC;CACF","sourcesContent":["import Config from 'conf'\n\n/**\n * A wrapper around the `conf` package that provides a strongly-typed interface\n * for accessing the local storage.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class LocalStorage<T extends {[key: string]: any}> {\n  private readonly config: Config<T>\n\n  constructor(options: {projectName?: string; cwd?: string}) {\n    this.config = new Config<T>(options)\n  }\n\n  /**\n   * Get a value from the local storage.\n   *\n   * @param key - The key to get.\n   * @returns The value.\n   */\n  get<TKey extends keyof T>(key: TKey): T[TKey] {\n    return this.config.get(key)\n  }\n\n  /**\n   * Set a value in the local storage.\n   *\n   * @param key - The key to set.\n   * @param value - The value to set.\n   */\n  set<TKey extends keyof T>(key: TKey, value?: T[TKey]): void {\n    this.config.set(key, value)\n  }\n\n  /**\n   * Delete a value from the local storage.\n   *\n   * @param key - The key to delete.\n   */\n  delete<TKey extends keyof T>(key: TKey): void {\n    this.config.delete(key)\n  }\n\n  /**\n   * Clear the local storage (delete all values).\n   */\n  clear(): void {\n    this.config.clear()\n  }\n}\n"]}