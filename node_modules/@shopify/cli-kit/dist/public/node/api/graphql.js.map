{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../../../../src/public/node/api/graphql.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAE,UAAU,EAAC,MAAM,sCAAsC,CAAA;AAC7E,OAAO,EAAC,mBAAmB,EAAE,YAAY,EAAC,MAAM,sCAAsC,CAAA;AACtF,OAAO,EAAC,oBAAoB,EAAC,MAAM,8BAA8B,CAAA;AACjE,OAAO,EAAC,aAAa,EAAyC,MAAM,iBAAiB,CAAA;AAwBrF;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc,CAAI,OAAiC;IACvE,MAAM,EAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,eAAe,EAAC,GAAG,OAAO,CAAA;IAClF,MAAM,OAAO,GAAG;QACd,GAAG,YAAY;QACf,GAAG,YAAY,CAAC,KAAK,CAAC;KACvB,CAAA;IAED,mBAAmB,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAA;IACnD,MAAM,aAAa,GAAG,EAAC,KAAK,EAAE,MAAM,UAAU,EAAE,EAAE,OAAO,EAAC,CAAA;IAC1D,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,CAAA;IACpD,MAAM,QAAQ,GAAG,MAAM,oBAAoB,CACzC,EAAC,OAAO,EAAE,MAAM,CAAC,UAAU,CAAI,KAAe,EAAE,SAAS,CAAC,EAAE,GAAG,EAAC,EAChE,eAAe,EAAE,YAAY,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CACxE,CAAA;IAED,IAAI,eAAe,EAAE,UAAU,EAAE;QAC/B,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;KACrC;IAED,OAAO,QAAQ,CAAC,IAAI,CAAA;AACtB,CAAC","sourcesContent":["import {buildHeaders, httpsAgent} from '../../../private/node/api/headers.js'\nimport {debugLogRequestInfo, errorHandler} from '../../../private/node/api/graphql.js'\nimport {debugLogResponseInfo} from '../../../private/node/api.js'\nimport {GraphQLClient, rawRequest, RequestDocument, Variables} from 'graphql-request'\n\nexport interface GraphQLVariables {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n}\n\nexport type GraphQLResponse<T> = Awaited<ReturnType<typeof rawRequest<T>>>\n\nexport interface GraphQLRequestOptions<T> {\n  query: RequestDocument\n  api: string\n  url: string\n  token?: string\n  addedHeaders?: {[header: string]: string}\n  variables?: Variables\n  responseOptions?: GraphQLResponseOptions<T>\n}\n\nexport interface GraphQLResponseOptions<T> {\n  handleErrors?: boolean\n  onResponse?: (response: GraphQLResponse<T>) => void\n}\n\n/**\n * Executes a GraphQL query to an endpoint.\n *\n * @param options - GraphQL request options.\n * @returns The response of the query of generic type <T>.\n */\nexport async function graphqlRequest<T>(options: GraphQLRequestOptions<T>): Promise<T> {\n  const {query, api, url, token, addedHeaders, variables, responseOptions} = options\n  const headers = {\n    ...addedHeaders,\n    ...buildHeaders(token),\n  }\n\n  debugLogRequestInfo(api, query, variables, headers)\n  const clientOptions = {agent: await httpsAgent(), headers}\n  const client = new GraphQLClient(url, clientOptions)\n  const response = await debugLogResponseInfo(\n    {request: client.rawRequest<T>(query as string, variables), url},\n    responseOptions?.handleErrors === false ? undefined : errorHandler(api),\n  )\n\n  if (responseOptions?.onResponse) {\n    responseOptions.onResponse(response)\n  }\n\n  return response.data\n}\n"]}