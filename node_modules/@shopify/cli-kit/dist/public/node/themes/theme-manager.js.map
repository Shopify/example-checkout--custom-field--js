{"version":3,"file":"theme-manager.js","sourceRoot":"","sources":["../../../../src/public/node/themes/theme-manager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,WAAW,EAAC,MAAM,iBAAiB,CAAA;AACvD,OAAO,EAAC,sBAAsB,EAAQ,MAAM,mBAAmB,CAAA;AAC/D,OAAO,EAAC,iBAAiB,EAAC,MAAM,qDAAqD,CAAA;AAErF,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAA;AAEpD,MAAM,OAAgB,YAAY;IAMhC,YAAsB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAEpD,KAAK,CAAC,YAAY;QAChB,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAA;QAC9B,IAAI,CAAC,KAAK,EAAE;YACV,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;SAC5B;QACD,OAAO,KAAK,CAAA;IACd,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAM;SACP;QACD,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;QAC7E,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,CAAC,WAAW,EAAE,CAAA;SACnB;QACD,OAAO,KAAK,CAAA;IACd,CAAC;IAEO,KAAK,CAAC,MAAM;QAClB,MAAM,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC5C,MAAM,IAAI,GAAG,sBAAsB,CAAA;QACnC,MAAM,KAAK,GAAG,MAAM,WAAW,CAC7B;YACE,IAAI;YACJ,IAAI;SACL,EACD,IAAI,CAAC,YAAY,CAClB,CAAA;QACD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,QAAQ,CAAC,qCAAqC,IAAI,eAAe,IAAI,GAAG,CAAC,CAAA;SACpF;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAA;QAClC,OAAO,KAAK,CAAA;IACd,CAAC;CACF","sourcesContent":["import {fetchTheme, createTheme} from './themes-api.js'\nimport {DEVELOPMENT_THEME_ROLE, Theme} from './models/theme.js'\nimport {generateThemeName} from '../../../private/node/themes/generate-theme-name.js'\nimport {AdminSession} from '@shopify/cli-kit/node/session'\nimport {BugError} from '@shopify/cli-kit/node/error'\n\nexport abstract class ThemeManager {\n  protected themeId: string | undefined\n  protected abstract setTheme(themeId: string): void\n  protected abstract removeTheme(): void\n  protected abstract context: string\n\n  constructor(protected adminSession: AdminSession) {}\n\n  async findOrCreate(): Promise<Theme> {\n    let theme = await this.fetch()\n    if (!theme) {\n      theme = await this.create()\n    }\n    return theme\n  }\n\n  async fetch() {\n    if (!this.themeId) {\n      return\n    }\n    const theme = await fetchTheme(parseInt(this.themeId, 10), this.adminSession)\n    if (!theme) {\n      this.removeTheme()\n    }\n    return theme\n  }\n\n  private async create() {\n    const name = generateThemeName(this.context)\n    const role = DEVELOPMENT_THEME_ROLE\n    const theme = await createTheme(\n      {\n        name,\n        role,\n      },\n      this.adminSession,\n    )\n    if (!theme) {\n      throw new BugError(`Could not create theme with name \"${name}\" and role \"${role}\"`)\n    }\n    this.setTheme(theme.id.toString())\n    return theme\n  }\n}\n"]}