{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../../src/public/node/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import {Flags} from '@oclif/core'\n\n/**\n * IMPORTANT NOTE: Imports in this module are dynamic to ensure that \"setupEnvironmentVariables\" can dynamically\n * set the DEBUG environment variable before the 'debug' package sets up its configuration when modules\n * are loaded statically.\n */\ninterface RunCLIOptions {\n  /** The value of import.meta.url of the CLI executable module */\n  moduleURL: string\n  development: boolean\n}\n\nfunction setupEnvironmentVariables(options: Pick<RunCLIOptions, 'development'>) {\n  /**\n   * By setting DEBUG=* when --verbose is passed we are increasing the\n   * verbosity of oclif. Oclif uses debug (https://www.npmjs.com/package/debug)\n   * for logging, and it's configured through the DEBUG= environment variable.\n   */\n  if (process.argv.includes('--verbose')) {\n    process.env.DEBUG = process.env.DEBUG ?? '*'\n  }\n  if (options.development) {\n    process.env.SHOPIFY_CLI_ENV = process.env.SHOPIFY_CLI_ENV ?? 'development'\n  }\n}\n\n/**\n * A function that abstracts away setting up the environment and running\n * a CLI\n * @param options - Options.\n */\nexport async function runCLI(options: RunCLIOptions): Promise<void> {\n  setupEnvironmentVariables(options)\n  /**\n   * These imports need to be dynamic because if they are static\n   * they are loaded before we set the DEBUG=* environment variable\n   * and therefore it has no effect.\n   */\n  const {errorHandler} = await import('./error-handler.js')\n  const {isDevelopment} = await import('./context/local.js')\n  const {run, settings, flush} = await import('@oclif/core')\n\n  if (isDevelopment()) {\n    settings.debug = true\n  }\n\n  run(undefined, options.moduleURL)\n    .then(() => flush())\n    .catch(errorHandler)\n}\n\n/**\n * A function for create-x CLIs that automatically runs the \"init\" command.\n */\nexport async function runCreateCLI(options: RunCLIOptions): Promise<void> {\n  setupEnvironmentVariables(options)\n\n  const {findUpAndReadPackageJson} = await import('./node-package-manager.js')\n  const {moduleDirectory} = await import('./path.js')\n\n  const packageJson = await findUpAndReadPackageJson(moduleDirectory(options.moduleURL))\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const packageName = (packageJson.content as any).name as string\n  const name = packageName.replace('@shopify/create-', '')\n  const initIndex = process.argv.findIndex((arg) => arg.includes('init'))\n  if (initIndex === -1) {\n    const initIndex =\n      process.argv.findIndex((arg) => arg.match(new RegExp(`bin(\\\\/|\\\\\\\\)+(create-${name}|dev|run)`))) + 1\n    process.argv.splice(initIndex, 0, 'init')\n  }\n  await runCLI(options)\n}\n\nexport async function useLocalCLIIfDetected(filepath: string): Promise<boolean> {\n  const {isTruthy} = await import('../../private/node/context/utilities.js')\n  const {environmentVariables} = await import('../../private/node/constants.js')\n  const {joinPath: join} = await import('./path.js')\n  const {exec} = await import('./system.js')\n\n  // Temporary flag while we test out this feature and ensure it won't break anything!\n  if (!isTruthy(process.env[environmentVariables.enableCliRedirect])) return false\n\n  // Setting an env variable in the child process prevents accidental recursion.\n  if (isTruthy(process.env[environmentVariables.skipCliRedirect])) return false\n\n  // If already running via package manager, we can assume it's running correctly already.\n  if (process.env.npm_config_user_agent) return false\n\n  const cliPackage = await localCliPackage()\n  if (!cliPackage) return false\n\n  const correctExecutablePath = join(cliPackage.path, cliPackage.bin.shopify)\n  if (correctExecutablePath === filepath) return false\n  try {\n    await exec(correctExecutablePath, process.argv.slice(2, process.argv.length), {\n      stdio: 'inherit',\n      env: {[environmentVariables.skipCliRedirect]: '1'},\n    })\n    // eslint-disable-next-line no-catch-all/no-catch-all, @typescript-eslint/no-explicit-any\n  } catch (processError: any) {\n    process.exit(processError.exitCode)\n  }\n  return true\n}\n\ninterface CliPackageInfo {\n  path: string\n  bin: {shopify: string}\n}\n\ninterface PackageJSON {\n  dependencies?: {[packageName: string]: CliPackageInfo}\n  devDependencies?: {[packageName: string]: CliPackageInfo}\n  peerDependencies?: {[packageName: string]: CliPackageInfo}\n}\n\nexport async function localCliPackage(): Promise<CliPackageInfo | undefined> {\n  const {captureOutput} = await import('./system.js')\n\n  let npmListOutput = ''\n  let localShopifyCLI: PackageJSON = {}\n  try {\n    npmListOutput = await captureOutput('npm', ['list', '@shopify/cli', '--json', '-l'])\n    localShopifyCLI = JSON.parse(npmListOutput)\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (err) {\n    return\n  }\n  const dependenciesList = {\n    ...localShopifyCLI.peerDependencies,\n    ...localShopifyCLI.devDependencies,\n    ...localShopifyCLI.dependencies,\n  }\n  return dependenciesList['@shopify/cli']\n}\n\n/**\n * An object that contains the flags that\n * are shared across all the commands.\n */\nexport const globalFlags = {\n  verbose: Flags.boolean({\n    hidden: false,\n    description: 'Increase the verbosity of the logs.',\n    env: 'SHOPIFY_FLAG_VERBOSE',\n  }),\n}\n\nexport default runCLI\n"]}