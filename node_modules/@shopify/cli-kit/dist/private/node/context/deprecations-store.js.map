{"version":3,"file":"deprecations-store.js","sourceRoot":"","sources":["../../../../src/private/node/context/deprecations-store.ts"],"names":[],"mappings":"AAQA,MAAM,2BAA2B,GAAgC;IAC/D,GAAG,UAAU;IACb,iBAAiB,EAAE;QACjB,mBAAmB,EAAE,SAAS;KAC/B;CACF,CAAA;AAED;;;;GAIG;AACH,MAAM,UAAU,sBAAsB;IACpC,OAAO,2BAA2B,CAAC,iBAAiB,CAAC,mBAAmB,CAAA;AAC1E,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,KAAa;IAClD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;QAAE,OAAM;IAE5B,MAAM,sBAAsB,GAAG,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAA;IACvE,IAAI,CAAC,sBAAsB;QAAE,OAAM;IAEnC,MAAM,mBAAmB,GAAG,sBAAsB,EAAE,CAAA;IACpD,IAAI,CAAC,mBAAmB,IAAI,sBAAsB,GAAG,mBAAmB,CAAC,OAAO,EAAE,EAAE;QAClF,2BAA2B,CAAC,iBAAiB,CAAC,mBAAmB,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAA;KACrG;AACH,CAAC;AAED,SAAS,qBAAqB,CAAC,SAAiB,EAAE,KAAa;IAC7D,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;IACjD,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,GAAG,SAAS,CAAC,CAAA;AACtD,CAAC","sourcesContent":["interface DeprecationsStore {\n  nextDeprecationDate: Date | undefined\n}\n\ninterface GlobalWithDeprecationsStore {\n  deprecationsStore: DeprecationsStore\n}\n\nconst globalWithDeprecationsStore: GlobalWithDeprecationsStore = {\n  ...globalThis,\n  deprecationsStore: {\n    nextDeprecationDate: undefined,\n  },\n}\n\n/**\n * Get the earliest date in the future when deprecations will no longer be supported, if any.\n *\n * @returns The next deprecation date.\n */\nexport function getNextDeprecationDate(): Date | undefined {\n  return globalWithDeprecationsStore.deprecationsStore.nextDeprecationDate\n}\n\n/**\n * Set the next deprecation date to the earliest date in the future.\n *\n * @param dates - Dates when deprecations will no longer be supported.\n */\nexport function setNextDeprecationDate(dates: Date[]): Date | undefined {\n  if (dates.length < 1) return\n\n  const earliestFutureDateTime = earliestDateTimeAfter(Date.now(), dates)\n  if (!earliestFutureDateTime) return\n\n  const nextDeprecationDate = getNextDeprecationDate()\n  if (!nextDeprecationDate || earliestFutureDateTime < nextDeprecationDate.getTime()) {\n    globalWithDeprecationsStore.deprecationsStore.nextDeprecationDate = new Date(earliestFutureDateTime)\n  }\n}\n\nfunction earliestDateTimeAfter(afterTime: number, dates: Date[]): number | undefined {\n  const times = dates.map((date) => date.getTime())\n  return times.sort().find((time) => time > afterTime)\n}\n"]}