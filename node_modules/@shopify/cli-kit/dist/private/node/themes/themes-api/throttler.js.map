{"version":3,"file":"throttler.js","sourceRoot":"","sources":["../../../../../src/private/node/themes/themes-api/throttler.ts"],"names":[],"mappings":"AAAA,MAAM,+BAA+B,GAAG,CAAC,CAAA;AACzC,MAAM,oBAAoB,GAAG,CAAC,CAAA;AAE9B,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAI,OAAgB;IAChD,OAAO,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;QACzC,MAAM,cAAc,GAAG,GAAG,EAAE;YAC1B,eAAe,EAAE,CAAC,cAAc,IAAI,CAAC,CAAA;YACrC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;QACpB,CAAC,CAAA;QAED;;;;;;;WAOG;QACH,MAAM,gBAAgB,GAAG,GAAG,EAAE;YAC5B,IAAI,CAAC,kBAAkB,EAAE,EAAE;gBACzB,iBAAiB,CAAC,cAAc,CAAC,CAAA;gBACjC,OAAM;aACP;YAED,UAAU,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,CAAA;QAC3D,CAAC,CAAA;QAED;;;;;;WAMG;QACH,MAAM,iBAAiB,GAAG,CAAC,OAAmB,EAAE,EAAE;YAChD,IAAI,CAAC,kBAAkB,EAAE,EAAE;gBACzB,OAAO,EAAE,CAAA;gBACT,OAAM;aACP;YAED,UAAU,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,CAAA;QAC7D,CAAC,CAAA;QAED;;WAEG;QACH,iBAAiB,CAAC,gBAAgB,CAAC,CAAA;IACrC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;QACd,eAAe,EAAE,CAAC,cAAc,IAAI,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,SAAuC;IACxE,IAAI,CAAC,SAAS,EAAE;QACd,OAAM;KACP;IAED,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,SAAS,CAAA;IAE/B,iBAAiB,EAAE,CAAC,YAAY,GAAG,EAAC,IAAI,EAAE,KAAK,EAAC,CAAA;AAClD,CAAC;AAED,SAAS,kBAAkB;IACzB,OAAO,eAAe,EAAE,CAAC,cAAc,GAAG,+BAA+B,CAAA;AAC3E,CAAC;AAED,SAAS,kBAAkB;IACzB,MAAM,EAAC,IAAI,EAAE,KAAK,EAAC,GAAG,iBAAiB,EAAE,CAAC,YAAY,CAAA;IACtD,OAAO,IAAI,IAAI,KAAK,GAAG,oBAAoB,CAAA;AAC7C,CAAC;AAED,SAAS,iBAAiB;IACxB,OAAO,eAAe,EAAE,CAAC,iBAAiB,CAAA;AAC5C,CAAC;AAED;;;;;;;;GAQG;AACH,SAAS,eAAe;IACtB,OAAO,CACL,gBAAgB;QAChB,CAAC,gBAAgB,GAAG;YAClB,cAAc,EAAE,CAAC;YACjB,iBAAiB,EAAE;gBACjB,YAAY,EAAE,EAAC,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC;aACnC;SACF,CAAC,CACH,CAAA;AACH,CAAC;AAED,IAAI,gBAUH,CAAA","sourcesContent":["const MAX_NUMBER_OF_PARALLEL_REQUESTS = 5\nconst MARGIN_TO_RATE_LIMIT = 5\n\nexport async function throttle<T>(request: () => T) {\n  return new Promise<T>((resolve, _reject) => {\n    const performRequest = () => {\n      throttlingState().requestCounter += 1\n      resolve(request())\n    }\n\n    /**\n     * Performs the {@link performRequest} taking into account the\n     * limit of parallel requests only when the API limit has not\n     * been reached.\n     *\n     * Otherwise, performs the request to get the updated API limit\n     * headers, so throttler parameters get updates.\n     */\n    const throttleByHeader = () => {\n      if (!isReachingApiLimit()) {\n        throttleByCounter(performRequest)\n        return\n      }\n\n      setTimeout(() => throttleByCounter(performRequest), 4000)\n    }\n\n    /**\n     * Performs the {@link command} only when the the limit\n     * of parallel request has not been reached.\n     *\n     * Otherwise, defers the execution to the {@link throttleByHeader},\n     * still respecting the limit of parallel requests.\n     */\n    const throttleByCounter = (command: () => void) => {\n      if (!hasTooManyRequests()) {\n        command()\n        return\n      }\n\n      setTimeout(() => throttleByCounter(throttleByHeader), 1000)\n    }\n\n    /**\n     * Start throttling by counter to get the API limit headers.\n     */\n    throttleByCounter(throttleByHeader)\n  }).finally(() => {\n    throttlingState().requestCounter -= 1\n  })\n}\n\nexport function updateApiCallLimit(callLimit: [number, number] | undefined) {\n  if (!callLimit) {\n    return\n  }\n\n  const [used, limit] = callLimit\n\n  latestRequestInfo().apiCallLimit = {used, limit}\n}\n\nfunction hasTooManyRequests() {\n  return throttlingState().requestCounter > MAX_NUMBER_OF_PARALLEL_REQUESTS\n}\n\nfunction isReachingApiLimit() {\n  const {used, limit} = latestRequestInfo().apiCallLimit\n  return used >= limit - MARGIN_TO_RATE_LIMIT\n}\n\nfunction latestRequestInfo() {\n  return throttlingState().latestRequestInfo\n}\n\n/**\n * Even considering the Stateless modules convention,\n * tracking information about the latest request is\n * critical to optimize the request throttler efficiently.\n *\n * Thus, in this case, this module deliberately avoids\n * IO cost and uses the `_throttlingState` instance for\n * that purpose.\n */\nfunction throttlingState() {\n  return (\n    _throttlingState ??\n    (_throttlingState = {\n      requestCounter: 0,\n      latestRequestInfo: {\n        apiCallLimit: {used: 0, limit: 40},\n      },\n    })\n  )\n}\n\nlet _throttlingState: {\n  /**\n   * Number of parallel requests */\n  requestCounter: number\n\n  /**\n   * Latest request information */\n  latestRequestInfo: {\n    apiCallLimit: {used: number; limit: number}\n  }\n}\n"]}