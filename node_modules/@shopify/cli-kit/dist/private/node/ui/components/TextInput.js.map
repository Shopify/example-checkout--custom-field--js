{"version":3,"file":"TextInput.js","sourceRoot":"","sources":["../../../../../src/private/node/ui/components/TextInput.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-nested-ternary */\nimport React, {useEffect, useState} from 'react'\nimport {Text, useInput} from 'ink'\nimport chalk from 'chalk'\nimport type {FunctionComponent} from 'react'\n\ninterface TextInputProps {\n  defaultValue?: string\n  value: string\n  onChange: (value: string) => void\n  color?: string\n  password?: boolean\n  focus?: boolean\n  placeholder?: string\n}\n\nconst TextInput: FunctionComponent<TextInputProps> = ({\n  value: originalValue,\n  defaultValue = '',\n  onChange,\n  placeholder = '',\n  color = 'cyan',\n  password = false,\n  focus = true,\n}) => {\n  const [cursorOffset, setCursorOffset] = useState((originalValue || '').length)\n\n  // if the updated value is shorter than the last one we need to reset the cursor\n  useEffect(() => {\n    setCursorOffset((previousOffset) => {\n      const newValue = originalValue || ''\n\n      if (previousOffset > newValue.length - 1) {\n        return newValue.length\n      }\n\n      return previousOffset\n    })\n  }, [originalValue])\n\n  const value = password ? '*'.repeat(originalValue.length) : originalValue\n  let renderedValue\n\n  const renderPlaceholder = (value: string) => {\n    return chalk.inverse(value[0]) + chalk.dim(value.slice(1))\n  }\n\n  const renderedPlaceholder =\n    defaultValue.length > 0\n      ? renderPlaceholder(defaultValue)\n      : placeholder.length > 0\n      ? renderPlaceholder(placeholder)\n      : chalk.inverse(' ')\n\n  // render cursor\n  renderedValue = value\n    .split('')\n    .map((char, index) => {\n      if (index === cursorOffset) {\n        return chalk.inverse(char)\n      } else {\n        return char\n      }\n    })\n    .join('')\n\n  if (cursorOffset === value.length) {\n    renderedValue += chalk.inverse(' ')\n  }\n\n  useInput(\n    (input, key) => {\n      if (\n        key.upArrow ||\n        key.downArrow ||\n        (key.ctrl && input === 'c') ||\n        key.tab ||\n        (key.shift && key.tab) ||\n        key.return\n      ) {\n        return\n      }\n\n      let nextCursorOffset = cursorOffset\n      let nextValue = originalValue\n\n      if (key.leftArrow) {\n        if (cursorOffset > 0) {\n          nextCursorOffset--\n        }\n      } else if (key.rightArrow) {\n        if (cursorOffset < originalValue.length) {\n          nextCursorOffset++\n        }\n      } else if (key.backspace || key.delete) {\n        if (cursorOffset > 0) {\n          nextValue = originalValue.slice(0, cursorOffset - 1) + originalValue.slice(cursorOffset, originalValue.length)\n          nextCursorOffset--\n        }\n      } else {\n        nextValue =\n          originalValue.slice(0, cursorOffset) + input + originalValue.slice(cursorOffset, originalValue.length)\n        nextCursorOffset += input.length\n      }\n\n      setCursorOffset(nextCursorOffset)\n\n      if (nextValue !== originalValue) {\n        onChange(nextValue)\n      }\n    },\n    {isActive: focus},\n  )\n\n  return <Text color={color}>{value.length > 0 ? renderedValue : renderedPlaceholder}</Text>\n}\n\nexport {TextInput}\n"]}