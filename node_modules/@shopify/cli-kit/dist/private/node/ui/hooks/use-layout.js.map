{"version":3,"file":"use-layout.js","sourceRoot":"","sources":["../../../../../src/private/node/ui/hooks/use-layout.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAC,MAAM,KAAK,CAAA;AAC7B,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAA;AAEzC,MAAM,cAAc,GAAG,EAAE,CAAA;AACzB,MAAM,kBAAkB,GAAG,EAAE,CAAA;AAQ7B,MAAM,CAAC,OAAO,UAAU,SAAS;IAC/B,MAAM,EAAC,MAAM,EAAC,GAAG,SAAS,EAAE,CAAA;IAC5B,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAA;IAE7D,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,MAAM,EAAE;YACX,OAAM;SACP;QAED,SAAS,QAAQ;YACf,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAA;QACpC,CAAC;QAED,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;QAE7B,OAAO,GAAG,EAAE;YACV,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;QAChC,CAAC,CAAA;IACH,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO,MAAM,CAAA;AACf,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,MAAsC;IACpE,IAAI,SAAS,GAAG,MAAM,EAAE,OAAO,IAAI,kBAAkB,CAAA;IACrD,IAAI,QAAQ,GAAG,SAAS,CAAA;IACxB,IAAI,SAAS,GAAG,SAAS,CAAA;IAEzB,IAAI,SAAS,IAAI,cAAc,EAAE;QAC/B,SAAS,GAAG,cAAc,CAAA;QAC1B,QAAQ,GAAG,cAAc,CAAA;QACzB,SAAS,GAAG,cAAc,CAAA;KAC3B;SAAM,IAAI,SAAS,GAAG,kBAAkB,EAAE;QACzC,QAAQ,GAAG,MAAM,CAAC,EAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAC,CAAC,CAAA;QAC9E,SAAS,GAAG,MAAM,CAAC,EAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAC,CAAC,CAAA;KAChF;IAED,OAAO;QACL,SAAS;QACT,QAAQ;QACR,SAAS;KACV,CAAA;AACH,CAAC;AAED,SAAS,MAAM,CAAC,EACd,SAAS,EACT,QAAQ,EACR,QAAQ,GAKT;IACC,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IAE3E,IAAI,eAAe,GAAG,QAAQ,EAAE;QAC9B,OAAO,QAAQ,CAAA;KAChB;SAAM;QACL,OAAO,eAAe,CAAA;KACvB;AACH,CAAC","sourcesContent":["import {useStdout} from 'ink'\nimport {useEffect, useState} from 'react'\n\nconst MIN_FULL_WIDTH = 20\nconst MIN_FRACTION_WIDTH = 80\n\ninterface Layout {\n  twoThirds: number\n  oneThird: number\n  fullWidth: number\n}\n\nexport default function useLayout(): Layout {\n  const {stdout} = useStdout()\n  const [layout, setLayout] = useState(calculateLayout(stdout))\n\n  useEffect(() => {\n    if (!stdout) {\n      return\n    }\n\n    function onResize() {\n      setLayout(calculateLayout(stdout))\n    }\n\n    stdout.on('resize', onResize)\n\n    return () => {\n      stdout.off('resize', onResize)\n    }\n  }, [])\n\n  return layout\n}\n\nexport function calculateLayout(stdout: NodeJS.WriteStream | undefined) {\n  let fullWidth = stdout?.columns ?? MIN_FRACTION_WIDTH\n  let oneThird = fullWidth\n  let twoThirds = fullWidth\n\n  if (fullWidth <= MIN_FULL_WIDTH) {\n    fullWidth = MIN_FULL_WIDTH\n    oneThird = MIN_FULL_WIDTH\n    twoThirds = MIN_FULL_WIDTH\n  } else if (fullWidth > MIN_FRACTION_WIDTH) {\n    oneThird = column({fullWidth, fraction: [1, 3], minWidth: MIN_FRACTION_WIDTH})\n    twoThirds = column({fullWidth, fraction: [2, 3], minWidth: MIN_FRACTION_WIDTH})\n  }\n\n  return {\n    fullWidth,\n    oneThird,\n    twoThirds,\n  }\n}\n\nfunction column({\n  fullWidth,\n  fraction,\n  minWidth,\n}: {\n  fullWidth: number\n  fraction: [number, number]\n  minWidth: number\n}): number {\n  const fractionedWidth = Math.floor((fullWidth / fraction[1]) * fraction[0])\n\n  if (fractionedWidth < minWidth) {\n    return minWidth\n  } else {\n    return fractionedWidth\n  }\n}\n"]}