{"version":3,"file":"device-authorization.js","sourceRoot":"","sources":["../../../../src/private/node/session/device-authorization.ts"],"names":[],"mappings":"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","sourcesContent":["import {clientId} from './identity.js'\nimport {exchangeDeviceCodeForAccessToken} from './exchange.js'\nimport {IdentityToken} from './schema.js'\nimport {identityFqdn} from '../../../public/node/context/fqdn.js'\nimport {shopifyFetch} from '../../../public/node/http.js'\nimport {outputContent, outputDebug, outputInfo, outputToken} from '../../../public/node/output.js'\nimport {BugError} from '../../../public/node/error.js'\n\nexport interface DeviceAuthorizationResponse {\n  deviceCode: string\n  userCode: string\n  verificationUri: string\n  expiresIn: number\n  verificationUriComplete?: string\n  interval?: number\n}\n\n/**\n * Initiate a device authorization flow.\n * This will return a DeviceAuthorizationResponse containing the URL where user\n * should go to authorize the device without the need of a callback to the CLI.\n *\n * Also returns a `deviceCode` used for polling the token endpoint in the next step.\n *\n * @param scopes - The scopes to request\n * @returns An object with the device authorization response.\n */\nexport async function requestDeviceAuthorization(scopes: string[]): Promise<DeviceAuthorizationResponse> {\n  const fqdn = await identityFqdn()\n  const identityClientId = await clientId()\n  const queryParams = {client_id: identityClientId, scope: scopes.join(' ')}\n  const url = `https://${fqdn}/oauth/device_authorization`\n\n  const response = await shopifyFetch(url, {\n    method: 'POST',\n    headers: {'Content-type': 'application/x-www-form-urlencoded'},\n    body: convertRequestToParams(queryParams),\n  })\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const jsonResult: any = await response.json()\n\n  outputDebug(outputContent`Received device authorization code: ${outputToken.json(jsonResult)}`)\n  if (!jsonResult.device_code || !jsonResult.verification_uri_complete) {\n    throw new BugError('Failed to start authorization process')\n  }\n\n  outputInfo('\\nTo run this command, log in to Shopify Partners.')\n  outputInfo(outputContent`User verification code: ${jsonResult.user_code}`)\n  outputInfo(\n    outputContent`ðŸ‘‰ Open this link to start the auth process: ${outputToken.green(\n      jsonResult.verification_uri_complete,\n    )}`,\n  )\n\n  return {\n    deviceCode: jsonResult.device_code,\n    userCode: jsonResult.user_code,\n    verificationUri: jsonResult.verification_uri,\n    expiresIn: jsonResult.expires_in,\n    verificationUriComplete: jsonResult.verification_uri_complete,\n    interval: jsonResult.interval,\n  }\n}\n\n/**\n * Poll the Oauth token endpoint with the device code obtained from a DeviceAuthorizationResponse.\n * The endpoint will return `authorization_pending` until the user completes the auth flow in the browser.\n * Once the user completes the auth flow, the endpoint will return the identity token.\n *\n * Timeout for the polling is defined by the server and is around 600 seconds.\n *\n * @param code - The device code obtained after starting a device identity flow\n * @param interval - The interval to poll the token endpoint\n * @returns The identity token\n */\nexport async function pollForDeviceAuthorization(code: string, interval = 5): Promise<IdentityToken> {\n  let currentIntervalInSeconds = interval\n\n  return new Promise<IdentityToken>((resolve, reject) => {\n    const onPoll = async () => {\n      const result = await exchangeDeviceCodeForAccessToken(code)\n      if (!result.isErr()) return resolve(result.value)\n\n      const error = result.error ?? 'unknown_failure'\n\n      outputDebug(outputContent`Polling for device authorization... status: ${error}`)\n      switch (error) {\n        case 'authorization_pending':\n          return startPolling()\n        case 'slow_down':\n          currentIntervalInSeconds += 5\n          return startPolling()\n        case 'access_denied':\n        case 'expired_token':\n        case 'unknown_failure':\n          return reject(result)\n      }\n    }\n\n    const startPolling = () => {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      setTimeout(onPoll, currentIntervalInSeconds * 1000)\n    }\n\n    startPolling()\n  })\n}\n\nfunction convertRequestToParams(queryParams: {client_id: string; scope: string}): string {\n  return Object.entries(queryParams)\n    .map(([key, value]) => value && `${key}=${value}`)\n    .filter((hasValue) => Boolean(hasValue))\n    .join('&')\n}\n"]}