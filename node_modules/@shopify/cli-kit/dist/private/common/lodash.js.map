{"version":3,"file":"lodash.js","sourceRoot":"","sources":["../../../src/private/common/lodash.ts"],"names":[],"mappings":"","sourcesContent":["export type PartialShallow<T> = {\n  [P in keyof T]?: T[P] extends object ? object : T[P]\n}\nexport type PropertyName = string | number | symbol\nexport type IterateeShorthand<T> = PropertyName | [PropertyName, unknown] | PartialShallow<T>\nexport type ValueIteratee<T> = ((value: T) => unknown) | IterateeShorthand<T>\nexport interface Dictionary<T> {\n  [index: string]: T\n}\n\nexport interface DebounceSettings {\n  /**\n   * @see _.leading\n   */\n  leading?: boolean | undefined\n  /**\n   * @see _.maxWait\n   */\n  maxWait?: number | undefined\n  /**\n   * @see _.trailing\n   */\n  trailing?: boolean | undefined\n}\n\nexport interface DebouncedFunc<T extends (...args: unknown[]) => unknown> {\n  /**\n   * Call the original function, but applying the debounce rules.\n   *\n   * If the debounced function can be run immediately, this calls it and returns its return\n   * value.\n   *\n   * Otherwise, it returns the return value of the last invocation, or undefined if the debounced\n   * function was not invoked yet.\n   */\n  (...args: Parameters<T>): ReturnType<T> | undefined\n\n  /**\n   * Throw away any pending invocation of the debounced function.\n   */\n  cancel(): void\n\n  /**\n   * If there is a pending invocation of the debounced function, invoke it immediately and return\n   * its return value.\n   *\n   * Otherwise, return the value from the last invocation, or undefined if the debounced function\n   * was never invoked.\n   */\n  flush(): ReturnType<T> | undefined\n}\n"]}