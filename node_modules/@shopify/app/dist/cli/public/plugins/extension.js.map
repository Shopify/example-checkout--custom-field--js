{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/public/plugins/extension.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,8BAA8B,EAA2C,MAAM,+BAA+B,CAAA;AACtH,OAAO,EAAC,2BAA2B,EAAuC,MAAM,sCAAsC,CAAA;AACtH,OAAO,EAAC,mBAAmB,EAAC,MAAM,qDAAqD,CAAA;AACvF,OAAO,EAAC,iBAAiB,EAAC,MAAM,qDAAqD,CAAA;AAErF,cAAc,oCAAoC,CAAA;AAyBlD;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,iCAAiC,GAAG,CAC/C,cAAiD,EACzB,EAAE;IAC1B,OAAO,KAAK,IAAI,EAAE,CAAC,cAAmC,CAAA;AACxD,CAAC,CAAA;AAED;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,cAA8B,EAAyB,EAAE;IACtG,OAAO,KAAK,IAAI,EAAE,CAAC,cAAc,CAAA;AACnC,CAAC,CAAA","sourcesContent":["import {UIExtensionSpec} from '../../models/extensions/ui.js'\nimport {FunctionSpec} from '../../models/extensions/functions.js'\nimport {BaseConfigContents} from '../../models/extensions/schemas.js'\nimport {FanoutHookFunction, HookReturnsPerPlugin} from '@shopify/cli-kit/node/plugins'\n\nexport {createUIExtensionSpecification, UIExtensionSpec, CreateExtensionSpecType} from '../../models/extensions/ui.js'\nexport {createFunctionSpecification, FunctionSpec, CreateFunctionSpecType} from '../../models/extensions/functions.js'\nexport {fetchProductVariant} from '../../utilities/extensions/fetch-product-variant.js'\nexport {loadLocalesConfig} from '../../utilities/extensions/locales-configuration.js'\n\nexport * from '../../models/extensions/schemas.js'\n\n/**\n * Extension Plugins types.\n *\n * Any plugin that provides extension definitions should implement `defineExtensionSpecs`.\n */\nexport interface HookReturnPerExtensionPlugin extends HookReturnsPerPlugin {\n  extension_specs: {\n    options: {[key: string]: never}\n    pluginReturns: {\n      [pluginName: string]: UIExtensionSpec[]\n    }\n  }\n  function_specs: {\n    options: {[key: string]: never}\n    pluginReturns: {\n      [pluginName: string]: FunctionSpec[]\n    }\n  }\n}\n\nexport type ExtensionSpecsFunction = FanoutHookFunction<'extension_specs', '', HookReturnPerExtensionPlugin>\nexport type FunctionSpecsFunction = FanoutHookFunction<'function_specs', '', HookReturnPerExtensionPlugin>\n\n/**\n * A function for plugins to register new UI extension types.\n *\n * @param specifications - The UI extension specifications to register.\n * @returns A function that returns the list of specifications.\n * @example\n */\nexport const registerUIExtensionSpecifications = <TConfiguration extends BaseConfigContents = BaseConfigContents>(\n  specifications: UIExtensionSpec<TConfiguration>[],\n): ExtensionSpecsFunction => {\n  return async () => specifications as UIExtensionSpec[]\n}\n\n/**\n * A function for plugins to register new function types.\n *\n * @param specifications - The function specifications to register.\n * @returns A function that returns the list of specifications.\n * @example\n */\nexport const registerFunctionSpecifications = (specifications: FunctionSpec[]): FunctionSpecsFunction => {\n  return async () => specifications\n}\n"]}