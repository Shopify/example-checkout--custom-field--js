{"version":3,"file":"identifiers-extensions.js","sourceRoot":"","sources":["../../../../src/cli/services/context/identifiers-extensions.ts"],"names":[],"mappings":"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","sourcesContent":["import {manualMatchIds} from './id-manual-matching.js'\nimport {automaticMatchmaking} from './id-matching.js'\nimport {EnsureDeploymentIdsPresenceOptions, LocalSource, MatchingError, RemoteSource} from './identifiers.js'\nimport {deployConfirmationPrompt, extensionMigrationPrompt, matchConfirmationPrompt} from './prompts.js'\nimport {createExtension} from '../dev/create-extension.js'\nimport {IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {getExtensionsToMigrate, migrateExtensionsToUIExtension} from '../dev/migrate-to-ui-extension.js'\nimport {err, ok, Result} from '@shopify/cli-kit/node/result'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {outputCompleted} from '@shopify/cli-kit/node/output'\n\nexport async function ensureExtensionsIds(\n  options: EnsureDeploymentIdsPresenceOptions,\n  initialRemoteExtensions: RemoteSource[],\n): Promise<Result<{extensions: IdentifiersExtensions; extensionIds: IdentifiersExtensions}, MatchingError>> {\n  let remoteExtensions = initialRemoteExtensions\n  const validIdentifiers = options.envIdentifiers.extensions ?? {}\n  const localExtensions = [...options.app.extensions.ui, ...options.app.extensions.theme]\n  const extensionsToMigrate = getExtensionsToMigrate(localExtensions, remoteExtensions, validIdentifiers)\n\n  if (extensionsToMigrate.length > 0) {\n    const confirmedMigration = await extensionMigrationPrompt(extensionsToMigrate)\n\n    if (confirmedMigration) {\n      remoteExtensions = await migrateExtensionsToUIExtension(extensionsToMigrate, options.appId, remoteExtensions)\n    } else {\n      return err('user-cancelled')\n    }\n  }\n\n  const matchExtensions = await automaticMatchmaking(localExtensions, remoteExtensions, validIdentifiers, 'uuid')\n\n  let validMatches = matchExtensions.identifiers\n  const validMatchesById: {[key: string]: string} = {}\n\n  for (const pending of matchExtensions.toConfirm) {\n    // eslint-disable-next-line no-await-in-loop\n    const confirmed = await matchConfirmationPrompt(pending.local, pending.remote)\n    if (!confirmed) return err('user-cancelled')\n    validMatches[pending.local.localIdentifier] = pending.remote.uuid\n  }\n\n  const extensionsToCreate = matchExtensions.toCreate ?? []\n  let onlyRemoteExtensions = matchExtensions.toManualMatch.remote ?? []\n\n  if (matchExtensions.toManualMatch.local.length > 0) {\n    const matchResult = await manualMatchIds(matchExtensions.toManualMatch, 'uuid')\n    validMatches = {...validMatches, ...matchResult.identifiers}\n    extensionsToCreate.push(...matchResult.toCreate)\n    onlyRemoteExtensions = matchResult.onlyRemote\n  }\n\n  if (!options.force) {\n    const confirmed = await deployConfirmationPrompt({\n      question: 'Make the following changes to your extensions in Shopify Partners?',\n      identifiers: validMatches,\n      toCreate: extensionsToCreate,\n      onlyRemote: onlyRemoteExtensions,\n    })\n    if (!confirmed) return err('user-cancelled')\n  }\n\n  if (extensionsToCreate.length > 0) {\n    const newIdentifiers = await createExtensions(extensionsToCreate, options.appId)\n    for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {\n      validMatches[localIdentifier] = registration.uuid\n      validMatchesById[localIdentifier] = registration.id\n    }\n  }\n\n  // For extensions we also need the match by ID, not only UUID (doesn't apply to functions)\n  for (const [localIdentifier, uuid] of Object.entries(validMatches)) {\n    const registration = remoteExtensions.find((registration) => registration.uuid === uuid)\n    if (registration) validMatchesById[localIdentifier] = registration.id\n  }\n\n  return ok({\n    extensions: validMatches,\n    extensionIds: validMatchesById,\n  })\n}\n\nasync function createExtensions(extensions: LocalSource[], appId: string) {\n  const token = await ensureAuthenticatedPartners()\n  const result: {[localIdentifier: string]: RemoteSource} = {}\n  for (const extension of extensions) {\n    // Create one at a time to avoid API rate limiting issues.\n    // eslint-disable-next-line no-await-in-loop\n    const registration = await createExtension(appId, extension.graphQLType, extension.configuration.name, token)\n    outputCompleted(`Created extension ${extension.configuration.name}.`)\n    result[extension.localIdentifier] = registration\n  }\n  return result\n}\n"]}