{"version":3,"file":"trigger-flags.js","sourceRoot":"","sources":["../../../../src/cli/services/webhook/trigger-flags.ts"],"names":[],"mappings":"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","sourcesContent":["import {requestApiVersions} from './request-api-versions.js'\nimport {requestTopics} from './request-topics.js'\nimport {isValueSet} from './trigger.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\nexport interface WebhookTriggerFlags {\n  topic?: string\n  apiVersion?: string\n  deliveryMethod?: string\n  address?: string\n  clientSecret?: string\n}\n\nexport const DELIVERY_METHOD = {\n  LOCALHOST: 'localhost',\n  HTTP: 'http',\n  PUBSUB: 'google-pub-sub',\n  EVENTBRIDGE: 'event-bridge',\n}\n\nconst PROTOCOL = {\n  LOCALHOST: new RegExp('^http:', 'i'),\n  HTTP: new RegExp('^https:', 'i'),\n  PUBSUB: new RegExp('^pubsub:'),\n  EVENTBRIDGE: new RegExp('^arn:aws:events:'),\n}\n\n/**\n * Checks whether an address and a delivery method are compatible\n *\n * @param address - A target endpoint\n * @param deliveryMethod - An existing delivery-method\n * @returns true if compatible (eg: pubsub://projectid/topicid and google-pub-sub), false otherwise\n */\nexport function isAddressAllowedForDeliveryMethod(address: string, deliveryMethod: string): boolean {\n  if (deliveryMethod === DELIVERY_METHOD.PUBSUB) {\n    return PROTOCOL.PUBSUB.test(address)\n  }\n\n  if (deliveryMethod === DELIVERY_METHOD.EVENTBRIDGE) {\n    return PROTOCOL.EVENTBRIDGE.test(address)\n  }\n\n  if (deliveryMethod === DELIVERY_METHOD.HTTP && isAnyHttp(address)) {\n    if (isLocal(address)) {\n      return true\n    }\n    return PROTOCOL.HTTP.test(address)\n  }\n\n  return false\n}\n\nfunction isLocal(address: string): boolean {\n  const url = new URL(address.toLowerCase())\n  return url.hostname === 'localhost'\n}\n\nfunction isAnyHttp(address: string): boolean {\n  return PROTOCOL.LOCALHOST.test(address) || PROTOCOL.HTTP.test(address)\n}\n\n/**\n * Returns valid address - method pairs from flags\n *\n * @param flags - Command flags\n * @returns [deliveryMethod, address]\n */\nexport function parseAddressAndMethod(flags: WebhookTriggerFlags): [string | undefined, string | undefined] {\n  let deliveryMethod\n  let address\n  const methodWasPassed = isValueSet(flags.deliveryMethod)\n  if (methodWasPassed) {\n    deliveryMethod = parseDeliveryMethodFlag(flags.deliveryMethod as string)\n  }\n\n  const addressWasPassed = isValueSet(flags.address)\n  if (addressWasPassed) {\n    if (methodWasPassed) {\n      validateAddressMethod(flags.address as string, flags.deliveryMethod as string)\n    }\n    ;[address, deliveryMethod] = parseAddressFlag(flags.address as string)\n  }\n\n  return [deliveryMethod, address]\n}\n\n/**\n * Returns valid api-version - topic pairs\n *\n * @param token - Partners session token\n * @param flags - Command flags\n * @returns [apiVersion, topic]\n */\nexport async function parseVersionAndTopic(\n  token: string,\n  flags: WebhookTriggerFlags,\n): Promise<[string | undefined, string | undefined]> {\n  let topic\n  let apiVersion\n  const versionWasPassed = isValueSet(flags.apiVersion)\n  if (versionWasPassed) {\n    apiVersion = parseApiVersionFlag(flags.apiVersion as string, await requestApiVersions(token))\n  }\n  const topicWasPassed = isValueSet(flags.topic)\n  if (topicWasPassed && versionWasPassed) {\n    topic = parseTopicFlag(\n      flags.topic as string,\n      flags.apiVersion as string,\n      await requestTopics(token, flags.apiVersion as string),\n    )\n  } else if (topicWasPassed) {\n    topic = flags.topic\n  }\n\n  return [apiVersion, topic]\n}\n\nfunction parseDeliveryMethodFlag(method: string): string {\n  if (method !== DELIVERY_METHOD.HTTP && method !== DELIVERY_METHOD.PUBSUB && method !== DELIVERY_METHOD.EVENTBRIDGE) {\n    throw new AbortError(\n      'Invalid Delivery Method passed',\n      `${DELIVERY_METHOD.HTTP}, ${DELIVERY_METHOD.PUBSUB}, and ${DELIVERY_METHOD.EVENTBRIDGE} are allowed`,\n      ['Try again with a valid delivery method'],\n    )\n  }\n\n  return method\n}\n\n/**\n * check if the address is allowed for the delivery method\n *\n * @param address - Address\n * @param deliveryMethod - Delivery Method\n * @returns true or Exception\n */\nexport function validateAddressMethod(address: string, deliveryMethod: string): boolean {\n  if (!isAddressAllowedForDeliveryMethod(address, deliveryMethod)) {\n    throw new AbortError(\n      `Can't deliver your webhook payload to this address using '${deliveryMethod}'`,\n      'Use a valid URL for address',\n      deliveryMethodInstructions(deliveryMethod),\n    )\n  }\n\n  return true\n}\n\nfunction deliveryMethodInstructions(method: string): string[] {\n  if (method === DELIVERY_METHOD.HTTP) {\n    return [\n      `For remote HTTP testing, use a URL that starts with https://`,\n      `For local HTTP testing, use http://localhost:{port}/{url-path}`,\n    ]\n  }\n  if (method === DELIVERY_METHOD.PUBSUB) {\n    return [`For Google Pub/Sub, use pubsub://{project-id}:{topic-id}`]\n  }\n  if (method === DELIVERY_METHOD.EVENTBRIDGE) {\n    return [`For Amazon EventBridge, use an Amazon Resource Name (ARN) starting with arn:aws:events:`]\n  }\n\n  return []\n}\n\n/**\n * Check if the address is valid and return a valid address - method pair\n *\n * @param address - Address\n * @returns [address, deliveryMethod]\n */\nexport function parseAddressFlag(address: string): [string, string] {\n  const method = deliveryMethodForAddress(address)\n  if (method === undefined) {\n    throw new AbortError(\n      'No delivery method available for the address',\n      `Use a valid address for ${DELIVERY_METHOD.HTTP}, ${DELIVERY_METHOD.PUBSUB} or ${DELIVERY_METHOD.EVENTBRIDGE}`,\n    )\n  }\n\n  return [address.trim(), method]\n}\n\n/**\n * Infer the delivery method from address\n *\n * @param address - Address\n * @returns deliveryMethod or undefined\n */\nexport function deliveryMethodForAddress(address: string): string | undefined {\n  if (PROTOCOL.PUBSUB.test(address)) {\n    return DELIVERY_METHOD.PUBSUB\n  }\n\n  if (PROTOCOL.EVENTBRIDGE.test(address)) {\n    return DELIVERY_METHOD.EVENTBRIDGE\n  }\n\n  if (isAnyHttp(address) && isLocal(address)) {\n    return DELIVERY_METHOD.LOCALHOST\n  }\n\n  if (PROTOCOL.HTTP.test(address)) {\n    return DELIVERY_METHOD.HTTP\n  }\n\n  return undefined\n}\n\nfunction parseApiVersionFlag(passedVersion: string, availableVersions: string[]): string {\n  if (availableVersions.includes(passedVersion)) {\n    return passedVersion\n  }\n\n  throw new AbortError(\n    `Api Version '${passedVersion}' does not exist`,\n    `Allowed values: ${availableVersions.join(', ')}`,\n    ['Try again with a valid api-version value'],\n  )\n}\n\n/**\n * topic if available in the topics list (transformed to undercase-slash if passed as GraphQL event name)\n *\n * @param passedTopic - Topic\n * @param apiVersion - ApiVersion for Exception message purposes\n * @param availableTopics - List of available topics\n * @returns topic\n */\nexport function parseTopicFlag(passedTopic: string, apiVersion: string, availableTopics: string[]): string {\n  if (availableTopics.length === 0) {\n    throw new AbortError(`No topics found for '${apiVersion}'`)\n  }\n  const translatedTopic = equivalentTopic(passedTopic.trim(), availableTopics)\n\n  if (translatedTopic === undefined) {\n    throw new AbortError(\n      `Topic '${passedTopic}' does not exist for ApiVersion '${apiVersion}'`,\n      `Allowed values: ${availableTopics.join(', ')}`,\n      ['Try again with a valid api-version - topic pair'],\n    )\n  }\n\n  return translatedTopic\n}\n\nfunction equivalentTopic(passedTopic: string, availableTopics: string[]): string | undefined {\n  if (availableTopics.includes(passedTopic)) {\n    return passedTopic\n  }\n\n  return availableTopics.find((elm) => elm.toUpperCase().replace('/', '_') === passedTopic)\n}\n"]}