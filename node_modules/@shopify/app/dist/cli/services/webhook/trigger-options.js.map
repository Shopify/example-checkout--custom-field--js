{"version":3,"file":"trigger-options.js","sourceRoot":"","sources":["../../../../src/cli/services/webhook/trigger-options.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppCredentials, findApiKey, findInEnv, requestAppInfo} from './find-app-info.js'\nimport {requestApiVersions} from './request-api-versions.js'\nimport {requestTopics} from './request-topics.js'\nimport {DELIVERY_METHOD, parseAddressFlag, parseTopicFlag} from './trigger-flags.js'\nimport {isValueSet} from './trigger.js'\nimport {\n  addressPrompt,\n  apiVersionPrompt,\n  clientSecretPrompt,\n  deliveryMethodPrompt,\n  topicPrompt,\n} from '../../prompts/webhook/trigger.js'\nimport {renderConfirmationPrompt} from '@shopify/cli-kit/node/ui'\nimport {outputInfo} from '@shopify/cli-kit/node/output'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\n/**\n * Collects a secret/api-key pair using a fallback mechanism:\n *  - Use secret if passed as flag\n *  - If manual: prompt and use. Return only secret\n *  - If automatic:\n *    - Get from .env\n *    - Get from Partners (possible prompts for organization and app)\n *    - prompt and use\n *\n * @param token - Partners session token\n * @param secret - secret flag\n * @returns a pair with client-secret, api-key (possibly empty)\n */\nexport async function collectCredentials(token: string, secret: string | undefined): Promise<AppCredentials> {\n  if (isValueSet(secret)) {\n    const credentials: AppCredentials = {clientSecret: secret as string}\n    return credentials\n  }\n\n  const automatic = await renderConfirmationPrompt({\n    message: `Should we automatically populate the client-secret for you using app settings?`,\n    confirmationMessage: `Yes, try to get it from the configuration`,\n    cancellationMessage: \"No, I'll type it myself\",\n  })\n\n  if (!automatic) {\n    const manualSecret = await clientSecretPrompt()\n    const credentials: AppCredentials = {clientSecret: manualSecret}\n    return credentials\n  }\n\n  const localCredentials = await findInEnv()\n  if (isValueSet(localCredentials.clientSecret)) {\n    outputInfo('Reading client-secret from .env file')\n    return localCredentials\n  }\n\n  const apiKey = await findApiKey(token)\n  if (apiKey === undefined) {\n    const manualSecret = await clientSecretPrompt()\n    const credentials: AppCredentials = {clientSecret: manualSecret}\n    return credentials\n  }\n\n  const appCredentials = await requestAppInfo(token, apiKey)\n  if (isValueSet(appCredentials.clientSecret)) {\n    outputInfo('Reading client-secret from app settings in Partners')\n  } else {\n    appCredentials.clientSecret = await clientSecretPrompt()\n    appCredentials.apiKey = apiKey\n  }\n\n  return appCredentials\n}\n\n/**\n * Collects api-key using a fallback mechanism:\n *  - Get from .env\n *  - Get from Partners (possible prompts for organization and app)\n *\n * @param token - Partners session token\n * @returns a api-key\n * @throws AbortError if none found\n */\nexport async function collectApiKey(token: string): Promise<string> {\n  const localCredentials = await findInEnv()\n  if (isValueSet(localCredentials.apiKey)) {\n    outputInfo('Using api-key from .env file')\n    return localCredentials.apiKey as string\n  }\n\n  const apiKey = await findApiKey(token)\n  if (apiKey === undefined) {\n    throw new AbortError(\n      'No app configuration found in Partners or .env file',\n      `You need an app to be able to use ${DELIVERY_METHOD.EVENTBRIDGE} delivery method.`,\n    )\n  }\n  outputInfo('Using api-key from app settings in Partners')\n\n  return apiKey\n}\n\n/**\n * Returns passed apiVersion or prompts for an existing one\n *\n * @param token - Partners session token\n * @param apiVersion - VALID or undefined api-version\n * @returns api-version\n */\nexport async function collectApiVersion(token: string, apiVersion: string | undefined): Promise<string> {\n  const selected = isValueSet(apiVersion)\n    ? (apiVersion as string)\n    : await apiVersionPrompt(await requestApiVersions(token))\n\n  return selected\n}\n\n/**\n * Returns passed topic if valid or prompts for an existing one\n *\n * @param token - Partners session token\n * @param apiVersion - VALID api-version\n * @param topic - topic or undefined\n * @returns topic\n */\nexport async function collectTopic(token: string, apiVersion: string, topic: string | undefined): Promise<string> {\n  if (isValueSet(topic)) {\n    return parseTopicFlag(topic as string, apiVersion, await requestTopics(token, apiVersion))\n  }\n\n  const selected = await topicPrompt(await requestTopics(token, apiVersion))\n\n  return selected\n}\n\n/**\n * Expects either undefined deliveryMethod - address pairs, undefined address or a valid pair\n *\n * @param deliveryMethod - Valid delivery method\n * @param address - Valid address\n * @returns [deliveryMethod, address]\n */\nexport async function collectAddressAndMethod(\n  deliveryMethod: string | undefined,\n  address: string | undefined,\n): Promise<[string, string]> {\n  let actualAddress = ''\n\n  if (isValueSet(deliveryMethod) && isValueSet(address)) {\n    actualAddress = address as string\n  }\n\n  if (isValueSet(deliveryMethod) && !isValueSet(address)) {\n    // Prompt only for addresses that are allowed for deliveryMethod\n    actualAddress = await addressPrompt(deliveryMethod as string)\n  }\n\n  if (!isValueSet(deliveryMethod) && !isValueSet(address)) {\n    // Ask for both\n    const method = await deliveryMethodPrompt()\n    actualAddress = await addressPrompt(method)\n  }\n\n  // Check if valid combination\n  const [finalAddress, actualMethod] = parseAddressFlag(actualAddress)\n\n  return [actualMethod, finalAddress]\n}\n"]}