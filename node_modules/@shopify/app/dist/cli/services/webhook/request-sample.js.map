{"version":3,"file":"request-sample.js","sourceRoot":"","sources":["../../../../src/cli/services/webhook/request-sample.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAA;AAiBlE,MAAM,yBAAyB,GAAG;;;;;;;;;;;CAWjC,CAAA;AAED;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,KAAa,EACb,KAAa,EACb,UAAkB,EAClB,cAAsB,EACtB,OAAe,EACf,YAAoB,EACpB,MAAe;IAEf,MAAM,SAAS,GAAG;QAChB,KAAK;QACL,WAAW,EAAE,UAAU;QACvB,OAAO;QACP,eAAe,EAAE,cAAc;QAC/B,aAAa,EAAE,YAAY;QAC3B,OAAO,EAAE,MAAM;KAChB,CAAA;IAED,MAAM,EAAC,iBAAiB,EAAE,MAAM,EAAC,GAAwB,MAAM,eAAe,CAC5E,yBAAyB,EACzB,KAAK,EACL,SAAS,CACV,CAAA;IAED,OAAO,MAAM,CAAA;AACf,CAAC","sourcesContent":["import {partnersRequest} from '@shopify/cli-kit/node/api/partners'\n\nexport interface SampleWebhook {\n  samplePayload: string\n  headers: string\n  success: boolean\n  userErrors: UserErrors[]\n}\nexport interface SamplePayloadSchema {\n  sendSampleWebhook: SampleWebhook\n}\n\nexport interface UserErrors {\n  message: string\n  fields: string[]\n}\n\nconst sendSampleWebhookMutation = `\n  mutation samplePayload($topic: String!, $api_version: String!, $address: String!, $delivery_method: String!, $shared_secret: String!, $api_key: String) {\n    sendSampleWebhook(input: {topic: $topic, apiVersion: $api_version, address: $address, deliveryMethod: $delivery_method, sharedSecret: $shared_secret, apiKey: $api_key}) {\n        samplePayload\n        success\n        headers\n        userErrors {\n          message\n        }\n    }\n  }\n`\n\n/**\n * Request the sample to partners. Partners will call core and the webhook will be emitted\n * In case the deliveryMethod is localhost and address is local, the response comes with the data the plugin\n * will redirect to a localhost port.\n * In all the other cases, core creates a job that sends the request to Captain-Hook. Captain-Hook will be in\n * charge of delivering the webhook payload to the requested destination.\n *\n * @param token - Partners session token\n * @param topic - A webhook topic (eg: orders/create)\n * @param apiVersion - Api version for the topic\n * @param deliveryMethod - one of DELIVERY_METHOD\n * @param address - A destination for the webhook notification\n * @param clientSecret - A secret to generate the HMAC header apps can use to validate the origin\n * @param apiKey - Client Api Key required to validate Event-Bridge addresses\n * @returns Empty if a remote delivery was requested, payload data if a local delivery was requested\n */\nexport async function getWebhookSample(\n  token: string,\n  topic: string,\n  apiVersion: string,\n  deliveryMethod: string,\n  address: string,\n  clientSecret: string,\n  apiKey?: string,\n): Promise<SampleWebhook> {\n  const variables = {\n    topic,\n    api_version: apiVersion,\n    address,\n    delivery_method: deliveryMethod,\n    shared_secret: clientSecret,\n    api_key: apiKey,\n  }\n\n  const {sendSampleWebhook: result}: SamplePayloadSchema = await partnersRequest(\n    sendSampleWebhookMutation,\n    token,\n    variables,\n  )\n\n  return result\n}\n"]}