{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../../../src/cli/services/extensions/bundle.ts"],"names":[],"mappings":"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","sourcesContent":["import {buildThemeExtensions, ThemeExtensionBuildOptions} from '../build/extension.js'\nimport {context as esContext, BuildResult, formatMessagesSync} from 'esbuild'\nimport {AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {copyFile, glob} from '@shopify/cli-kit/node/fs'\nimport {joinPath, relativePath} from '@shopify/cli-kit/node/path'\nimport {useThemebundling} from '@shopify/cli-kit/node/context/local'\nimport {Writable} from 'stream'\nimport {createRequire} from 'module'\nimport type {StdinOptions, build as esBuild} from 'esbuild'\n\nconst require = createRequire(import.meta.url)\n\nexport interface BundleOptions {\n  minify: boolean\n  env: {[variable: string]: string}\n  outputBundlePath: string\n  stdin: StdinOptions\n  stdout: Writable\n  stderr: Writable\n\n  /**\n   * When provided, the bundling process keeps running and notifying about changes.\n   * When ESBuild detects changes in any of the modules of the graph it re-bundles it\n   * and calls this watch function.\n   */\n  watch?: (result: BuildResult | null) => Promise<void>\n\n  /**\n   * This signal allows the caller to stop the watching process.\n   */\n  watchSignal?: AbortSignal\n\n  /**\n   * Context:\n   * When the bundling extension lived in the Go binary, we tied the environment\n   * to the workflow being executed (i.e. development when running dev and production\n   * when running build) and expoed it through environment variables globally defined\n   * by ESBuild. This is a pattern we want to move away from because commands and\n   * environments are two different things. However, to do so we need to come up\n   * with a migration plan.\n   */\n  environment: 'development' | 'production'\n}\n\n/**\n * Invokes ESBuild with the given options to bundle an extension.\n * @param options - ESBuild options\n */\nexport async function bundleExtension(options: BundleOptions) {\n  const esbuildOptions = getESBuildOptions(options)\n  const context = await esContext(esbuildOptions)\n  if (options.watch) {\n    await context.watch()\n  } else {\n    const result = await context.rebuild()\n    onResult(result, options)\n    await context.dispose()\n  }\n\n  if (options.watchSignal) {\n    options.watchSignal.addEventListener('abort', async () => {\n      await context.dispose()\n    })\n  }\n}\n\nexport async function bundleThemeExtensions(options: ThemeExtensionBuildOptions): Promise<void> {\n  if (options.extensions.length === 0) return\n\n  await buildThemeExtensions(options)\n\n  if (useThemebundling()) {\n    await Promise.all(\n      options.extensions.map(async (extension) => {\n        options.stdout.write(`Bundling theme extension ${extension.localIdentifier}...`)\n        const files = await glob(joinPath(extension.directory, '/**/*'))\n\n        await Promise.all(\n          files.map(function (filepath) {\n            if (!(filepath.includes('.gitkeep') || filepath.includes('.toml'))) {\n              const relativePathName = relativePath(extension.directory, filepath)\n              const outputFile = joinPath(extension.outputBundlePath, relativePathName)\n              return copyFile(filepath, outputFile)\n            }\n          }),\n        )\n      }),\n    )\n  }\n}\n\nfunction onResult(result: Awaited<ReturnType<typeof esBuild>> | null, options: BundleOptions) {\n  const warnings = result?.warnings ?? []\n  const errors = result?.errors ?? []\n  if (warnings.length > 0) {\n    const formattedWarnings = formatMessagesSync(warnings, {kind: 'warning'})\n    formattedWarnings.forEach((warning) => {\n      options.stdout.write(warning)\n    })\n  }\n  if (errors.length > 0) {\n    const formattedErrors = formatMessagesSync(errors, {kind: 'error'})\n    formattedErrors.forEach((error) => {\n      options.stderr.write(error)\n    })\n  }\n}\n\nfunction getESBuildOptions(options: BundleOptions): Parameters<typeof esContext>[0] {\n  const env: {[variable: string]: string} = options.env\n  const define = Object.keys(env || {}).reduce(\n    (acc, key) => ({\n      ...acc,\n      [`process.env.${key}`]: JSON.stringify(env[key]),\n    }),\n    {'process.env.NODE_ENV': JSON.stringify(options.environment)},\n  )\n  const esbuildOptions: Parameters<typeof esContext>[0] = {\n    outfile: options.outputBundlePath,\n    stdin: options.stdin,\n    bundle: true,\n    define,\n    jsx: 'automatic',\n    loader: {\n      '.esnext': 'ts',\n      '.js': 'jsx',\n    },\n    legalComments: 'none',\n    minify: options.minify,\n    plugins: getPlugins(),\n    target: 'es6',\n    resolveExtensions: ['.tsx', '.ts', '.js', '.json', '.esnext', '.mjs', '.ejs'],\n  }\n  if (options.watch) {\n    const watch = options.watch\n    esbuildOptions.plugins?.push({\n      name: 'rebuild-plugin',\n      setup(build) {\n        build.onEnd(async (result) => {\n          onResult(result, options)\n          await watch(result)\n        })\n      },\n    })\n  }\n  return esbuildOptions\n}\n\ntype ESBuildPlugins = Parameters<typeof esContext>[0]['plugins']\n\n/**\n * It returns the plugins that should be used with ESBuild.\n * @returns List of plugins.\n */\nfunction getPlugins(): ESBuildPlugins {\n  const plugins = []\n\n  if (isGraphqlPackageAvailable()) {\n    const {default: graphqlLoader} = require('@luckycatfactory/esbuild-graphql-loader')\n    plugins.push(graphqlLoader())\n  }\n\n  return plugins\n}\n\n/**\n * Returns true if the \"graphql\" and \"graphql-tag\" packages can be\n * resolved. This information is used to determine whether we should\n * or not include the esbuild-graphql-loader plugin when invoking ESBuild\n * @returns Returns true if the \"graphql\" and \"graphql-tag\" can be resolved.\n */\nfunction isGraphqlPackageAvailable(): boolean {\n  try {\n    // eslint-disable-next-line @babel/no-unused-expressions\n    require.resolve('graphql') && require.resolve('graphql-tag')\n    return true\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch {\n    return false\n  }\n}\n"]}