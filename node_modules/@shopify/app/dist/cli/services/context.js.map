{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/cli/services/context.ts"],"names":[],"mappings":"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","sourcesContent":["import {selectOrCreateApp} from './dev/select-app.js'\nimport {\n  fetchAllDevStores,\n  fetchAppFromApiKey,\n  fetchOrgAndApps,\n  fetchOrganizations,\n  fetchOrgFromId,\n  fetchStoreByDomain,\n  FetchResponse,\n  fetchAppExtensionRegistrations,\n} from './dev/fetch.js'\nimport {convertToTestStoreIfNeeded, selectStore} from './dev/select-store.js'\nimport {ensureDeploymentIdsPresence} from './context/identifiers.js'\nimport {createExtension, ExtensionRegistration} from './dev/create-extension.js'\nimport {CachedAppInfo, clearAppInfo, getAppInfo, setAppInfo} from './local-storage.js'\nimport {reuseDevConfigPrompt, selectOrganizationPrompt} from '../prompts/dev.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {Identifiers, UuidOnlyIdentifiers, updateAppIdentifiers, getAppIdentifiers} from '../models/app/identifiers.js'\nimport {Organization, OrganizationApp, OrganizationStore} from '../models/organization.js'\nimport metadata from '../metadata.js'\nimport {ThemeExtension} from '../models/app/extensions.js'\nimport {loadAppName} from '../models/app/loader.js'\nimport {getPackageManager, PackageManager} from '@shopify/cli-kit/node/node-package-manager'\nimport {tryParseInt} from '@shopify/cli-kit/common/string'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {renderInfo, renderTasks} from '@shopify/cli-kit/node/ui'\nimport {partnersFqdn} from '@shopify/cli-kit/node/context/fqdn'\nimport {AbortError, BugError} from '@shopify/cli-kit/node/error'\nimport {outputContent, outputInfo, outputToken, formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\nimport {usePartnersToken} from '@shopify/cli-kit/node/environment'\n\nexport const InvalidApiKeyErrorMessage = (apiKey: string) => {\n  return {\n    message: outputContent`Invalid API key: ${apiKey}`,\n    tryMessage: outputContent`You can find the API key in the app settings in the Partners Dashboard.`,\n  }\n}\n\nexport interface DevContextOptions {\n  directory: string\n  apiKey?: string\n  storeFqdn?: string\n  reset: boolean\n}\n\ninterface DevContextOutput {\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys'> & {apiSecret?: string}\n  remoteAppUpdated: boolean\n  storeFqdn: string\n  updateURLs: boolean | undefined\n  useCloudflareTunnels: boolean\n}\n\n/**\n * Make sure there is a valid context to execute `generate extension`\n *\n * We just need a valid app API key to access the Specifications API.\n * - If the API key is provided via flag, we use it.\n * - Else, if there is cached API key for the current directory, we use it.\n * - Else, we prompt the user to select/create an app.\n *\n * The selection is then cached as the \"dev\" app for the current directory.\n */\nexport async function ensureGenerateContext(options: {\n  apiKey?: string\n  directory: string\n  reset: boolean\n  token: string\n}): Promise<string> {\n  if (options.apiKey) {\n    const app = await fetchAppFromApiKey(options.apiKey, options.token)\n    if (!app) {\n      const errorMessage = InvalidApiKeyErrorMessage(options.apiKey)\n      throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n    }\n    return app.apiKey\n  }\n  const cachedInfo = getAppDevCachedInfo({reset: options.reset, directory: options.directory})\n\n  if (cachedInfo === undefined && !options.reset) {\n    const explanation =\n      `\\nLooks like this is the first time you're running 'generate extension' for this project.\\n` +\n      'Configure your preferences by answering a few questions.\\n'\n    outputInfo(explanation)\n  }\n\n  if (cachedInfo?.appId && cachedInfo?.orgId) {\n    const org = await fetchOrgFromId(cachedInfo.orgId, options.token)\n    const app = await fetchAppFromApiKey(cachedInfo.appId, options.token)\n    if (!app || !org) {\n      const errorMessage = InvalidApiKeyErrorMessage(cachedInfo.appId)\n      throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n    }\n    const packageManager = await getPackageManager(options.directory)\n    showGenerateReusedValues(org.businessName, cachedInfo, packageManager)\n    return app.apiKey\n  } else {\n    const orgId = cachedInfo?.orgId || (await selectOrg(options.token))\n    const {organization, apps} = await fetchOrgAndApps(orgId, options.token)\n    const localAppName = await loadAppName(options.directory)\n    const selectedApp = await selectOrCreateApp(localAppName, apps, organization, options.token)\n    setAppInfo({\n      appId: selectedApp.apiKey,\n      title: selectedApp.title,\n      directory: options.directory,\n      orgId,\n    })\n    return selectedApp.apiKey\n  }\n}\n\n/**\n * Make sure there is a valid context to execute `dev`\n * That means we have a valid organization, app and dev store selected.\n *\n * If there are app/store from flags, we check if they are valid. If they are not, throw an error.\n * If there is cached info (user ran `dev` previously), check if it is still valid and return it.\n * If there is no cached info (or is invalid):\n *  - Show prompts to select an org, app and dev store\n *  - The new selection will be saved as global configuration\n *  - The `shopify.app.toml` file will be updated with the new app apiKey\n *\n * @param options - Current dev context options\n * @returns The selected org, app and dev store\n */\nexport async function ensureDevContext(options: DevContextOptions, token: string): Promise<DevContextOutput> {\n  const cachedInfo = getAppDevCachedInfo({\n    reset: options.reset,\n    directory: options.directory,\n  })\n\n  if (cachedInfo === undefined && !options.reset) {\n    const explanation =\n      `\\nLooks like this is the first time you're running dev for this project.\\n` +\n      'Configure your preferences by answering a few questions.\\n'\n    outputInfo(explanation)\n  }\n\n  const orgId = cachedInfo?.orgId || (await selectOrg(token))\n\n  let {app: selectedApp, store: selectedStore} = await fetchDevDataFromOptions(options, orgId, token)\n  const organization = await fetchOrgFromId(orgId, token)\n  const useCloudflareTunnels = organization.betas.cliTunnelAlternative !== true\n\n  if (selectedApp && selectedStore) {\n    setAppInfo({\n      appId: selectedApp.apiKey,\n      directory: options.directory,\n      storeFqdn: selectedStore.shopDomain,\n      orgId,\n    })\n\n    return buildOutput(selectedApp, selectedStore, useCloudflareTunnels, cachedInfo)\n  }\n\n  const [_selectedApp, _selectedStore] = await Promise.all([\n    selectedApp ? selectedApp : appFromId(cachedInfo?.appId, token),\n    selectedStore ? selectedStore : storeFromFqdn(cachedInfo?.storeFqdn, orgId, token),\n  ])\n\n  if (_selectedApp) {\n    selectedApp = _selectedApp\n  } else {\n    const {apps} = await fetchOrgAndApps(orgId, token)\n    const localAppName = await loadAppName(options.directory)\n    selectedApp = await selectOrCreateApp(localAppName, apps, organization, token)\n  }\n\n  if (_selectedStore) {\n    selectedStore = _selectedStore\n  } else {\n    const allStores = await fetchAllDevStores(orgId, token)\n    selectedStore = await selectStore(allStores, organization, token)\n  }\n\n  setAppInfo({\n    appId: selectedApp.apiKey,\n    title: selectedApp.title,\n    directory: options.directory,\n    storeFqdn: selectedStore?.shopDomain,\n    orgId,\n  })\n\n  if (selectedApp.apiKey === cachedInfo?.appId && selectedStore.shopDomain === cachedInfo.storeFqdn) {\n    const packageManager = await getPackageManager(options.directory)\n    showReusedValues(organization.businessName, cachedInfo, packageManager)\n  }\n\n  const result = buildOutput(selectedApp, selectedStore, useCloudflareTunnels, cachedInfo)\n  await logMetadataForLoadedDevContext(result)\n  return result\n}\n\nconst resetHelpMessage = 'You can pass `--reset` to your command to reset your config.'\n\nconst appFromId = async (appId: string | undefined, token: string): Promise<OrganizationApp | undefined> => {\n  if (!appId) return\n  const app = await fetchAppFromApiKey(appId, token)\n  if (!app) throw new BugError(`Couldn't find the app with API key \"${appId}\". ${resetHelpMessage}`)\n  return app\n}\n\nconst storeFromFqdn = async (\n  storeFqdn: string | undefined,\n  orgId: string,\n  token: string,\n): Promise<OrganizationStore | undefined> => {\n  if (!storeFqdn) return\n  const result = await fetchStoreByDomain(orgId, token, storeFqdn)\n  if (result?.store) {\n    await convertToTestStoreIfNeeded(result.store, orgId, token)\n    return result.store\n  } else {\n    throw new BugError(`Couldn't find the store with domain \"${storeFqdn}\". ${resetHelpMessage}`)\n  }\n}\n\nfunction buildOutput(\n  app: OrganizationApp,\n  store: OrganizationStore,\n  useCloudflareTunnels: boolean,\n  cachedInfo?: CachedAppInfo,\n): DevContextOutput {\n  return {\n    remoteApp: {\n      ...app,\n      apiSecret: app.apiSecretKeys.length === 0 ? undefined : app.apiSecretKeys[0]!.secret,\n    },\n    remoteAppUpdated: app.apiKey !== cachedInfo?.appId,\n    storeFqdn: store.shopDomain,\n    updateURLs: cachedInfo?.updateURLs,\n    useCloudflareTunnels,\n  }\n}\n\nexport interface DeployContextOptions {\n  app: AppInterface\n  apiKey?: string\n  reset: boolean\n  force: boolean\n}\n\ninterface DeployContextOutput {\n  app: AppInterface\n  token: string\n  partnersApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>\n  identifiers: Identifiers\n  organization: Organization | undefined\n}\n\n/**\n * If there is a cached ApiKey used for dev, retrieve that and ask the user if they want to reuse it\n * @param app - The local app object\n * @param token - The token to use to access the Partners API\n * @returns\n * OrganizationApp if a cached value is valid.\n * undefined if there is no cached value or the user doesn't want to use it.\n */\nexport async function fetchDevAppAndPrompt(app: AppInterface, token: string): Promise<OrganizationApp | undefined> {\n  const devAppId = getAppInfo(app.directory)?.appId\n  if (!devAppId) return undefined\n\n  const partnersResponse = await fetchAppFromApiKey(devAppId, token)\n  if (!partnersResponse) return undefined\n\n  const org = await fetchOrgFromId(partnersResponse.organizationId, token)\n\n  showDevValues(org.businessName ?? 'unknown', partnersResponse.title)\n  const reuse = await reuseDevConfigPrompt()\n  return reuse ? partnersResponse : undefined\n}\n\nexport async function ensureThemeExtensionDevContext(\n  extension: ThemeExtension,\n  apiKey: string,\n  token: string,\n): Promise<ExtensionRegistration> {\n  const remoteSpecifications = await fetchAppExtensionRegistrations({token, apiKey})\n  const remoteRegistrations = remoteSpecifications.app.extensionRegistrations.filter((extension) => {\n    return extension.type === 'THEME_APP_EXTENSION'\n  })\n\n  if (remoteRegistrations.length > 0) {\n    return remoteRegistrations[0]!\n  }\n\n  const registration = await createExtension(apiKey, extension.graphQLType, extension.localIdentifier, token)\n\n  return registration\n}\n\nexport async function ensureDeployContext(options: DeployContextOptions): Promise<DeployContextOutput> {\n  const token = await ensureAuthenticatedPartners()\n  const [partnersApp, envIdentifiers, organization] = await fetchAppAndIdentifiers(options, token)\n\n  let identifiers: Identifiers = envIdentifiers as Identifiers\n\n  identifiers = await ensureDeploymentIdsPresence({\n    app: options.app,\n    appId: partnersApp.apiKey,\n    appName: partnersApp.title,\n    force: options.force,\n    token,\n    envIdentifiers,\n  })\n\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ...options,\n    app: await updateAppIdentifiers({app: options.app, identifiers, command: 'deploy'}),\n  }\n  const result = {\n    app: options.app,\n    partnersApp: {\n      id: partnersApp.id,\n      title: partnersApp.title,\n      appType: partnersApp.appType,\n      organizationId: partnersApp.organizationId,\n      grantedScopes: partnersApp.grantedScopes,\n    },\n    identifiers,\n    token,\n    organization,\n  }\n\n  await logMetadataForLoadedDeployContext(result)\n  return result\n}\n\nexport async function fetchOrganizationAndFetchOrCreateApp(\n  app: AppInterface,\n  token: string,\n): Promise<{partnersApp: OrganizationApp; organization: Organization}> {\n  const orgId = await selectOrg(token)\n  const {organization, apps} = await fetchOrgsAppsAndStores(orgId, token)\n  const partnersApp = await selectOrCreateApp(app.name, apps, organization, token)\n  return {organization, partnersApp}\n}\n\nexport async function fetchAppAndIdentifiers(\n  options: {\n    app: AppInterface\n    reset: boolean\n    packageManager?: PackageManager\n    apiKey?: string\n  },\n  token: string,\n): Promise<[OrganizationApp, Partial<UuidOnlyIdentifiers>, Organization | undefined]> {\n  let envIdentifiers = getAppIdentifiers({app: options.app})\n  let partnersApp: OrganizationApp | undefined\n  let organization: Organization | undefined\n\n  if (options.reset) {\n    envIdentifiers = {app: undefined, extensions: {}}\n  } else if (envIdentifiers.app) {\n    const apiKey = options.apiKey ?? envIdentifiers.app\n    partnersApp = await fetchAppFromApiKey(apiKey, token)\n    if (!partnersApp) {\n      throw new AbortError(\n        outputContent`Couldn't find the app with API key ${apiKey}`,\n        outputContent`• If you didn't intend to select this app, run ${\n          outputContent`${outputToken.packagejsonScript(options.app.packageManager, 'deploy', '--reset')}`.value\n        }`,\n      )\n    }\n  } else {\n    partnersApp = await fetchDevAppAndPrompt(options.app, token)\n  }\n\n  if (!partnersApp) {\n    const result = await fetchOrganizationAndFetchOrCreateApp(options.app, token)\n    partnersApp = result.partnersApp\n    organization = result.organization\n  }\n\n  // if the command is run using a partnersToken then it is not possible to fetch the organization information because\n  // that token has not enough permissions and the command break at this point with a not found organizations error.\n  if (!usePartnersToken() && !organization) {\n    organization = await fetchOrgFromId(partnersApp.organizationId, token)\n  }\n\n  return [partnersApp, envIdentifiers, organization]\n}\n\nasync function fetchOrgsAppsAndStores(orgId: string, token: string): Promise<FetchResponse> {\n  let data = {} as FetchResponse\n  const tasks = [\n    {\n      title: 'Fetching organization data',\n      task: async () => {\n        const organizationAndApps = await fetchOrgAndApps(orgId, token)\n        const stores = await fetchAllDevStores(orgId, token)\n        data = {...organizationAndApps, stores} as FetchResponse\n        // We need ALL stores so we can validate the selected one.\n        // This is a temporary workaround until we have an endpoint to fetch only 1 store to validate.\n      },\n    },\n  ]\n  await renderTasks(tasks)\n  return data\n}\n\n/**\n * Any data sent via input flags takes precedence and needs to be validated.\n * If any of the inputs is invalid, we must throw an error and stop the execution.\n */\nasync function fetchDevDataFromOptions(\n  options: DevContextOptions,\n  orgId: string,\n  token: string,\n): Promise<{app?: OrganizationApp; store?: OrganizationStore}> {\n  const [selectedApp, orgWithStore] = await Promise.all([\n    (async () => {\n      let selectedApp: OrganizationApp | undefined\n      if (options.apiKey) {\n        selectedApp = await fetchAppFromApiKey(options.apiKey, token)\n        if (!selectedApp) {\n          const errorMessage = InvalidApiKeyErrorMessage(options.apiKey)\n          throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n        }\n        return selectedApp\n      }\n    })(),\n    (async () => {\n      if (options.storeFqdn) {\n        const orgWithStore = await fetchStoreByDomain(orgId, token, options.storeFqdn)\n        if (!orgWithStore) throw new BugError(`Could not find Organization for id ${orgId}.`)\n        if (!orgWithStore.store) {\n          const partners = await partnersFqdn()\n          const org = orgWithStore.organization\n          throw new BugError(\n            `Could not find ${options.storeFqdn} in the Organization ${org.businessName} as a valid store.`,\n            `Visit https://${partners}/${org.id}/stores to create a new development or Shopify Plus sandbox store in your organization`,\n          )\n        }\n        return orgWithStore as {store: OrganizationStore; organization: Organization}\n      }\n    })(),\n  ])\n  let selectedStore: OrganizationStore | undefined\n\n  if (options.storeFqdn) {\n    selectedStore = orgWithStore!.store\n    await convertToTestStoreIfNeeded(selectedStore, orgWithStore!.organization.id, token)\n  }\n\n  return {app: selectedApp, store: selectedStore}\n}\n\n/**\n * Retrieve cached info from the global configuration based on the current local app\n * @param reset - Whether to reset the cache or not\n * @param directory - The directory containing the app.\n */\nfunction getAppDevCachedInfo({reset, directory}: {reset: boolean; directory: string}): CachedAppInfo | undefined {\n  if (reset) clearAppInfo(directory)\n  return getAppInfo(directory)\n}\n\n/**\n * Fetch all orgs the user belongs to and show a prompt to select one of them\n * @param token - Token to access partners API\n * @returns The selected organization ID\n */\nasync function selectOrg(token: string): Promise<string> {\n  const orgs = await fetchOrganizations(token)\n  const org = await selectOrganizationPrompt(orgs)\n  return org.id\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org - Organization name\n * @param app - App name\n * @param store - Store domain\n */\nfunction showReusedValues(org: string, cachedAppInfo: CachedAppInfo, packageManager: PackageManager): void {\n  let updateURLs = 'Not yet configured'\n  if (cachedAppInfo.updateURLs !== undefined) updateURLs = cachedAppInfo.updateURLs ? 'Always' : 'Never'\n\n  const items = [\n    `Org:          ${org}`,\n    `App:          ${cachedAppInfo.title}`,\n    `Dev store:    ${cachedAppInfo.storeFqdn}`,\n    `Update URLs:  ${updateURLs}`,\n  ]\n\n  if (cachedAppInfo.tunnelPlugin) items.push(`Tunnel:       ${cachedAppInfo.tunnelPlugin}`)\n\n  renderInfo({\n    headline: 'Using your previous dev settings:',\n    body: [\n      {\n        list: {\n          items,\n        },\n      },\n      '\\nTo reset your default dev config, run',\n      {command: formatPackageManagerCommand(packageManager, 'dev', '--reset')},\n    ],\n  })\n}\n\nfunction showGenerateReusedValues(org: string, cachedAppInfo: CachedAppInfo, packageManager: PackageManager) {\n  renderInfo({\n    headline: 'Using your previous dev settings:',\n    body: [\n      {\n        list: {\n          items: [`Org:          ${org}`, `App:          ${cachedAppInfo.title}`],\n        },\n      },\n      '\\nTo reset your default dev config, run',\n      {command: formatPackageManagerCommand(packageManager, 'dev', '--reset')},\n    ],\n  })\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org - Organization name\n * @param app - App name\n * @param store - Store domain\n */\nfunction showDevValues(org: string, appName: string) {\n  renderInfo({\n    headline: 'Your configs for dev were:',\n    body: {\n      list: {\n        items: [`Org:        ${org}`, `App:        ${appName}`],\n      },\n    },\n  })\n}\n\nasync function logMetadataForLoadedDevContext(env: DevContextOutput) {\n  await metadata.addPublicMetadata(() => ({\n    partner_id: tryParseInt(env.remoteApp.organizationId),\n    api_key: env.remoteApp.apiKey,\n  }))\n}\n\nasync function logMetadataForLoadedDeployContext(env: DeployContextOutput) {\n  await metadata.addPublicMetadata(() => ({\n    partner_id: tryParseInt(env.partnersApp.organizationId),\n    api_key: env.identifiers.app,\n  }))\n}\n"]}