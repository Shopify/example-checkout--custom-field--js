{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {blocks, versions} from '../../constants.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {FunctionSpec} from '../../models/extensions/functions.js'\nimport {GenericSpecification} from '../../models/app/extensions.js'\nimport {UIExtensionSpec} from '../../models/extensions/ui.js'\nimport {ThemeExtensionSpec} from '../../models/extensions/theme.js'\nimport {buildGraphqlTypes} from '../function/build.js'\nimport {ensureFunctionExtensionFlavorExists} from '../function/common.js'\nimport {\n  addNPMDependenciesIfNeeded,\n  addResolutionOrOverride,\n  DependencyVersion,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport {hyphenate} from '@shopify/cli-kit/common/string'\nimport {recursiveLiquidTemplateCopy} from '@shopify/cli-kit/node/liquid'\nimport {renderTasks} from '@shopify/cli-kit/node/ui'\nimport {downloadGitRepository} from '@shopify/cli-kit/node/git'\nimport {fileExists, inTemporaryDirectory, mkdir, moveFile, removeFile, glob, findPathUp} from '@shopify/cli-kit/node/fs'\nimport {joinPath, dirname, moduleDirectory, relativizePath} from '@shopify/cli-kit/node/path'\nimport {AbortError, BugError} from '@shopify/cli-kit/node/error'\nimport {fileURLToPath} from 'url'\n\nasync function getTemplatePath(name: string): Promise<string> {\n  const templatePath = await findPathUp(`templates/${name}`, {\n    cwd: dirname(fileURLToPath(import.meta.url)),\n    type: 'directory',\n  })\n  if (templatePath) {\n    return templatePath\n  } else {\n    throw new BugError(`Couldn't find the template ${name} in @shopify/app.`)\n  }\n}\n\nexport interface ExtensionInitOptions<TSpec extends GenericSpecification = GenericSpecification> {\n  name: string\n  app: AppInterface\n  cloneUrl?: string\n  extensionFlavor?: ExtensionFlavorValue\n  specification: TSpec\n  extensionType: string\n}\n\ninterface ExtensionDirectory {\n  extensionDirectory: string\n}\n\ninterface FunctionFlavor {\n  extensionFlavor: ExtensionFlavorValue\n}\n\nexport type ExtensionFlavorValue = 'vanilla-js' | 'react' | 'typescript' | 'typescript-react' | 'rust' | 'wasm'\n\ntype FunctionExtensionInitOptions = ExtensionInitOptions<FunctionSpec> & ExtensionDirectory & FunctionFlavor\ntype UIExtensionInitOptions = ExtensionInitOptions<UIExtensionSpec> & ExtensionDirectory\ntype ThemeExtensionInitOptions = ExtensionInitOptions<ThemeExtensionSpec> & ExtensionDirectory\n\nexport type TemplateLanguage = 'javascript' | 'rust' | 'wasm'\nfunction getTemplateLanguage(flavor: ExtensionFlavorValue): TemplateLanguage {\n  switch (flavor) {\n    case 'vanilla-js':\n    case 'react':\n    case 'typescript':\n    case 'typescript-react':\n      return 'javascript'\n    case 'rust':\n    case 'wasm':\n      return flavor\n  }\n}\n\nexport interface GeneratedExtension {\n  directory: string\n  specification: GenericSpecification\n}\n\nexport async function generateExtension(extensionOptions: ExtensionInitOptions[]): Promise<GeneratedExtension[]> {\n  return Promise.all(\n    extensionOptions.flatMap(async (options) => {\n      const extensionDirectory = await ensureExtensionDirectoryExists({app: options.app, name: options.name})\n      switch (options.specification.category()) {\n        case 'theme':\n          await themeExtensionInit({...(options as ThemeExtensionInitOptions), extensionDirectory})\n          break\n        case 'function':\n          await functionExtensionInit({...(options as FunctionExtensionInitOptions), extensionDirectory})\n          break\n        case 'ui':\n          await uiExtensionInit({...(options as UIExtensionInitOptions), extensionDirectory})\n          break\n      }\n      return {directory: relativizePath(extensionDirectory), specification: options.specification}\n    }),\n  )\n}\n\nasync function themeExtensionInit({name, app, specification, extensionDirectory}: ThemeExtensionInitOptions) {\n  const templatePath = await getTemplatePath('theme-extension')\n  await recursiveLiquidTemplateCopy(templatePath, extensionDirectory, {name, type: specification.identifier})\n}\n\nasync function uiExtensionInit({\n  name,\n  specification,\n  app,\n  extensionFlavor,\n  extensionDirectory,\n}: UIExtensionInitOptions) {\n  const tasks = [\n    {\n      title: 'Installing dependencies',\n      task: async () => {\n        await addResolutionOrOverrideIfNeeded(app.directory, extensionFlavor)\n        const requiredDependencies = getExtensionRuntimeDependencies({specification, extensionFlavor})\n        await addNPMDependenciesIfNeeded(requiredDependencies, {\n          packageManager: app.packageManager,\n          type: 'prod',\n          directory: app.directory,\n          // This is a temporary workaround for POS extensions. By deafult all dependencies have the `^` prefix.\n          // We need an exact dependency version for the 1.0.1 release.\n          exact: specification.identifier === 'pos_ui_extension',\n        })\n      },\n    },\n    {\n      title: `Generating ${specification.externalName} extension`,\n      task: async () => {\n        const templateDirectory =\n          specification.templatePath ??\n          (await findPathUp(`templates/ui-extensions/projects/${specification.identifier}`, {\n            type: 'directory',\n            cwd: moduleDirectory(import.meta.url),\n          }))\n\n        if (!templateDirectory) {\n          throw new BugError(`Couldn't find the template for '${specification.externalName}'`)\n        }\n\n        const srcFileExtension = getSrcFileExtension(extensionFlavor ?? 'vanilla-js')\n        await recursiveLiquidTemplateCopy(templateDirectory, extensionDirectory, {\n          srcFileExtension,\n          flavor: extensionFlavor ?? '',\n          type: specification.identifier,\n          name,\n        })\n\n        if (extensionFlavor) {\n          await changeIndexFileExtension(extensionDirectory, srcFileExtension)\n          await removeUnwantedTemplateFilesPerFlavor(extensionDirectory, extensionFlavor)\n        }\n      },\n    },\n  ]\n  await renderTasks(tasks)\n}\n\ntype SrcFileExtension = 'ts' | 'tsx' | 'js' | 'jsx' | 'rs' | 'wasm'\nfunction getSrcFileExtension(extensionFlavor: ExtensionFlavorValue): SrcFileExtension {\n  const flavorToSrcFileExtension: {[key in ExtensionFlavorValue]: SrcFileExtension} = {\n    'vanilla-js': 'js',\n    react: 'jsx',\n    typescript: 'ts',\n    'typescript-react': 'tsx',\n    rust: 'rs',\n    wasm: 'wasm',\n  }\n\n  return flavorToSrcFileExtension[extensionFlavor] ?? 'js'\n}\n\nexport function getExtensionRuntimeDependencies({\n  specification,\n  extensionFlavor,\n}: Pick<UIExtensionInitOptions, 'specification' | 'extensionFlavor'>): DependencyVersion[] {\n  const dependencies: DependencyVersion[] = []\n  if (extensionFlavor?.includes('react')) {\n    dependencies.push({name: 'react', version: versions.react})\n  }\n  const rendererDependency = specification.dependency\n  if (rendererDependency) {\n    dependencies.push(rendererDependency)\n  }\n  return dependencies\n}\n\nexport function getFunctionRuntimeDependencies(templateLanguage: string): DependencyVersion[] {\n  const dependencies: DependencyVersion[] = []\n  if (templateLanguage === 'javascript') {\n    dependencies.push({name: '@shopify/shopify_function', version: '0.0.3'}, {name: 'javy', version: '0.1.0'})\n  }\n  return dependencies\n}\n\nasync function changeIndexFileExtension(extensionDirectory: string, fileExtension: SrcFileExtension) {\n  const srcFilePaths = await glob(joinPath(extensionDirectory, 'src', '*'))\n  const srcFileExensionsToChange = []\n\n  for (const srcFilePath of srcFilePaths) {\n    srcFileExensionsToChange.push(moveFile(srcFilePath, `${srcFilePath}.${fileExtension}`))\n  }\n\n  await Promise.all(srcFileExensionsToChange)\n}\n\nasync function removeUnwantedTemplateFilesPerFlavor(extensionDirectory: string, extensionFlavor: ExtensionFlavorValue) {\n  // tsconfig.json file is only needed in extension folder to inform the IDE\n  // About the `react-jsx` tsconfig option, so IDE don't complain about missing react import\n  if (extensionFlavor !== 'typescript-react') {\n    await removeFile(joinPath(extensionDirectory, 'tsconfig.json'))\n  }\n}\n\nasync function functionExtensionInit(options: FunctionExtensionInitOptions) {\n  const url = options.cloneUrl || options.specification.templateURL\n  const specification = options.specification\n\n  await inTemporaryDirectory(async (tmpDir) => {\n    const templateDownloadDir = joinPath(tmpDir, 'download')\n    const extensionFlavor = options.extensionFlavor\n    const templateLanguage = getTemplateLanguage(extensionFlavor)\n    const taskList = []\n\n    if (templateLanguage === 'javascript') {\n      taskList.push({\n        title: 'Installing additional dependencies',\n        task: async () => {\n          const requiredDependencies = getFunctionRuntimeDependencies(templateLanguage)\n          await addNPMDependenciesIfNeeded(requiredDependencies, {\n            packageManager: options.app.packageManager,\n            type: 'prod',\n            directory: options.app.directory,\n          })\n        },\n      })\n    }\n\n    taskList.push({\n      title: `Generating ${specification.externalName} extension`,\n      task: async () => {\n        await mkdir(templateDownloadDir)\n        await downloadGitRepository({\n          repoUrl: url,\n          destination: templateDownloadDir,\n          shallow: true,\n        })\n        const origin = await ensureFunctionExtensionFlavorExists(specification, extensionFlavor, templateDownloadDir)\n\n        await recursiveLiquidTemplateCopy(origin, options.extensionDirectory, {\n          flavor: extensionFlavor,\n          ...options,\n        })\n\n        if (templateLanguage === 'javascript') {\n          const srcFileExtension = getSrcFileExtension(extensionFlavor)\n          await changeIndexFileExtension(options.extensionDirectory, srcFileExtension)\n        }\n\n        const configYamlPath = joinPath(options.extensionDirectory, 'script.config.yml')\n        if (await fileExists(configYamlPath)) {\n          await removeFile(configYamlPath)\n        }\n      },\n    })\n\n    if (templateLanguage === 'javascript') {\n      taskList.push({\n        title: `Building ${specification.externalName} graphql types`,\n        task: async () => {\n          await buildGraphqlTypes(\n            {directory: options.extensionDirectory, isJavaScript: true},\n            {stdout: process.stdout, stderr: process.stderr},\n          )\n        },\n      })\n    }\n\n    await renderTasks(taskList)\n  })\n}\n\nasync function ensureExtensionDirectoryExists({name, app}: {name: string; app: AppInterface}): Promise<string> {\n  const hyphenizedName = hyphenate(name)\n  const extensionDirectory = joinPath(app.directory, blocks.extensions.directoryName, hyphenizedName)\n  if (await fileExists(extensionDirectory)) {\n    throw new AbortError(\n      `\\nA directory with this name (${hyphenizedName}) already exists.\\nChoose a new name for your extension.`,\n    )\n  }\n  await mkdir(extensionDirectory)\n  return extensionDirectory\n}\n\nasync function addResolutionOrOverrideIfNeeded(directory: string, extensionFlavor?: ExtensionFlavorValue) {\n  if (extensionFlavor === 'typescript-react') {\n    await addResolutionOrOverride(directory, {'@types/react': versions.reactTypes})\n  }\n}\n"]}