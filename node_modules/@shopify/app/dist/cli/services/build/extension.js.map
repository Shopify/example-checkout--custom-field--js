{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/build/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppInterface} from '../../models/app/app.js'\nimport {UIExtension, FunctionExtension, ThemeExtension} from '../../models/app/extensions.js'\nimport {bundleExtension} from '../extensions/bundle.js'\nimport {buildJSFunction} from '../function/build.js'\nimport {execThemeCheckCLI} from '@shopify/cli-kit/node/ruby'\nimport {exec} from '@shopify/cli-kit/node/system'\nimport {AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {AbortSilentError} from '@shopify/cli-kit/node/error'\nimport {OutputProcess} from '@shopify/cli-kit/node/output'\nimport {Writable} from 'stream'\n\nexport interface ExtensionBuildOptions {\n  /**\n   * Standard output stream to send the output through.\n   */\n  stdout: Writable\n  /**\n   * Standard error stream to send the error output through.\n   */\n  stderr: Writable\n\n  /**\n   * Signal to abort the build process.\n   */\n  signal?: AbortSignal\n\n  /**\n   * Overrides the default build directory.\n   */\n  buildDirectory?: string\n\n  /**\n   * Use tasks to build the extension.\n   */\n  useTasks?: boolean\n\n  /**\n   * The app that contains the extensions.\n   */\n  app: AppInterface\n}\n\nexport interface ThemeExtensionBuildOptions extends ExtensionBuildOptions {\n  /**\n   * The UI extensions to be built.\n   */\n  extensions: ThemeExtension[]\n}\n\n/**\n * It builds the theme extensions.\n * @param options - Build options.\n */\nexport async function buildThemeExtensions(options: ThemeExtensionBuildOptions): Promise<void> {\n  if (options.extensions.length === 0) return\n  options.stdout.write(`Running theme check on your Theme app extension...`)\n  const themeDirectories = options.extensions.map((extension) => extension.directory)\n  await execThemeCheckCLI({\n    directories: themeDirectories,\n    args: ['-C', ':theme_app_extension'],\n    stdout: options.stdout,\n    stderr: options.stderr,\n  })\n}\n\ninterface BuildUIExtensionsOptions {\n  app: AppInterface\n}\n\nexport async function buildUIExtensions(options: BuildUIExtensionsOptions): Promise<OutputProcess[]> {\n  if (options.app.extensions.ui.length === 0) {\n    return []\n  }\n\n  return options.app.extensions.ui.map((uiExtension) => {\n    return {\n      prefix: uiExtension.localIdentifier,\n      action: async (stdout: Writable, stderr: Writable, signal: AbortSignal) => {\n        await buildUIExtension(uiExtension, {stdout, stderr, signal, app: options.app})\n      },\n    }\n  })\n}\n\n/**\n * It builds the UI extensions.\n * @param options - Build options.\n */\nexport async function buildUIExtension(extension: UIExtension, options: ExtensionBuildOptions): Promise<void> {\n  options.stdout.write(`Bundling UI extension ${extension.localIdentifier}...`)\n\n  await bundleExtension({\n    minify: true,\n    outputBundlePath: extension.outputBundlePath,\n    stdin: {\n      contents: extension.getBundleExtensionStdinContent(),\n      resolveDir: extension.directory,\n      loader: 'tsx',\n    },\n    environment: 'production',\n    env: options.app.dotenv?.variables ?? {},\n    stderr: options.stderr,\n    stdout: options.stdout,\n  })\n\n  options.stdout.write(`${extension.localIdentifier} successfully built`)\n}\n\nexport interface BuildFunctionExtensionOptions extends ExtensionBuildOptions {}\n\n/**\n * Builds a function extension\n * @param extension - The function extension to build.\n * @param options - Options to configure the build of the extension.\n */\nexport async function buildFunctionExtension(\n  extension: FunctionExtension,\n  options: BuildFunctionExtensionOptions,\n): Promise<void> {\n  if (extension.isJavaScript) {\n    return runCommandOrBuildJSFunction(extension, options)\n  } else {\n    return buildOtherFunction(extension, options)\n  }\n}\n\nasync function runCommandOrBuildJSFunction(extension: FunctionExtension, options: BuildFunctionExtensionOptions) {\n  if (extension.buildCommand) {\n    return runCommand(extension.buildCommand, extension, options)\n  } else {\n    return buildJSFunction(extension, options)\n  }\n}\n\nasync function buildOtherFunction(extension: FunctionExtension, options: BuildFunctionExtensionOptions) {\n  if (!extension.buildCommand) {\n    options.stderr.write(\n      `The function extension ${extension.localIdentifier} doesn't have a build command or it's empty`,\n    )\n    options.stderr.write(`\n    Edit the shopify.function.extension.toml configuration file and set how to build the extension.\n\n    [build]\n    command = \"{COMMAND}\"\n\n    Note that the command must output a dist/index.wasm file.\n    `)\n    throw new AbortSilentError()\n  }\n  return runCommand(extension.buildCommand, extension, options)\n}\n\nasync function runCommand(buildCommand: string, extension: FunctionExtension, options: BuildFunctionExtensionOptions) {\n  const buildCommandComponents = buildCommand.split(' ')\n  options.stdout.write(`Building function ${extension.localIdentifier}...`)\n  await exec(buildCommandComponents[0]!, buildCommandComponents.slice(1), {\n    stdout: options.stdout,\n    stderr: options.stderr,\n    cwd: extension.directory,\n    signal: options.signal,\n  })\n}\n"]}