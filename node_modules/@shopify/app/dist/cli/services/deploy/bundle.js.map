{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/bundle.ts"],"names":[],"mappings":"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","sourcesContent":["import {buildFunctionExtension, buildUIExtensions} from '../build/extension.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {Identifiers} from '../../models/app/identifiers.js'\nimport {bundleThemeExtensions} from '../extensions/bundle.js'\nimport {zip} from '@shopify/cli-kit/node/archiver'\nimport {renderConcurrent} from '@shopify/cli-kit/node/ui'\nimport {AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {inTemporaryDirectory, mkdirSync, touchFile} from '@shopify/cli-kit/node/fs'\nimport {joinPath, basename} from '@shopify/cli-kit/node/path'\nimport {Writable} from 'stream'\n\ninterface BundleOptions {\n  app: AppInterface\n  bundlePath: string\n  identifiers: Identifiers\n  bundle: boolean\n}\n\nexport async function bundleAndBuildExtensions(options: BundleOptions) {\n  await inTemporaryDirectory(async (tmpDir) => {\n    const bundleDirectory = joinPath(tmpDir, 'bundle')\n    await mkdirSync(bundleDirectory)\n    await touchFile(joinPath(bundleDirectory, '.shopify'))\n\n    await renderConcurrent({\n      processes: [\n        {\n          prefix: 'theme_extensions',\n          action: async (stdout: Writable, stderr: Writable, signal: AbortSignal) => {\n            await bundleThemeExtensions({\n              app: options.app,\n              extensions: options.app.extensions.theme.map((themeExtension) => {\n                const extensionId = options.identifiers.extensions[themeExtension.localIdentifier]!\n                themeExtension.outputBundlePath = joinPath(bundleDirectory, extensionId)\n                return themeExtension\n              }),\n              stdout,\n              stderr,\n              signal,\n            })\n          },\n        },\n        ...(await buildUIExtensions({\n          app: {\n            ...options.app,\n            extensions: {\n              ...options.app.extensions,\n              ui: options.app.extensions.ui.map((uiExtension) => {\n                const extensionId = options.identifiers.extensions[uiExtension.localIdentifier]!\n                uiExtension.outputBundlePath = joinPath(\n                  bundleDirectory,\n                  extensionId,\n                  basename(uiExtension.outputBundlePath),\n                )\n                return uiExtension\n              }),\n            },\n          },\n        })),\n        ...options.app.extensions.function.map((functionExtension) => {\n          return {\n            prefix: functionExtension.localIdentifier,\n            action: async (stdout: Writable, stderr: Writable, signal: AbortSignal) => {\n              await buildFunctionExtension(functionExtension, {stdout, stderr, signal, app: options.app})\n            },\n          }\n        }),\n      ],\n      showTimestamps: false,\n    })\n\n    if (options.bundle) {\n      await zip({\n        inputDirectory: bundleDirectory,\n        outputZipPath: options.bundlePath,\n      })\n    }\n  })\n}\n"]}