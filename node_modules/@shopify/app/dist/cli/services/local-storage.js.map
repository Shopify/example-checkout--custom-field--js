{"version":3,"file":"local-storage.js","sourceRoot":"","sources":["../../../src/cli/services/local-storage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAA;AAChE,OAAO,EAAC,WAAW,EAAE,aAAa,EAAE,WAAW,EAAC,MAAM,8BAA8B,CAAA;AACpF,OAAO,EAAC,aAAa,EAAC,MAAM,4BAA4B,CAAA;AAiBxD,IAAI,SAA0D,CAAA;AAE9D,SAAS,eAAe;IACtB,IAAI,CAAC,SAAS,EAAE;QACd,SAAS,GAAG,IAAI,YAAY,CAAwB,EAAC,WAAW,EAAE,iBAAiB,EAAC,CAAC,CAAA;KACtF;IACD,OAAO,SAAS,CAAA;AAClB,CAAC;AAED,MAAM,UAAU,UAAU,CACxB,SAAiB,EACjB,SAA8C,eAAe,EAAE;IAE/D,MAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,CAAA;IAC3C,WAAW,CAAC,aAAa,CAAA,gDAAgD,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;IAC3G,OAAO,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;AAC/B,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,SAAiB,EAAE,SAA8C,eAAe,EAAE;IAC7G,MAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,CAAA;IAC3C,WAAW,CAAC,aAAa,CAAA,0CAA0C,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;IACrG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;AAC3B,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,SAA8C,eAAe,EAAE;IAC7F,WAAW,CAAC,aAAa,CAAA,iCAAiC,CAAC,CAAA;IAC3D,MAAM,CAAC,KAAK,EAAE,CAAA;AAChB,CAAC;AAED,MAAM,UAAU,UAAU,CACxB,OAAsB,EACtB,SAA8C,eAAe,EAAE;IAE/D,MAAM,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IACnD,WAAW,CACT,aAAa,CAAA,yCAAyC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAClH,CAAA;IACD,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;IACvC,IAAI,QAAQ,EAAE;QACZ,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE;YACrB,SAAS,EAAE,UAAU;YACrB,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;YACtC,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;YACtC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,QAAQ,CAAC,SAAS;YAClD,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;YACtC,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,QAAQ,CAAC,UAAU;YACrD,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,QAAQ,CAAC,YAAY;SAC5D,CAAC,CAAA;KACH;SAAM;QACL,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;KAChC;AACH,CAAC","sourcesContent":["import {LocalStorage} from '@shopify/cli-kit/node/local-storage'\nimport {outputDebug, outputContent, outputToken} from '@shopify/cli-kit/node/output'\nimport {normalizePath} from '@shopify/cli-kit/node/path'\n\nexport interface CachedAppInfo {\n  directory: string\n  appId?: string\n  title?: string\n  orgId?: string\n  storeFqdn?: string\n  updateURLs?: boolean\n  tunnelPlugin?: string\n}\n\n// We store each app info using the directory as the key\nexport interface AppLocalStorageSchema {\n  [key: string]: CachedAppInfo\n}\n\nlet _instance: LocalStorage<AppLocalStorageSchema> | undefined\n\nfunction appLocalStorage() {\n  if (!_instance) {\n    _instance = new LocalStorage<AppLocalStorageSchema>({projectName: 'shopify-cli-app'})\n  }\n  return _instance\n}\n\nexport function getAppInfo(\n  directory: string,\n  config: LocalStorage<AppLocalStorageSchema> = appLocalStorage(),\n): CachedAppInfo | undefined {\n  const normalized = normalizePath(directory)\n  outputDebug(outputContent`Reading cached app information for directory ${outputToken.path(normalized)}...`)\n  return config.get(normalized)\n}\n\nexport function clearAppInfo(directory: string, config: LocalStorage<AppLocalStorageSchema> = appLocalStorage()): void {\n  const normalized = normalizePath(directory)\n  outputDebug(outputContent`Clearing app information for directory ${outputToken.path(normalized)}...`)\n  config.delete(normalized)\n}\n\nexport function clearAllAppInfo(config: LocalStorage<AppLocalStorageSchema> = appLocalStorage()): void {\n  outputDebug(outputContent`Clearing all app information...`)\n  config.clear()\n}\n\nexport function setAppInfo(\n  options: CachedAppInfo,\n  config: LocalStorage<AppLocalStorageSchema> = appLocalStorage(),\n): void {\n  const normalized = normalizePath(options.directory)\n  outputDebug(\n    outputContent`Storing app information for directory ${outputToken.path(normalized)}:${outputToken.json(options)}`,\n  )\n  const savedApp = config.get(normalized)\n  if (savedApp) {\n    config.set(normalized, {\n      directory: normalized,\n      appId: options.appId ?? savedApp.appId,\n      title: options.title ?? savedApp.title,\n      storeFqdn: options.storeFqdn ?? savedApp.storeFqdn,\n      orgId: options.orgId ?? savedApp.orgId,\n      updateURLs: options.updateURLs ?? savedApp.updateURLs,\n      tunnelPlugin: options.tunnelPlugin ?? savedApp.tunnelPlugin,\n    })\n  } else {\n    config.set(normalized, options)\n  }\n}\n"]}