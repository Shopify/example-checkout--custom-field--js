{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../../src/cli/services/generate.ts"],"names":[],"mappings":"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","sourcesContent":["import {ensureGenerateContext} from './context.js'\nimport {fetchSpecifications} from './generate/fetch-extension-specifications.js'\nimport {fetchTemplateSpecifications} from './generate/fetch-template-specifications.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {load as loadApp} from '../models/app/loader.js'\nimport {GenericSpecification, isFunctionExtension} from '../models/app/extensions.js'\nimport generateExtensionPrompt, {\n  GenerateExtensionPromptOutput,\n  GenerateExtensionPromptOptions,\n} from '../prompts/generate/extension.js'\nimport metadata from '../metadata.js'\nimport {\n  ExtensionFlavorValue,\n  ExtensionInitOptions,\n  GeneratedExtension,\n  generateExtension,\n} from '../services/generate/extension.js'\nimport {\n  convertSpecificationsToTemplate,\n  getTypesExternalIdentitifier,\n  getTypesExternalName,\n  TemplateSpecification,\n} from '../models/app/template.js'\nimport {blocks} from '../constants.js'\nimport {PackageManager} from '@shopify/cli-kit/node/node-package-manager'\nimport {Config} from '@oclif/core'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {isShopify} from '@shopify/cli-kit/node/context/local'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {RenderAlertOptions, renderSuccess} from '@shopify/cli-kit/node/ui'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\nimport {groupBy} from '@shopify/cli-kit/common/collection'\n\nexport interface GenerateOptions {\n  directory: string\n  reset: boolean\n  config: Config\n  apiKey?: string\n  type?: string\n  template?: string\n  name?: string\n  cloneUrl?: string\n}\n\nasync function generate(options: GenerateOptions) {\n  const templateSpecifications = await getTemplateSpecifications(options)\n  const specificationTypes = templateSpecifications.flatMap((specification) => specification.types) ?? []\n  const app: AppInterface = await loadApp({directory: options.directory, specifications: specificationTypes})\n\n  const promptOptions = await buildPromptOptions(templateSpecifications, app, options)\n  const promptAnswers = await generateExtensionPrompt(promptOptions)\n\n  await saveAnalyticsMetadata(promptAnswers, options.type)\n\n  const generateExtensionOptions = buildGenerateOptions(promptAnswers, app, options)\n  const generatedExtensions = await generateExtension(generateExtensionOptions)\n\n  renderSuccessMessages(generatedExtensions, app.packageManager)\n}\n\nasync function getTemplateSpecifications(options: GenerateOptions): Promise<TemplateSpecification[]> {\n  const token = await ensureAuthenticatedPartners()\n  const apiKey = await ensureGenerateContext({...options, token})\n  const specifications = await fetchSpecifications({token, apiKey, config: options.config})\n  const localTemplateSpecifications = convertSpecificationsToTemplate(specifications)\n  const remoteTemplateSpecifications = await fetchTemplateSpecifications(token)\n  return localTemplateSpecifications.concat(remoteTemplateSpecifications)\n}\n\nasync function buildPromptOptions(\n  templateSpecifications: TemplateSpecification[],\n  app: AppInterface,\n  options: GenerateOptions,\n): Promise<GenerateExtensionPromptOptions> {\n  const templateSpecification = await handleTypeParameter(options.type, app, templateSpecifications)\n  validateExtensionFlavor(templateSpecification, options.template)\n\n  const {validTemplateSpecifications, templatesOverlimit} = checkLimits(templateSpecifications, app)\n\n  return {\n    templateType: templateSpecification?.identifier,\n    name: options.name,\n    extensionFlavor: options.template,\n    directory: joinPath(options.directory, 'extensions'),\n    app,\n    templateSpecifications: validTemplateSpecifications ?? [],\n    unavailableExtensions: getTypesExternalName(templatesOverlimit ?? []),\n    reset: options.reset,\n  }\n}\n\nfunction checkLimits(templateSpecifications: TemplateSpecification[], app: AppInterface) {\n  const iterateeFunction = (spec: TemplateSpecification) => {\n    const allValid = spec.types.every((type) => !limitReached(app, type))\n    return allValid ? 'validTemplateSpecifications' : 'templatesOverlimit'\n  }\n  return groupBy(templateSpecifications, iterateeFunction)\n}\n\nfunction limitReached(app: AppInterface, type: GenericSpecification) {\n  if (isFunctionExtension(type)) {\n    return app.extensions.function.length >= blocks.functions.defaultRegistrationLimit\n  } else {\n    return app.extensionsForType(type).length >= type.registrationLimit\n  }\n}\n\nasync function saveAnalyticsMetadata(promptAnswers: GenerateExtensionPromptOutput, typeFlag: string | undefined) {\n  await Promise.all(\n    promptAnswers.extensionContent.map((extensionContent) => {\n      return metadata.addPublicMetadata(() => ({\n        cmd_scaffold_template_flavor: extensionContent.extensionFlavor,\n        cmd_scaffold_type: extensionContent.specification.identifier,\n        cmd_scaffold_type_category: extensionContent.specification.category(),\n        cmd_scaffold_type_gated: extensionContent.specification.gated,\n        cmd_scaffold_used_prompts_for_type: extensionContent.specification.identifier !== typeFlag,\n      }))\n    }),\n  )\n}\n\nfunction buildGenerateOptions(\n  promptAnswers: GenerateExtensionPromptOutput,\n  app: AppInterface,\n  options: GenerateOptions,\n): ExtensionInitOptions[] {\n  return promptAnswers.extensionContent.map((extensionContent) => {\n    return {\n      name: extensionContent.name,\n      extensionFlavor: extensionContent.extensionFlavor as ExtensionFlavorValue,\n      specification: extensionContent.specification,\n      app,\n      extensionType: extensionContent.specification.identifier,\n      cloneUrl: options.cloneUrl,\n    }\n  })\n}\n\nfunction renderSuccessMessages(\n  generatedExtensions: GeneratedExtension[],\n  packageManager: AppInterface['packageManager'],\n) {\n  generatedExtensions.forEach((extension) => {\n    const formattedSuccessfulMessage = formatSuccessfulRunMessage(\n      extension.specification,\n      extension.directory,\n      packageManager,\n    )\n    renderSuccess(formattedSuccessfulMessage)\n  })\n}\n\nfunction findTemplateSpecification(type: string | undefined, specifications: TemplateSpecification[]) {\n  // To support legacy extensions specs, we need to check both the identifier and the external identifier\n  return specifications.find((spec) =>\n    spec.types.some((extension) => extension.identifier === type || extension.externalIdentifier === type),\n  )\n}\n\nfunction validateExtensionFlavor(templateSpecification?: TemplateSpecification, flavor?: string) {\n  if (!flavor || !templateSpecification) return\n\n  const possibleFlavors: string[] = templateSpecification.types[0]!.supportedFlavors.map(\n    (flavor) => flavor.value as string,\n  )\n\n  if (!possibleFlavors.includes(flavor)) {\n    throw new AbortError(\n      'Invalid template for extension type',\n      `Expected template to be one of the following: ${possibleFlavors.join(', ')}.`,\n    )\n  }\n}\n\nfunction formatSuccessfulRunMessage(\n  specification: GenericSpecification,\n  extensionDirectory: string,\n  depndencyManager: PackageManager,\n): RenderAlertOptions {\n  const options: RenderAlertOptions = {\n    headline: ['Your extension was created in', {filePath: extensionDirectory}, {char: '.'}],\n    nextSteps: [],\n    reference: [],\n  }\n\n  if (specification.category() === 'ui' || specification.category() === 'theme') {\n    options.nextSteps!.push([\n      'To preview this extension along with the rest of the project, run',\n      {command: `${formatPackageManagerCommand(depndencyManager, 'dev')}`},\n    ])\n  }\n\n  if (specification.helpURL) {\n    options.reference!.push(['For more details, see the', {link: {label: 'docs', url: specification.helpURL}}])\n  }\n\n  return options\n}\n\nasync function handleTypeParameter(\n  type: string | undefined,\n  app: AppInterface,\n  templateSpecifications: TemplateSpecification[],\n): Promise<TemplateSpecification | undefined> {\n  if (!type) return\n\n  const templateSpecification = findTemplateSpecification(type, templateSpecifications)\n\n  if (!templateSpecification) {\n    const isShopifolk = await isShopify()\n    const allExternalTypes = getTypesExternalIdentitifier(templateSpecifications)\n    const tryMsg = isShopifolk ? 'You might need to enable some beta flags on your Organization or App' : undefined\n    throw new AbortError(\n      `Unknown extension type: ${type}.\\nThe following extension types are supported: ${allExternalTypes.join(', ')}`,\n      tryMsg,\n    )\n  }\n\n  // Validate limits for selected type.\n  // If no type is selected, filter out any types that have reached their limit\n  templateSpecification.types.forEach((spec) => {\n    if (limitReached(app, spec)) {\n      throw new AbortError(\n        'Invalid extension type',\n        `You can only generate ${spec.registrationLimit} extension(s) of type ${spec.externalIdentifier} per app`,\n      )\n    }\n  })\n\n  return templateSpecification\n}\n\nexport default generate\n"]}