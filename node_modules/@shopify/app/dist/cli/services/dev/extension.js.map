{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/extension.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,yBAAyB,EAAC,MAAM,0BAA0B,CAAA;AAClE,OAAO,EAAC,wBAAwB,EAAC,MAAM,0BAA0B,CAAA;AACjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,wBAAwB,CAAA;AACjE,OAAO,EAAC,eAAe,EAAC,MAAM,uBAAuB,CAAA;AACrD,OAAO,EAAC,sBAAsB,EAAE,mCAAmC,EAAC,MAAM,8BAA8B,CAAA;AAIxG,OAAO,EAAC,WAAW,EAAC,MAAM,8BAA8B,CAAA;AA6ExD,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,OAA4B;IAChE,MAAM,UAAU,GAAwB;QACtC,GAAG,OAAO;QACV,eAAe,EAAE,MAAM,yBAAyB,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,eAAe,CAAC;KACjH,CAAA;IAED,MAAM,mBAAmB,GAAG;QAC1B,GAAG,UAAU;QACb,YAAY,EAAE,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC;KAC3C,CAAA;IACD,MAAM,sBAAsB,GAAG,MAAM,mCAAmC,CAAC,mBAAmB,CAAC,CAAA;IAC7F,MAAM,YAAY,GAAG,IAAI,sBAAsB,CAAC,sBAAsB,EAAE,mBAAmB,CAAC,CAAA;IAE5F,WAAW,CAAC,6CAA6C,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;IAC1E,MAAM,UAAU,GAAG,eAAe,CAAC,EAAC,UAAU,EAAE,YAAY,EAAC,CAAC,CAAA;IAE9D,WAAW,CAAC,kDAAkD,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;IAC/E,MAAM,mBAAmB,GAAG,wBAAwB,CAAC,EAAC,GAAG,OAAO,EAAE,UAAU,EAAE,YAAY,EAAC,CAAC,CAAA;IAC5F,WAAW,CAAC,2DAA2D,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;IACxF,MAAM,WAAW,GAAG,MAAM,0BAA0B,CAAC,EAAC,UAAU,EAAE,YAAY,EAAC,CAAC,CAAA;IAEhF,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;QAC5C,WAAW,CAAC,KAAK,EAAE,CAAA;QACnB,mBAAmB,CAAC,KAAK,EAAE,CAAA;QAC3B,UAAU,CAAC,KAAK,EAAE,CAAA;IACpB,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,SAAS,eAAe,CAAC,GAA+B;IACtD,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,CAAA;IAChD,YAAY,CAAC,QAAQ,GAAG,MAAM,CAAA;IAE9B,OAAO,YAAY,CAAC,QAAQ,EAAE,CAAA;AAChC,CAAC","sourcesContent":["import {getCartPathFromExtensions} from './extension/utilities.js'\nimport {setupWebsocketConnection} from './extension/websocket.js'\nimport {setupBundlerAndFileWatcher} from './extension/bundler.js'\nimport {setupHTTPServer} from './extension/server.js'\nimport {ExtensionsPayloadStore, getExtensionsPayloadStoreRawPayload} from './extension/payload/store.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {UIExtension} from '../../models/app/extensions.js'\nimport {AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\nimport {Writable} from 'stream'\n\nexport interface ExtensionDevOptions {\n  /**\n   * Standard output stream to send the output through.\n   */\n  stdout: Writable\n  /**\n   * Standard error stream to send the error output through.\n   */\n  stderr: Writable\n\n  /**\n   * Signal to abort the build process.\n   */\n  signal: AbortSignal\n\n  /**\n   * Overrides the default build directory.\n   */\n  buildDirectory?: string\n\n  /**\n   * The extension to be built.\n   */\n  extensions: UIExtension[]\n\n  /**\n   * The app that contains the extension.\n   */\n  app: AppInterface\n\n  /**\n   * The ID of the app that contains the extension.\n   */\n  id?: string\n\n  /**\n   * The app identifier\n   */\n  apiKey: string\n\n  /**\n   * URL where the extension is locally served from. It's usually the tunnel URL\n   */\n  url: string\n\n  /**\n   * The port where the extension is hosted.\n   * It's usually the tunnel port\n   */\n  port: number\n\n  /**\n   * The store where the extension wants to be previewed\n   */\n  storeFqdn: string\n\n  /**\n   * List of granted approval scopes belonging to the parent app\n   */\n  grantedScopes: string[]\n\n  /**\n   * Product variant ID, used for UI extensions targeting Checkout\n   * If that extension is present, this is mandatory\n   */\n  checkoutCartUrl?: string\n\n  /**\n   * Subscription product URL, used for subscription_ui_extensions\n   * If not provided the first product in the store will be used\n   */\n  subscriptionProductUrl?: string\n}\n\nexport async function devUIExtensions(options: ExtensionDevOptions): Promise<void> {\n  const devOptions: ExtensionDevOptions = {\n    ...options,\n    checkoutCartUrl: await getCartPathFromExtensions(options.extensions, options.storeFqdn, options.checkoutCartUrl),\n  }\n\n  const payloadStoreOptions = {\n    ...devOptions,\n    websocketURL: getWebSocketUrl(options.url),\n  }\n  const payloadStoreRawPayload = await getExtensionsPayloadStoreRawPayload(payloadStoreOptions)\n  const payloadStore = new ExtensionsPayloadStore(payloadStoreRawPayload, payloadStoreOptions)\n\n  outputDebug(`Setting up the UI extensions HTTP server...`, options.stdout)\n  const httpServer = setupHTTPServer({devOptions, payloadStore})\n\n  outputDebug(`Setting up the UI extensions Websocket server...`, options.stdout)\n  const websocketConnection = setupWebsocketConnection({...options, httpServer, payloadStore})\n  outputDebug(`Setting up the UI extensions bundler and file watching...`, options.stdout)\n  const fileWatcher = await setupBundlerAndFileWatcher({devOptions, payloadStore})\n\n  options.signal.addEventListener('abort', () => {\n    fileWatcher.close()\n    websocketConnection.close()\n    httpServer.close()\n  })\n}\n\nfunction getWebSocketUrl(url: ExtensionDevOptions['url']) {\n  const websocketURL = new URL('/extensions', url)\n  websocketURL.protocol = 'wss:'\n\n  return websocketURL.toString()\n}\n"]}