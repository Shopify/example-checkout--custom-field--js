{"version":3,"file":"urls.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/urls.ts"],"names":[],"mappings":"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","sourcesContent":["import {updateURLsPrompt} from '../../prompts/dev.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {UpdateURLsQuery, UpdateURLsQuerySchema, UpdateURLsQueryVariables} from '../../api/graphql/update_urls.js'\nimport {GetURLsQuery, GetURLsQuerySchema, GetURLsQueryVariables} from '../../api/graphql/get_urls.js'\nimport {setAppInfo} from '../local-storage.js'\nimport {AbortError, AbortSilentError, BugError} from '@shopify/cli-kit/node/error'\nimport {Config} from '@oclif/core'\nimport {getAvailableTCPPort} from '@shopify/cli-kit/node/tcp'\nimport {isValidURL} from '@shopify/cli-kit/common/url'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {appHost, appPort, isSpin, spinFqdn} from '@shopify/cli-kit/node/context/spin'\nimport {codespaceURL, gitpodURL} from '@shopify/cli-kit/node/context/local'\nimport {runTunnelPlugin, TunnelPluginError} from '@shopify/cli-kit/node/plugins'\n\nexport interface PartnersURLs {\n  applicationUrl: string\n  redirectUrlWhitelist: string[]\n}\n\nexport interface FrontendURLOptions {\n  app: AppInterface\n  tunnelProvider?: string\n  noTunnel: boolean\n  tunnelUrl?: string\n  useCloudflareTunnels: boolean\n  commandConfig: Config\n}\n\nexport interface FrontendURLResult {\n  frontendUrl: string\n  frontendPort: number\n  usingLocalhost: boolean\n}\n\n/**\n * The tunnel creation logic depends on 7 variables:\n * - If a Codespaces environment is deteced, then the URL is built using the codespaces hostname. No need for tunnel\n * - If a Gitpod environment is detected, then the URL is built using the gitpod hostname. No need for tunnel\n * - If a Spin environment is detected, then the URL is built using the cli + fqdn hostname as configured in nginx.\n *   No need for tunnel. In case problems with that configuration, the flags Tunnel or Custom Tunnel url could be used\n * - If a tunnelUrl is provided, that takes preference and is returned as the frontendURL\n * - If noTunnel is true, that takes second preference and localhost is used\n * - Otherwise, a tunnel is created. (by default using cloudflare)\n *\n * If there is no cached tunnel plugin and a tunnel is necessary, we'll ask the user to confirm.\n */\nexport async function generateFrontendURL(options: FrontendURLOptions): Promise<FrontendURLResult> {\n  let frontendPort = 4040\n  let frontendUrl: string\n  let usingLocalhost = false\n\n  if (codespaceURL()) {\n    frontendUrl = `https://${codespaceURL()}-${frontendPort}.githubpreview.dev`\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (gitpodURL()) {\n    const defaultUrl = gitpodURL()?.replace('https://', '')\n    frontendUrl = `https://${frontendPort}-${defaultUrl}`\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (isSpin() && !options.tunnelUrl) {\n    frontendUrl = `https://cli.${await spinFqdn()}`\n    if (appPort() !== undefined) {\n      frontendPort = appPort() ?? frontendPort\n      frontendUrl = `https://${appHost()}`\n    }\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (options.tunnelUrl) {\n    const matches = options.tunnelUrl.match(/(https:\\/\\/[^:]+):([0-9]+)/)\n    if (!matches) {\n      throw new AbortError(`Invalid tunnel URL: ${options.tunnelUrl}`, 'Valid format: \"https://my-tunnel-url:port\"')\n    }\n    frontendPort = Number(matches[2])\n    frontendUrl = matches[1]!\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (options.noTunnel) {\n    frontendPort = await getAvailableTCPPort()\n    frontendUrl = 'http://localhost'\n    usingLocalhost = true\n  } else {\n    frontendPort = await getAvailableTCPPort()\n    const defaultProvider = options.useCloudflareTunnels ? 'cloudflare' : 'ngrok'\n    const provider = options.tunnelProvider || defaultProvider\n    frontendUrl = await generateURL(options.commandConfig, provider, frontendPort)\n  }\n\n  return {frontendUrl, frontendPort, usingLocalhost}\n}\n\nexport async function generateURL(config: Config, tunnelProvider: string, frontendPort: number): Promise<string> {\n  return (await runTunnelPlugin(config, frontendPort, tunnelProvider)).mapError(mapRunTunnelPluginError).valueOrAbort()\n}\n\nexport function generatePartnersURLs(baseURL: string, authCallbackPath?: string | string[]): PartnersURLs {\n  let redirectUrlWhitelist: string[]\n  if (authCallbackPath && authCallbackPath.length > 0) {\n    const authCallbackPaths = Array.isArray(authCallbackPath) ? authCallbackPath : [authCallbackPath]\n    redirectUrlWhitelist = authCallbackPaths.reduce<string[]>((acc, path) => {\n      if (path && path.length > 0) {\n        acc.push(`${baseURL}${path}`)\n      }\n      return acc\n    }, [])\n  } else {\n    redirectUrlWhitelist = [\n      `${baseURL}/auth/callback`,\n      `${baseURL}/auth/shopify/callback`,\n      `${baseURL}/api/auth/callback`,\n    ]\n  }\n\n  return {\n    applicationUrl: baseURL,\n    redirectUrlWhitelist,\n  }\n}\n\nexport async function updateURLs(urls: PartnersURLs, apiKey: string, token: string): Promise<void> {\n  const variables: UpdateURLsQueryVariables = {apiKey, ...urls}\n  const query = UpdateURLsQuery\n  const result: UpdateURLsQuerySchema = await partnersRequest(query, token, variables)\n  if (result.appUpdate.userErrors.length > 0) {\n    const errors = result.appUpdate.userErrors.map((error) => error.message).join(', ')\n    throw new AbortError(errors)\n  }\n}\n\nexport async function getURLs(apiKey: string, token: string): Promise<PartnersURLs> {\n  const variables: GetURLsQueryVariables = {apiKey}\n  const query = GetURLsQuery\n  const result: GetURLsQuerySchema = await partnersRequest(query, token, variables)\n  return {applicationUrl: result.app.applicationUrl, redirectUrlWhitelist: result.app.redirectUrlWhitelist}\n}\n\nexport interface ShouldOrPromptUpdateURLsOptions {\n  currentURLs: PartnersURLs\n  appDirectory: string\n  cachedUpdateURLs?: boolean\n  newApp?: boolean\n}\n\nexport async function shouldOrPromptUpdateURLs(options: ShouldOrPromptUpdateURLsOptions): Promise<boolean> {\n  if (options.newApp) return true\n  let shouldUpdate: boolean = options.cachedUpdateURLs === true\n  if (options.cachedUpdateURLs === undefined) {\n    const response = await updateURLsPrompt(\n      options.currentURLs.applicationUrl,\n      options.currentURLs.redirectUrlWhitelist,\n    )\n    let newUpdateURLs: boolean | undefined\n    /* eslint-disable no-fallthrough */\n    switch (response) {\n      case 'always':\n        newUpdateURLs = true\n      case 'yes':\n        shouldUpdate = true\n        break\n      case 'never':\n        newUpdateURLs = false\n      case 'no':\n        shouldUpdate = false\n    }\n    /* eslint-enable no-fallthrough */\n    setAppInfo({directory: options.appDirectory, updateURLs: newUpdateURLs})\n  }\n  return shouldUpdate\n}\n\nexport function validatePartnersURLs(urls: PartnersURLs): void {\n  if (!isValidURL(urls.applicationUrl))\n    throw new AbortError(`Invalid application URL: ${urls.applicationUrl}`, 'Valid format: \"https://example.com\"')\n\n  urls.redirectUrlWhitelist.forEach((url) => {\n    if (!isValidURL(url))\n      throw new AbortError(\n        `Invalid redirection URLs: ${urls.redirectUrlWhitelist}`,\n        'Valid format: \"https://example.com/callback1,https://example.com/callback2\"',\n      )\n  })\n}\n\nfunction mapRunTunnelPluginError(tunnelPluginError: TunnelPluginError) {\n  const alternative = tunnelPluginError.provider === 'cloudflare' ? 'ngrok' : 'cloudflare'\n  switch (tunnelPluginError.type) {\n    case 'no-provider':\n      return new BugError(`We couldn't find the ${tunnelPluginError.provider} tunnel plugin`)\n    case 'multiple-urls':\n      return new BugError(`Multiple tunnel plugins for ${tunnelPluginError.provider} found`)\n    case 'unknown':\n      return new AbortError(`${tunnelPluginError.provider} failed to start the tunnel.\\n${tunnelPluginError.message}`, [\n        'What to try:',\n        {\n          list: {\n            items: [\n              ['Try to run the command again'],\n              [\n                'Add the flag',\n                {command: `--tunnel ${alternative}`},\n                `to use ${alternative} as the tunnel provider instead of ${tunnelPluginError.provider}`,\n              ],\n              ['Add the flag', {command: '--tunnel-url {URL}'}, 'to use a custom tunnel URL'],\n            ],\n          },\n        },\n      ])\n    default:\n      return new AbortSilentError()\n  }\n}\n"]}