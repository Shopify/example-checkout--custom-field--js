{"version":3,"file":"select-store.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/select-store.ts"],"names":[],"mappings":"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","sourcesContent":["import {fetchAllDevStores} from './fetch.js'\nimport {Organization, OrganizationStore} from '../../models/organization.js'\nimport {reloadStoreListPrompt, selectStorePrompt} from '../../prompts/dev.js'\nimport {\n  ConvertDevToTestStoreQuery,\n  ConvertDevToTestStoreSchema,\n  ConvertDevToTestStoreVariables,\n} from '../../api/graphql/convert_dev_to_test_store.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {sleep} from '@shopify/cli-kit/node/system'\nimport {renderTasks} from '@shopify/cli-kit/node/ui'\nimport {isSpinEnvironment} from '@shopify/cli-kit/node/context/spin'\nimport {partnersFqdn} from '@shopify/cli-kit/node/context/fqdn'\nimport {firstPartyDev} from '@shopify/cli-kit/node/context/local'\nimport {AbortError, BugError, CancelExecution} from '@shopify/cli-kit/node/error'\nimport {outputInfo, outputSuccess} from '@shopify/cli-kit/node/output'\n\nconst CreateStoreLink = async (orgId: string) => {\n  const url = `https://${await partnersFqdn()}/${orgId}/stores/new?store_type=dev_store`\n  return (\n    `Looks like you don't have a dev store in the Partners org you selected. ` +\n    `Keep going â€” create a dev store on Shopify Partners:\\n${url}\\n`\n  )\n}\n\n/**\n * Select store from list or\n * If a cachedStoreName is provided, we check if it is valid and return it. If it's not valid, ignore it.\n * If there are no stores, show a link to create a store and prompt the user to refresh the store list\n * If no store is finally selected, exit process\n * @param stores - List of available stores\n * @param orgId - Current organization ID\n * @param cachedStoreName - Cached store name\n * @returns The selected store\n */\nexport async function selectStore(\n  stores: OrganizationStore[],\n  org: Organization,\n  token: string,\n): Promise<OrganizationStore> {\n  const store = await selectStorePrompt(stores)\n  if (store) {\n    await convertToTestStoreIfNeeded(store, org.id, token)\n    return store\n  }\n\n  outputInfo(`\\n${await CreateStoreLink(org.id)}`)\n  await sleep(5)\n\n  const reload = await reloadStoreListPrompt(org)\n  if (!reload) {\n    throw new CancelExecution()\n  }\n\n  const data = await waitForCreatedStore(org.id, token)\n  return selectStore(data, org, token)\n}\n\n/**\n * Retrieves the list of stores from an organization, retrying a few times if the list is empty.\n * That is because after creating the dev store, it can take some seconds for the API to return it.\n * @param orgId - Current organization ID\n * @param token - Token to access partners API\n * @returns List of stores\n */\nasync function waitForCreatedStore(orgId: string, token: string): Promise<OrganizationStore[]> {\n  const retries = 10\n  const secondsToWait = 3\n  let data = [] as OrganizationStore[]\n  const tasks = [\n    {\n      title: 'Fetching organization data',\n      task: async () => {\n        for (let i = 0; i < retries; i++) {\n          // eslint-disable-next-line no-await-in-loop\n          const stores = await fetchAllDevStores(orgId, token)\n          if (stores.length > 0) {\n            data = stores\n            return\n          }\n          // eslint-disable-next-line no-await-in-loop\n          await sleep(secondsToWait)\n        }\n      },\n    },\n  ]\n  await renderTasks(tasks)\n\n  return data\n}\n\n/**\n * Check if the store exists in the current organization and it is a valid store\n * To be valid, it must be non-transferable.\n * @param storeDomain - Store domain to check\n * @param stores - List of available stores\n * @param orgId - Current organization ID\n * @param token - Token to access partners API\n * @returns True if the store is valid\n * @throws If the store can't be found in the organization or we fail to make it a test store\n */\nexport async function convertToTestStoreIfNeeded(\n  store: OrganizationStore,\n  orgId: string,\n  token: string,\n): Promise<void> {\n  /**\n   * Is not possible to convert stores to dev ones in spin environmets. Should be created directly as development.\n   */\n  if (isSpinEnvironment() && firstPartyDev()) return\n  if (!store.transferDisabled && !store.convertableToPartnerTest) {\n    throw new AbortError(\n      `The store you specified (${store.shopDomain}) is not a dev store`,\n      'Run dev --reset and select an eligible dev store.',\n    )\n  }\n  if (!store.transferDisabled) await convertStoreToTest(store, orgId, token)\n}\n\n/**\n * Convert a store to a test store so development apps can be installed\n * This can't be undone, so we ask the user to confirm\n * @param store - Store to convert\n * @param orgId - Current organization ID\n * @param token - Token to access partners API\n */\nexport async function convertStoreToTest(store: OrganizationStore, orgId: string, token: string) {\n  const query = ConvertDevToTestStoreQuery\n  const variables: ConvertDevToTestStoreVariables = {\n    input: {\n      organizationID: parseInt(orgId, 10),\n      shopId: store.shopId,\n    },\n  }\n  const result: ConvertDevToTestStoreSchema = await partnersRequest(query, token, variables)\n  if (!result.convertDevToTestStore.convertedToTestStore) {\n    const errors = result.convertDevToTestStore.userErrors.map((error) => error.message).join(', ')\n    throw new BugError(\n      `Error converting store ${store.shopDomain} to a Test store: ${errors}`,\n      'This store might not be compatible with draft apps, please try a different store',\n    )\n  }\n  outputSuccess(`Converted ${store.shopDomain} to a Test store`)\n}\n"]}