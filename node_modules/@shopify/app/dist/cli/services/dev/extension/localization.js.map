{"version":3,"file":"localization.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/extension/localization.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AACnD,OAAO,EAAC,QAAQ,EAAE,IAAI,EAAC,MAAM,0BAA0B,CAAA;AACvD,OAAO,EAAC,eAAe,EAAC,MAAM,6BAA6B,CAAA;AAC3D,OAAO,EAAC,UAAU,EAAE,UAAU,EAAC,MAAM,8BAA8B,CAAA;AAanE,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,SAAsB;IACnE,MAAM,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;IAC3D,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC/C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,SAAsB,EACtB,OAAqC;IAErC,MAAM,WAAW,GAAG,MAAM,wBAAwB,CAAC,SAAS,CAAC,CAAA;IAE7D,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;QACvB,OAAO,EAAC,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAC,CAAA;KAC7C;IAED,MAAM,YAAY,GAAG,OAAO,CAAC,0BAA0B;QACrD,CAAC,CAAC,OAAO,CAAC,0BAA0B;QACpC,CAAC,CAAE;YACC,aAAa,EAAE,IAAI;YACnB,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,CAAC;SACE,CAAA;IAEtB,IAAI,MAAM,GAA8B,SAAS,CAAA;IAEjD,IAAI;QACF,MAAM,OAAO,CAAC,GAAG,CACf,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE;YACnC,MAAM,CAAC,MAAM,EAAE,GAAG,gBAAgB,CAAC,GAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAExF,IAAI,MAAM,EAAE;gBACV,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;oBACrC,YAAY,CAAC,aAAa,GAAG,MAAM,CAAA;iBACpC;gBAED,OAAO,wBAAwB,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,OAAO,CAAC,CAAA;aACtF;QACH,CAAC,CAAC,CACH,CAAA;QACD,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QACrC,UAAU,CAAC,gCAAgC,SAAS,CAAC,aAAa,CAAC,IAAI,OAAO,SAAS,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;QACpH,yFAAyF;KAC1F;IAAC,OAAO,KAAU,EAAE;QACnB,MAAM,GAAG,OAAO,CAAA;KACjB;IAED,OAAO;QACL,YAAY;QACZ,MAAM;KACP,CAAA;AACH,CAAC;AAED,KAAK,UAAU,wBAAwB,CACrC,MAAc,EACd,IAAY,EACZ,YAA0B,EAC1B,SAAsB,EACtB,OAAqC;IAErC,IAAI,aAAiC,CAAA;IACrC,IAAI;QACF,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAA;QACpC,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;QAC7D,8DAA8D;KAC/D;IAAC,OAAO,KAAU,EAAE;QACnB,MAAM,OAAO,GAAG,iBAAiB,MAAM,eAAe,SAAS,CAAC,aAAa,CAAC,IAAI,OAAO,IAAI,KAAK,KAAK,CAAC,OAAO,EAAE,CAAA;QACjH,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;QACnC,MAAM,IAAI,eAAe,CAAC,OAAO,CAAC,CAAA;KACnC;AACH,CAAC","sourcesContent":["import {ExtensionAssetBuildStatus} from './payload/models.js'\nimport {GetUIExtensionPayloadOptions} from './payload.js'\nimport {UIExtension} from '../../../models/app/extensions.js'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {readFile, glob} from '@shopify/cli-kit/node/fs'\nimport {ExtendableError} from '@shopify/cli-kit/node/error'\nimport {outputInfo, outputWarn} from '@shopify/cli-kit/node/output'\n\nexport type Locale = string\n\nexport interface Localization {\n  // TOOD: Should this be strongly typed?\n  defaultLocale: Locale\n  translations: {\n    [key: Locale]: {[key: string]: string}\n  }\n  lastUpdated: number\n}\n\nexport async function getLocalizationFilePaths(extension: UIExtension): Promise<string[]> {\n  const localePath = joinPath(extension.directory, 'locales')\n  return glob([joinPath(localePath, '*.json')])\n}\n\nexport async function getLocalization(\n  extension: UIExtension,\n  options: GetUIExtensionPayloadOptions,\n): Promise<{localization: Localization | undefined; status: ExtensionAssetBuildStatus}> {\n  const localeFiles = await getLocalizationFilePaths(extension)\n\n  if (!localeFiles.length) {\n    return {localization: undefined, status: ''}\n  }\n\n  const localization = options.currentLocalizationPayload\n    ? options.currentLocalizationPayload\n    : ({\n        defaultLocale: 'en',\n        translations: {},\n        lastUpdated: 0,\n      } as Localization)\n\n  let status: ExtensionAssetBuildStatus = 'success'\n\n  try {\n    await Promise.all(\n      localeFiles.map(async (localeFile) => {\n        const [locale, ...fileNameSegments] = (localeFile.split('/').pop() as string).split('.')\n\n        if (locale) {\n          if (fileNameSegments[0] === 'default') {\n            localization.defaultLocale = locale\n          }\n\n          return compileLocalizationFiles(locale, localeFile, localization, extension, options)\n        }\n      }),\n    )\n    localization.lastUpdated = Date.now()\n    outputInfo(`Parsed locales for extension ${extension.configuration.name} at ${extension.directory}`, options.stdout)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-catch-all/no-catch-all\n  } catch (error: any) {\n    status = 'error'\n  }\n\n  return {\n    localization,\n    status,\n  }\n}\n\nasync function compileLocalizationFiles(\n  locale: string,\n  path: string,\n  localization: Localization,\n  extension: UIExtension,\n  options: GetUIExtensionPayloadOptions,\n): Promise<void> {\n  let localeContent: string | undefined\n  try {\n    localeContent = await readFile(path)\n    localization.translations[locale] = JSON.parse(localeContent)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    const message = `Error parsing ${locale} locale for ${extension.configuration.name} at ${path}: ${error.message}`\n    outputWarn(message, options.stderr)\n    throw new ExtendableError(message)\n  }\n}\n"]}