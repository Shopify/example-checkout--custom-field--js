{"version":3,"file":"templates.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/extension/templates.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,oBAAoB,EAAC,MAAM,8BAA8B,CAAA;AACjE,OAAO,EAAC,QAAQ,EAAE,eAAe,EAAC,MAAM,4BAA4B,CAAA;AACpE,OAAO,EAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAC,MAAM,0BAA0B,CAAA;AACnE,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAA;AAWpD,MAAM,OAAO,qBAAsB,SAAQ,QAAQ;IACjD,YAAY,OAAuB;QACjC,KAAK,CAAC,0BAA0B,OAAO,CAAC,QAAQ,0BAA0B,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAA;IACvG,CAAC;CACF;AAED,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,OAAuB;IACnD,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,OAAO,CAAC,CAAA;IACnD,MAAM,eAAe,GAAG,MAAM,QAAQ,CAAC,YAAY,CAAC,CAAA;IACpD,OAAO,oBAAoB,CAAC,eAAe,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;AAC5D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,OAAuB;IAC3D,MAAM,kBAAkB,GAAG,MAAM,qBAAqB,EAAE,CAAA;IACxD,MAAM,YAAY,GAAG,EAAE,CAAA;IACvB,IAAI,OAAO,CAAC,gBAAgB,EAAE;QAC5B,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,GAAG,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,QAAQ,cAAc,CAAC,CAAC,CAAA;KAC/G;IACD,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,GAAG,OAAO,CAAC,QAAQ,cAAc,CAAC,CAAC,CAAA;IAClF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,CAAA;IAC5C,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,MAAM,IAAI,qBAAqB,CAAC,OAAO,CAAC,CAAA;KACzC;IACD,OAAO,WAAW,CAAC,CAAC,CAAW,CAAA;AACjC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB;IACzC,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,8BAA8B,EAAE;QACjE,IAAI,EAAE,WAAW;QACjB,GAAG,EAAE,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;KACtC,CAAC,CAAA;IACF,OAAO,SAAmB,CAAA;AAC5B,CAAC","sourcesContent":["import {renderLiquidTemplate} from '@shopify/cli-kit/node/liquid'\nimport {joinPath, moduleDirectory} from '@shopify/cli-kit/node/path'\nimport {readFile, glob, findPathUp} from '@shopify/cli-kit/node/fs'\nimport {BugError} from '@shopify/cli-kit/node/error'\n\nexport interface GetHTMLOptions {\n  extensionSurface?: string\n  template: Template\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any\n}\n\nexport type Template = 'index' | 'tunnel-error' | 'error'\n\nexport class TemplateNotFoundError extends BugError {\n  constructor(options: GetHTMLOptions) {\n    super(`Couldn't find template ${options.template} for extension surface ${options.extensionSurface}`)\n  }\n}\n\nexport async function getHTML(options: GetHTMLOptions): Promise<string> {\n  const templatePath = await getTemplatePath(options)\n  const templateContent = await readFile(templatePath)\n  return renderLiquidTemplate(templateContent, options.data)\n}\n\nexport async function getTemplatePath(options: GetHTMLOptions): Promise<string> {\n  const templatesDirectory = await getTemplatesDirectory()\n  const globPatterns = []\n  if (options.extensionSurface) {\n    globPatterns.push(joinPath(templatesDirectory, `${options.extensionSurface}/${options.template}.html.liquid`))\n  }\n  globPatterns.push(joinPath(templatesDirectory, `${options.template}.html.liquid`))\n  const globMatches = await glob(globPatterns)\n  if (globMatches.length === 0) {\n    throw new TemplateNotFoundError(options)\n  }\n  return globMatches[0] as string\n}\n\nexport async function getTemplatesDirectory(): Promise<string> {\n  const directory = await findPathUp('templates/ui-extensions/html', {\n    type: 'directory',\n    cwd: moduleDirectory(import.meta.url),\n  })\n  return directory as string\n}\n"]}