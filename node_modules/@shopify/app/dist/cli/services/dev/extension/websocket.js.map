{"version":3,"file":"websocket.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/extension/websocket.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,2BAA2B,EAAC,MAAM,oBAAoB,CAAA;AAE9D,OAAO,EAAC,uBAAuB,EAAE,uBAAuB,EAAC,MAAM,yBAAyB,CAAA;AACxF,OAAO,EAAC,eAAe,EAAC,MAAM,IAAI,CAAA;AAElC,MAAM,iBAAiB,GAAG,EAAE,CAAA;AAE5B,MAAM,UAAU,wBAAwB,CAAC,OAAwC;IAC/E,MAAM,GAAG,GAAG,IAAI,eAAe,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAC,CAAC,CAAA;IACvE,MAAM,KAAK,GAAG,4BAA4B,CAAC,GAAG,CAAC,CAAA;IAE/C,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,EAAE,uBAAuB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAA;IACvE,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,2BAA2B,CAAC,MAAM,EAAE,uBAAuB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAA;IAElG,OAAO;QACL,KAAK,EAAE,GAAG,EAAE;YACV,GAAG,CAAC,KAAK,EAAE,CAAA;YACX,aAAa,CAAC,KAAK,CAAC,CAAA;QACtB,CAAC;KACF,CAAA;AACH,CAAC;AACD,SAAS,4BAA4B,CAAC,GAAoB;IACxD,OAAO,WAAW,CAAC,GAAG,EAAE;QACtB,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;YACzB,MAAM,eAAe,GAAG,EAAE,CAAC,UAAU,GAAG,CAAC,CAAA;YACzC,IAAI,eAAe,EAAE;gBACnB,EAAE,CAAC,IAAI,EAAE,CAAA;aACV;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,EAAE,iBAAiB,GAAG,IAAI,CAAC,CAAA;AAC9B,CAAC","sourcesContent":["import {ExtensionsPayloadStoreEvent} from './payload/store.js'\nimport {SetupWebSocketConnectionOptions, WebsocketConnection} from './websocket/models.js'\nimport {getPayloadUpdateHandler, websocketUpgradeHandler} from './websocket/handlers.js'\nimport {WebSocketServer} from 'ws'\n\nconst PING_INTERVAL_SEC = 10\n\nexport function setupWebsocketConnection(options: SetupWebSocketConnectionOptions): WebsocketConnection {\n  const wss = new WebSocketServer({noServer: true, clientTracking: true})\n  const timer = pingAliveClientsPeriodically(wss)\n\n  options.httpServer.on('upgrade', websocketUpgradeHandler(wss, options))\n  options.payloadStore.on(ExtensionsPayloadStoreEvent.Update, getPayloadUpdateHandler(wss, options))\n\n  return {\n    close: () => {\n      wss.close()\n      clearInterval(timer)\n    },\n  }\n}\nfunction pingAliveClientsPeriodically(wss: WebSocketServer) {\n  return setInterval(() => {\n    wss.clients.forEach((ws) => {\n      const connectionAlive = ws.readyState < 2\n      if (connectionAlive) {\n        ws.ping()\n      }\n    })\n  }, PING_INTERVAL_SEC * 1000)\n}\n"]}