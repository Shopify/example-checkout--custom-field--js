{"version":3,"file":"bundler.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/extension/bundler.ts"],"names":[],"mappings":"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","sourcesContent":["import {ExtensionsPayloadStore} from './payload/store.js'\nimport {ExtensionDevOptions} from '../extension.js'\nimport {bundleExtension} from '../../extensions/bundle.js'\nimport {AbortController} from '@shopify/cli-kit/node/abort'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\n\nexport interface WatchEvent {\n  path: string\n  type: 'build' | 'localization'\n}\n\nexport interface FileWatcherOptions {\n  devOptions: ExtensionDevOptions\n  payloadStore: ExtensionsPayloadStore\n}\n\nexport interface FileWatcher {\n  close: () => void\n}\n\nexport async function setupBundlerAndFileWatcher(options: FileWatcherOptions) {\n  const {default: chokidar} = await import('chokidar')\n  const abortController = new AbortController()\n\n  const bundlers: Promise<void>[] = []\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  options.devOptions.extensions.forEach(async (extension) => {\n    bundlers.push(\n      bundleExtension({\n        minify: false,\n        outputBundlePath: extension.outputBundlePath,\n        environment: 'development',\n        env: {\n          ...(options.devOptions.app.dotenv?.variables ?? {}),\n          APP_URL: options.devOptions.url,\n        },\n        stdin: {\n          contents: extension.getBundleExtensionStdinContent(),\n          resolveDir: extension.directory,\n          loader: 'tsx',\n        },\n        stderr: options.devOptions.stderr,\n        stdout: options.devOptions.stdout,\n        watchSignal: abortController.signal,\n        watch: async (result) => {\n          const error = (result?.errors?.length ?? 0) > 0\n          outputDebug(\n            `The Javascript bundle of the UI extension with ID ${extension.devUUID} has ${\n              error ? 'an error' : 'changed'\n            }`,\n            error ? options.devOptions.stderr : options.devOptions.stdout,\n          )\n\n          try {\n            await options.payloadStore.updateExtension(extension, options.devOptions, {\n              status: error ? 'error' : 'success',\n            })\n            // eslint-disable-next-line no-catch-all/no-catch-all\n          } catch {\n            // ESBuild handles error output\n          }\n        },\n      }),\n    )\n\n    const localeWatcher = chokidar\n      .watch(joinPath(extension.directory, 'locales', '**.json'))\n      .on('change', (event, path) => {\n        outputDebug(`Locale file at path ${path} changed`, options.devOptions.stdout)\n        options.payloadStore\n          .updateExtension(extension, options.devOptions)\n          .then((_closed) => {\n            outputDebug(`Notified extension ${extension.devUUID} about the locale change.`, options.devOptions.stdout)\n          })\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .catch((_: any) => {})\n      })\n\n    abortController.signal.addEventListener('abort', () => {\n      outputDebug(`Closing locale file watching for extension with ID ${extension.devUUID}`, options.devOptions.stdout)\n      localeWatcher\n        .close()\n        .then(() => {\n          outputDebug(`Locale file watching closed for extension with ${extension.devUUID}`, options.devOptions.stdout)\n        })\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .catch((error: any) => {\n          outputDebug(\n            `Locale file watching failed to close for extension with ${extension.devUUID}: ${error.message}`,\n            options.devOptions.stderr,\n          )\n        })\n    })\n  })\n\n  await Promise.all(bundlers)\n\n  return {\n    close: () => {\n      abortController.abort()\n    },\n  }\n}\n"]}