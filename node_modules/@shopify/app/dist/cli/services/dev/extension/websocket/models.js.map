{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../../../../src/cli/services/dev/extension/websocket/models.ts"],"names":[],"mappings":"AAIA,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,8BAAiB,CAAA;IACjB,kCAAqB,CAAA;AACvB,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB","sourcesContent":["import {ExtensionsPayloadStore} from '../payload/store.js'\nimport {ExtensionDevOptions} from '../../extension.js'\nimport {Server} from 'http'\n\nexport enum EventType {\n  Update = 'update',\n  Dispatch = 'dispatch',\n}\n\ntype DataType = 'focus' | 'unfocus'\n\ntype DataPayload = {uuid: string}[]\nexport interface WebSocketEvent {\n  type: EventType\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any\n}\n\nexport type SetupWebSocketConnectionOptions = ExtensionDevOptions & {\n  httpServer: Server\n  payloadStore: ExtensionsPayloadStore\n}\n\nexport interface WebsocketConnection {\n  close: () => void\n}\n\nexport interface IncomingDispatchMessage {\n  event: EventType.Dispatch\n  data: {\n    type: DataType\n    payload?: DataPayload\n  }\n}\n\nexport interface OutgoingDispatchMessage extends OutgoingMessage {\n  event: EventType.Dispatch\n  data: {\n    type: DataType\n    payload?: DataPayload\n    extensions: unknown[]\n    store: string\n    app: {apiKey: string}\n  }\n}\nexport interface OutgoingMessage {\n  event: EventType\n  version: string\n  data: {[key: string]: unknown}\n}\n"]}