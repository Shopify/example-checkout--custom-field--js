{"version":3,"file":"handlers.js","sourceRoot":"","sources":["../../../../../../src/cli/services/dev/extension/websocket/handlers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EventType,\n  IncomingDispatchMessage,\n  OutgoingDispatchMessage,\n  OutgoingMessage,\n  SetupWebSocketConnectionOptions,\n} from './models.js'\nimport {RawData, WebSocket, WebSocketServer} from 'ws'\nimport {outputDebug, outputContent, outputToken} from '@shopify/cli-kit/node/output'\nimport {IncomingMessage} from 'http'\nimport {Duplex} from 'stream'\n\nexport function websocketUpgradeHandler(\n  wss: WebSocketServer,\n  options: SetupWebSocketConnectionOptions,\n): (req: IncomingMessage, socket: Duplex, head: Buffer) => void {\n  return (request, socket, head) => {\n    if (request.url !== '/extensions') {\n      return\n    }\n    outputDebug(`Upgrading HTTP request to a websocket connection`, options.stdout)\n    wss.handleUpgrade(request, socket, head, getConnectionDoneHandler(wss, options))\n  }\n}\n\nexport function getConnectionDoneHandler(wss: WebSocketServer, options: SetupWebSocketConnectionOptions) {\n  return (ws: WebSocket) => {\n    outputDebug(`Websocket connection successfully established`, options.stdout)\n    const connectedPayload = {\n      event: 'connected',\n      data: options.payloadStore.getConnectedPayload(),\n      version: '3',\n    }\n    outputDebug(outputContent`Sending connected payload: ${outputToken.json(connectedPayload)}`, options.stdout)\n    ws.send(JSON.stringify(connectedPayload))\n    ws.on('message', getOnMessageHandler(wss, options))\n  }\n}\n\nexport function getOnMessageHandler(wss: WebSocketServer, options: SetupWebSocketConnectionOptions) {\n  return (data: RawData) => {\n    const jsonData = JSON.parse(data.toString())\n    const {event: eventType, data: eventData} = jsonData\n\n    outputDebug(\n      outputContent`Received websocket message with event type ${eventType} and data:\n${outputToken.json(eventData)}\n          `,\n      options.stdout,\n    )\n\n    if (eventType === 'update') {\n      const payloadStoreApiKey = options.payloadStore.getRawPayload().app.apiKey\n      const eventAppApiKey = eventData.app?.apiKey\n\n      if (eventData.app) {\n        if (payloadStoreApiKey !== eventAppApiKey) {\n          return\n        }\n        /**\n         * App updates must take precedence over extensions. Otherwise the websocket server\n         * will send an update to the client with missing app data and will cause the loading\n         * of extensions to fail.\n         */\n        options.payloadStore.updateApp(eventData.app)\n      }\n      if (eventData.extensions) {\n        options.payloadStore.updateExtensions(eventData.extensions)\n      }\n    } else if (eventType === 'dispatch') {\n      const outGoingMessage = getOutgoingDispatchMessage(jsonData, options)\n\n      notifyClients(wss, outGoingMessage, options)\n    }\n  }\n}\n\nexport function getPayloadUpdateHandler(\n  wss: WebSocketServer,\n  options: SetupWebSocketConnectionOptions,\n): (extensionIds: string[]) => void {\n  return (extensionIds: string[]) => {\n    const payload = {\n      event: EventType.Update,\n      version: '3',\n      data: {\n        ...options.payloadStore.getRawPayloadFilteredByExtensionIds(extensionIds),\n      },\n    }\n    outputDebug(\n      outputContent`Sending websocket update event to the websocket clients:\n  ${outputToken.json(payload)}\n    `,\n      options.stdout,\n    )\n    notifyClients(wss, payload, options)\n  }\n}\n\nfunction notifyClients(wss: WebSocketServer, payload: OutgoingMessage, options: SetupWebSocketConnectionOptions) {\n  outputDebug(\n    outputContent`Sending websocket with event type ${payload.event} and data:\n${outputToken.json(payload.data)}\n        `,\n    options.stdout,\n  )\n\n  const stringPayload = JSON.stringify(payload)\n  wss.clients.forEach((ws) => ws.send(stringPayload))\n}\n\nexport function getOutgoingDispatchMessage(\n  incomingMessage: IncomingDispatchMessage,\n  options: SetupWebSocketConnectionOptions,\n): OutgoingDispatchMessage {\n  const extensionsPayload = options.payloadStore.getRawPayload()\n  return {\n    ...incomingMessage,\n    version: '3',\n    data: {\n      ...incomingMessage.data,\n      extensions: [],\n      store: extensionsPayload.store,\n      app: extensionsPayload.app,\n    },\n  }\n}\n"]}