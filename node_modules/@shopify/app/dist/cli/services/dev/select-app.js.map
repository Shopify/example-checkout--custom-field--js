{"version":3,"file":"select-app.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/select-app.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,EAAE,oBAAoB,EAAE,eAAe,EAAC,MAAM,sBAAsB,CAAA;AAEzF,OAAO,EAAC,kBAAkB,EAA2B,MAAM,iBAAiB,CAAA;AAC5E,OAAO,EAAC,cAAc,EAAgD,MAAM,iCAAiC,CAAA;AAC7G,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAA;AAClE,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAA;AAEvD;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,YAAoB,EACpB,IAA8B,EAC9B,GAAiB,EACjB,KAAa;IAEb,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAA;IAC1C,IAAI,CAAC,YAAY,EAAE;QACjB,UAAU,CAAC,0EAA0E,CAAC,CAAA;QACtF,YAAY,GAAG,MAAM,oBAAoB,EAAE,CAAA;KAC5C;IACD,IAAI,YAAY,EAAE;QAChB,OAAO,SAAS,CAAC,GAAG,EAAE,YAAY,EAAE,KAAK,CAAC,CAAA;KAC3C;SAAM;QACL,MAAM,iBAAiB,GAAG,MAAM,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAA;QACpE,MAAM,eAAe,GAAG,MAAM,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;QAC1E,OAAO,eAAgB,CAAA;KACxB;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,GAAiB,EAAE,OAAe,EAAE,KAAa;IAC/E,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,OAAO,CAAC,CAAA;IAEzC,MAAM,SAAS,GAA4B;QACzC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;QACzB,KAAK,EAAE,GAAG,IAAI,EAAE;QAChB,MAAM,EAAE,qBAAqB;QAC7B,KAAK,EAAE,CAAC,8BAA8B,CAAC;QACvC,IAAI,EAAE,WAAW;KAClB,CAAA;IAED,MAAM,KAAK,GAAG,cAAc,CAAA;IAC5B,MAAM,MAAM,GAAyB,MAAM,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IACnF,IAAI,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACnF,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,CAAA;KAC7B;IAED,MAAM,UAAU,GAAoB,MAAM,CAAC,SAAS,CAAC,GAAG,CAAA;IACxD,UAAU,CAAC,cAAc,GAAG,GAAG,CAAC,EAAE,CAAA;IAClC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAA;IACxB,OAAO,UAAU,CAAA;AACnB,CAAC","sourcesContent":["import {appNamePrompt, createAsNewAppPrompt, selectAppPrompt} from '../../prompts/dev.js'\nimport {Organization, OrganizationApp} from '../../models/organization.js'\nimport {fetchAppFromApiKey, OrganizationAppsResponse} from '../dev/fetch.js'\nimport {CreateAppQuery, CreateAppQuerySchema, CreateAppQueryVariables} from '../../api/graphql/create_app.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputInfo} from '@shopify/cli-kit/node/output'\n\n/**\n * Select an app from env, list or create a new one:\n * If a cachedAppId is provided, we check if it is valid and return it. If it's not valid, ignore it.\n * If there is no valid app yet, prompt the user to select one from the list or create a new one.\n * If no apps exists, we automatically prompt the user to create a new one.\n * @param app - Current local app information\n * @param apps - List of remote available apps\n * @param orgId - Current Organization\n * @param cachedAppId - Cached app apikey\n * @returns The selected (or created) app\n */\nexport async function selectOrCreateApp(\n  localAppName: string,\n  apps: OrganizationAppsResponse,\n  org: Organization,\n  token: string,\n): Promise<OrganizationApp> {\n  let createNewApp = apps.nodes.length === 0\n  if (!createNewApp) {\n    outputInfo(`\\nBefore you preview your work, it needs to be associated with an app.\\n`)\n    createNewApp = await createAsNewAppPrompt()\n  }\n  if (createNewApp) {\n    return createApp(org, localAppName, token)\n  } else {\n    const selectedAppApiKey = await selectAppPrompt(apps, org.id, token)\n    const fullSelectedApp = await fetchAppFromApiKey(selectedAppApiKey, token)\n    return fullSelectedApp!\n  }\n}\n\nexport async function createApp(org: Organization, appName: string, token: string): Promise<OrganizationApp> {\n  const name = await appNamePrompt(appName)\n\n  const variables: CreateAppQueryVariables = {\n    org: parseInt(org.id, 10),\n    title: `${name}`,\n    appUrl: 'https://example.com',\n    redir: ['https://example.com/api/auth'],\n    type: 'undecided',\n  }\n\n  const query = CreateAppQuery\n  const result: CreateAppQuerySchema = await partnersRequest(query, token, variables)\n  if (result.appCreate.userErrors.length > 0) {\n    const errors = result.appCreate.userErrors.map((error) => error.message).join(', ')\n    throw new AbortError(errors)\n  }\n\n  const createdApp: OrganizationApp = result.appCreate.app\n  createdApp.organizationId = org.id\n  createdApp.newApp = true\n  return createdApp\n}\n"]}