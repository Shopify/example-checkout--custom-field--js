{"version":3,"file":"info.js","sourceRoot":"","sources":["../../../src/cli/services/info.ts"],"names":[],"mappings":"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","sourcesContent":["import {outputEnv} from './app/env/show.js'\nimport {CachedAppInfo, getAppInfo} from './local-storage.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {FunctionExtension, ThemeExtension, UIExtension} from '../models/app/extensions.js'\nimport {configurationFileNames} from '../constants.js'\nimport {platformAndArch} from '@shopify/cli-kit/node/os'\nimport {checkForNewVersion} from '@shopify/cli-kit/node/node-package-manager'\nimport {linesToColumns} from '@shopify/cli-kit/common/string'\nimport {relativePath} from '@shopify/cli-kit/node/path'\nimport {\n  OutputMessage,\n  outputContent,\n  outputToken,\n  formatSection,\n  stringifyMessage,\n  getOutputUpdateCLIReminder,\n} from '@shopify/cli-kit/node/output'\n\nexport type Format = 'json' | 'text'\ninterface InfoOptions {\n  format: Format\n  /** When true the command outputs the env. variables necessary to deploy and run web/ */\n  webEnv: boolean\n}\ninterface Configurable {\n  type: string\n  externalType: string\n}\n\nexport async function info(app: AppInterface, {format, webEnv}: InfoOptions): Promise<OutputMessage> {\n  if (webEnv) {\n    return infoWeb(app, {format})\n  } else {\n    return infoApp(app, {format})\n  }\n}\n\nexport async function infoWeb(app: AppInterface, {format}: Omit<InfoOptions, 'webEnv'>): Promise<OutputMessage> {\n  return outputEnv(app, format)\n}\n\nexport async function infoApp(app: AppInterface, {format}: Omit<InfoOptions, 'webEnv'>): Promise<OutputMessage> {\n  if (format === 'json') {\n    return outputContent`${JSON.stringify(app, null, 2)}`\n  } else {\n    const appInfo = new AppInfo(app)\n    return appInfo.output()\n  }\n}\n\nconst UNKNOWN_TEXT = outputContent`${outputToken.italic('unknown')}`.value\nconst NOT_CONFIGURED_TEXT = outputContent`${outputToken.italic('Not yet configured')}`.value\n\nclass AppInfo {\n  private app: AppInterface\n  private cachedAppInfo: CachedAppInfo | undefined\n\n  constructor(app: AppInterface) {\n    this.app = app\n  }\n\n  async output(): Promise<string> {\n    const sections: [string, string][] = [\n      this.devConfigsSection(),\n      this.projectSettingsSection(),\n      await this.appComponentsSection(),\n      this.accessScopesSection(),\n      await this.systemInfoSection(),\n    ]\n    return sections.map((sectionContents: [string, string]) => formatSection(...sectionContents)).join('\\n\\n')\n  }\n\n  devConfigsSection(): [string, string] {\n    const title = 'Configs for Dev'\n\n    let appName = NOT_CONFIGURED_TEXT\n    let storeDescription = NOT_CONFIGURED_TEXT\n    let apiKey = NOT_CONFIGURED_TEXT\n    let updateURLs = NOT_CONFIGURED_TEXT\n    let postscript = outputContent`💡 These will be populated when you run ${outputToken.packagejsonScript(\n      this.app.packageManager,\n      'dev',\n    )}`.value\n    const cachedAppInfo = getAppInfo(this.app.directory)\n    if (cachedAppInfo) {\n      if (cachedAppInfo.title) appName = cachedAppInfo.title\n      if (cachedAppInfo.storeFqdn) storeDescription = cachedAppInfo.storeFqdn\n      if (cachedAppInfo.appId) apiKey = cachedAppInfo.appId\n      if (cachedAppInfo.updateURLs !== undefined) updateURLs = cachedAppInfo.updateURLs ? 'Always' : 'Never'\n      postscript = outputContent`💡 To change these, run ${outputToken.packagejsonScript(\n        this.app.packageManager,\n        'dev',\n        '--reset',\n      )}`.value\n    }\n    const lines = [\n      ['App', appName],\n      ['Dev store', storeDescription],\n      ['API key', apiKey],\n      ['Update URLs', updateURLs],\n    ]\n    return [title, `${linesToColumns(lines)}\\n\\n${postscript}`]\n  }\n\n  projectSettingsSection(): [string, string] {\n    const title = 'Your Project'\n    const lines = [\n      ['Name', this.app.name],\n      ['Root location', this.app.directory],\n    ]\n    return [title, linesToColumns(lines)]\n  }\n\n  async appComponentsSection(): Promise<[string, string]> {\n    const title = 'Directory Components'\n\n    let body = `\\n${this.webComponentsSection()}`\n\n    function augmentWithExtensions<TExtension extends Configurable>(\n      extensions: TExtension[],\n      outputFormatter: (extension: TExtension) => string,\n    ) {\n      const types = new Set(extensions.map((ext) => ext.type))\n      types.forEach((extensionType: string) => {\n        const relevantExtensions = extensions.filter((extension: TExtension) => extension.type === extensionType)\n        if (relevantExtensions[0]) {\n          body += `\\n\\n${outputContent`${outputToken.subheading(relevantExtensions[0].externalType)}`.value}`\n          relevantExtensions.forEach((extension: TExtension) => {\n            body += `${outputFormatter(extension)}`\n          })\n        }\n      })\n    }\n\n    augmentWithExtensions(this.app.extensions.ui, this.uiExtensionSubSection.bind(this))\n    augmentWithExtensions(this.app.extensions.theme, this.themeExtensionSubSection.bind(this))\n    augmentWithExtensions(this.app.extensions.function, this.functionExtensionSubSection.bind(this))\n\n    const allExtensions = [...this.app.extensions.ui, ...this.app.extensions.theme, ...this.app.extensions.function]\n\n    if (this.app.errors?.isEmpty() === false) {\n      body += `\\n\\n${outputContent`${outputToken.subheading('Extensions with errors')}`.value}`\n      allExtensions.forEach((extension) => {\n        body += `${this.invalidExtensionSubSection(extension)}`\n      })\n    }\n    return [title, body]\n  }\n\n  webComponentsSection(): string {\n    const errors: OutputMessage[] = []\n    const subtitle = [outputContent`${outputToken.subheading('web')}`.value]\n    const toplevel = ['📂 web', '']\n    const sublevels: [string, string][] = []\n    this.app.webs.forEach((web) => {\n      if (web.configuration && web.configuration.type) {\n        sublevels.push([`  📂 ${web.configuration.type}`, relativePath(this.app.directory, web.directory)])\n      } else if (this.app.errors) {\n        const error = this.app.errors.getError(`${web.directory}/${configurationFileNames.web}`)\n        if (error) {\n          sublevels.push([`  📂 ${UNKNOWN_TEXT}`, relativePath(this.app.directory, web.directory)])\n          errors.push(error)\n        }\n      }\n    })\n    let errorContent = `\\n${errors.map(this.formattedError).join('\\n')}`\n    if (errorContent.trim() === '') errorContent = ''\n\n    return `${subtitle}\\n${linesToColumns([toplevel, ...sublevels])}${errorContent}`\n  }\n\n  uiExtensionSubSection(extension: UIExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`📂 ${config.name}`, relativePath(this.app.directory, extension.directory)],\n      ['     config file', relativePath(extension.directory, extension.configurationPath)],\n    ]\n    if (config && config.metafields?.length) {\n      details.push(['     metafields', `${config.metafields.length}`])\n    }\n\n    return `\\n${linesToColumns(details)}`\n  }\n\n  functionExtensionSubSection(extension: FunctionExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`📂 ${config.name}`, relativePath(this.app.directory, extension.directory)],\n      ['     config file', relativePath(extension.directory, extension.configurationPath)],\n    ]\n\n    return `\\n${linesToColumns(details)}`\n  }\n\n  themeExtensionSubSection(extension: ThemeExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`📂 ${config.name}`, relativePath(this.app.directory, extension.directory)],\n      ['     config file', relativePath(extension.directory, extension.configurationPath)],\n    ]\n\n    return `\\n${linesToColumns(details)}`\n  }\n\n  invalidExtensionSubSection(extension: UIExtension | FunctionExtension | ThemeExtension): string {\n    const error = this.app.errors?.getError(extension.configurationPath)\n    if (!error) return ''\n    const details = [\n      [`📂 ${extension.configuration?.type}`, relativePath(this.app.directory, extension.directory)],\n      ['     config file', relativePath(extension.directory, extension.configurationPath)],\n    ]\n    const formattedError = this.formattedError(error)\n    return `\\n${linesToColumns(details)}\\n${formattedError}`\n  }\n\n  formattedError(str: OutputMessage): string {\n    const [errorFirstLine, ...errorRemainingLines] = stringifyMessage(str).split('\\n')\n    const errorLines = [`! ${errorFirstLine}`, ...errorRemainingLines.map((line) => `  ${line}`)]\n    return outputContent`${outputToken.errorText(errorLines.join('\\n'))}`.value\n  }\n\n  accessScopesSection(): [string, string] {\n    const title = 'Access Scopes in Root TOML File'\n    const lines = this.app.configuration.scopes.split(',').map((scope) => [scope])\n    return [title, linesToColumns(lines)]\n  }\n\n  async systemInfoSection(): Promise<[string, string]> {\n    const title = 'Tooling and System'\n    const {platform, arch} = platformAndArch()\n    const versionUpgradeMessage = await this.versionUpgradeMessage()\n    const cliVersionInfo = [this.currentCliVersion(), versionUpgradeMessage].join(' ').trim()\n    const lines: string[][] = [\n      ['Shopify CLI', cliVersionInfo],\n      ['Package manager', this.app.packageManager],\n      ['OS', `${platform}-${arch}`],\n      ['Shell', process.env.SHELL || 'unknown'],\n      ['Node version', process.version],\n    ]\n    return [title, `${linesToColumns(lines)}`]\n  }\n\n  currentCliVersion(): string {\n    return this.app.nodeDependencies['@shopify/cli']!\n  }\n\n  async versionUpgradeMessage(): Promise<string> {\n    const cliDependency = '@shopify/cli'\n    const newestVersion = await checkForNewVersion(cliDependency, this.currentCliVersion())\n    if (newestVersion) {\n      return getOutputUpdateCLIReminder(this.app.packageManager, newestVersion)\n    }\n    return ''\n  }\n}\n"]}