{"version":3,"file":"trigger.js","sourceRoot":"","sources":["../../../../src/cli/prompts/webhook/trigger.ts"],"names":[],"mappings":"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","sourcesContent":["import {DELIVERY_METHOD, isAddressAllowedForDeliveryMethod} from '../../services/webhook/trigger-flags.js'\nimport {renderAutocompletePrompt, renderSelectPrompt, renderTextPrompt} from '@shopify/cli-kit/node/ui'\nimport {stringifyMessage} from '@shopify/cli-kit/node/output'\n\nexport async function topicPrompt(availableTopics: string[]): Promise<string> {\n  const choicesList = availableTopics.map((topic) => ({label: topic, value: topic}))\n\n  const chosen = await renderAutocompletePrompt({\n    message: 'Webhook Topic',\n    choices: choicesList,\n  })\n\n  return chosen\n}\n\nexport async function apiVersionPrompt(availableVersions: string[]): Promise<string> {\n  return renderSelectPrompt({\n    message: 'Webhook ApiVersion',\n    choices: availableVersions.map((version) => ({label: version, value: version})),\n  })\n}\n\nexport async function deliveryMethodPrompt(): Promise<string> {\n  return renderSelectPrompt({\n    message: 'Delivery method',\n    choices: [\n      {label: 'HTTP', value: DELIVERY_METHOD.HTTP},\n      {label: 'Google Pub/Sub', value: DELIVERY_METHOD.PUBSUB},\n      {label: 'Amazon EventBridge', value: DELIVERY_METHOD.EVENTBRIDGE},\n    ],\n  })\n}\n\nexport async function addressPrompt(deliveryMethod: string): Promise<string> {\n  const input = await renderTextPrompt({\n    message: 'Address for delivery',\n    validate: (value) => {\n      const trimmed = value.trim()\n      if (trimmed.length === 0) {\n        return \"Address can't be empty\"\n      }\n      if (!isAddressAllowedForDeliveryMethod(trimmed, deliveryMethod)) {\n        return `Invalid address.\\n${deliveryMethodInstructionsAsString(deliveryMethod)}`\n      }\n    },\n  })\n\n  return input.trim()\n}\n\nexport async function clientSecretPrompt(): Promise<string> {\n  return renderTextPrompt({\n    message:\n      'Client Secret to encode the webhook payload. If you are using the app template, this can be found in the partners dashboard',\n    defaultValue: 'shopify_test',\n    validate: (value: string) => {\n      if (value.length === 0) {\n        return \"Client Secret can't be empty\"\n      }\n    },\n  })\n}\n\nexport function deliveryMethodInstructions(method: string): string[] {\n  if (method === DELIVERY_METHOD.HTTP) {\n    return [\n      `For remote HTTP testing, use a URL that starts with https://`,\n      `For local HTTP testing, use http://localhost:{port}/{url-path}`,\n    ]\n  }\n  if (method === DELIVERY_METHOD.PUBSUB) {\n    return [`For Google Pub/Sub, use pubsub://{project-id}:{topic-id}`]\n  }\n  if (method === DELIVERY_METHOD.EVENTBRIDGE) {\n    return [`For Amazon EventBridge, use an Amazon Resource Name (ARN) starting with arn:aws:events:`]\n  }\n\n  return []\n}\n\nexport function deliveryMethodInstructionsAsString(method: string): string {\n  return deliveryMethodInstructions(method)\n    .map((hint) => `      Â· ${stringifyMessage(hint)}`)\n    .join('\\n')\n}\n"]}