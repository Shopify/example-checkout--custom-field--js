{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/prompts/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppInterface} from '../../models/app/app.js'\nimport {GenericSpecification} from '../../models/app/extensions.js'\nimport {TemplateSpecification} from '../../models/app/template.js'\nimport {generateRandomNameForSubdirectory} from '@shopify/cli-kit/node/fs'\nimport {renderSelectPrompt, renderTextPrompt} from '@shopify/cli-kit/node/ui'\nimport {outputWarn} from '@shopify/cli-kit/node/output'\nimport {createRequire} from 'module'\n\nconst require = createRequire(import.meta.url)\n\nexport interface GenerateExtensionPromptOptions {\n  name?: string\n  templateType?: string\n  extensionFlavor?: string\n  directory: string\n  app: AppInterface\n  templateSpecifications: TemplateSpecification[]\n  unavailableExtensions: string[]\n  reset: boolean\n}\n\nexport interface GenerateExtensionPromptOutput {\n  name: string\n  extensionContent: GenerateExtensionContentOutput[]\n}\ninterface GenerateExtensionContentOutput {\n  name: string\n  specification: GenericSpecification\n  extensionFlavor?: string\n}\n\nexport function buildChoices(templateSpecifications: TemplateSpecification[]) {\n  const templateSpecChoices = templateSpecifications.map((spec) => {\n    return {\n      label: spec.name,\n      value: spec.identifier,\n      group: spec.group,\n    }\n  })\n  return templateSpecChoices.sort((c1, c2) => c1.label.localeCompare(c2.label))\n}\n\nconst generateExtensionPrompt = async (\n  options: GenerateExtensionPromptOptions,\n): Promise<GenerateExtensionPromptOutput> => {\n  let templateSpecifications = options.templateSpecifications\n  let templateType = options.templateType\n  const extensionFlavor = options.extensionFlavor\n\n  if (!templateType) {\n    if (extensionFlavor) {\n      templateSpecifications = templateSpecifications.filter((spec) =>\n        spec.types[0]?.supportedFlavors.map((elem) => elem.value as string).includes(extensionFlavor),\n      )\n    }\n\n    if (options.unavailableExtensions.length > 0) {\n      outputWarn(\n        `You've reached the limit for these types of extensions: ${options.unavailableExtensions.join(', ')}\\n`,\n      )\n    }\n\n    // eslint-disable-next-line require-atomic-updates\n    templateType = await renderSelectPrompt({\n      message: 'Type of extension?',\n      choices: buildChoices(templateSpecifications),\n    })\n  }\n\n  const templateSpecification = templateSpecifications.find((spec) => spec.identifier === templateType)!\n\n  const nameAndFlavors: {name: string; flavor?: string; specification: GenericSpecification}[] = []\n  for (const spec of templateSpecification.types) {\n    // eslint-disable-next-line no-await-in-loop\n    nameAndFlavors.push(await promptNameAndFlavor(options, spec))\n  }\n\n  return {\n    name: templateSpecification?.name ?? '',\n    extensionContent: nameAndFlavors.map((nameAndFlavor) => {\n      return {\n        name: nameAndFlavor.name,\n        specification: nameAndFlavor.specification,\n        extensionFlavor: nameAndFlavor.flavor,\n      }\n    }),\n  }\n}\n\nasync function promptNameAndFlavor(\n  options: GenerateExtensionPromptOptions,\n  specification: GenericSpecification,\n): Promise<{name: string; flavor?: string; specification: GenericSpecification}> {\n  const result = {\n    name: options.name ?? '',\n    flavor: options.extensionFlavor ?? specification.supportedFlavors[0]?.value,\n    specification,\n  }\n  if (!options.name) {\n    result.name = await renderTextPrompt({\n      message: 'Extension name (internal only)',\n      defaultValue: await generateRandomNameForSubdirectory({suffix: 'ext', directory: options.directory}),\n    })\n  }\n  if (!options.extensionFlavor && specification.supportedFlavors.length > 1) {\n    result.flavor = await renderSelectPrompt({\n      message: 'What would you like to work in?',\n      choices: specification.supportedFlavors.map((flavor) => {\n        return {\n          label: flavor.name,\n          value: flavor.value,\n        }\n      }),\n      defaultValue: 'react',\n    })\n  }\n  return result\n}\n\nexport default generateExtensionPrompt\n"]}