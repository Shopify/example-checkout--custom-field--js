{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../../../src/cli/models/app/bundle.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,GAAG,EAAC,MAAM,8BAA8B,CAAA;AAEhD,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,CAAC,MAAM,CAAC;IAChD,yBAAyB;IACzB,EAAE,EAAE,GAAG,CAAC,MAAM,EAAE;IAChB,kDAAkD;IAClD,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE;CACzB,CAAC,CAAA;AAIF,MAAM,CAAC,MAAM,0BAA0B,GAAG,GAAG,CAAC,MAAM,CAAC;IACnD,yBAAyB;IACzB,EAAE,EAAE,GAAG,CAAC,MAAM,EAAE;IAChB,gEAAgE;IAChE,SAAS,EAAE,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;CACnC,CAAC,CAAA;AAIF,MAAM,CAAC,MAAM,6BAA6B,GAAG,GAAG,CAAC,MAAM,CAAC;IACtD,yBAAyB;IACzB,EAAE,EAAE,GAAG,CAAC,MAAM,EAAE;IAChB,kDAAkD;IAClD,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE;CACvB,CAAC,CAAA;AAIF,MAAM,CAAC,MAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC;IACrC,8BAA8B;IAC9B,EAAE,EAAE,GAAG,CAAC,MAAM,EAAE;IAChB,+DAA+D;IAC/D,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC;QACrB,oBAAoB;QACpB,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC;QACtC,uBAAuB;QACvB,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,0BAA0B,CAAC;QAC5C,0BAA0B;QAC1B,QAAQ,EAAE,GAAG,CAAC,KAAK,CAAC,6BAA6B,CAAC;KACnD,CAAC;CACH,CAAC,CAAA","sourcesContent":["import {zod} from '@shopify/cli-kit/node/schema'\n\nexport const BundleUIExtensionSchema = zod.object({\n  /** The extension UUID */\n  id: zod.string(),\n  /** The relative path to the Javascript bundle. */\n  bundlePath: zod.string(),\n})\n\nexport type BundleUIExtension = zod.infer<typeof BundleUIExtensionSchema>\n\nexport const BundleThemeExtensionSchema = zod.object({\n  /** The extension UUID */\n  id: zod.string(),\n  /** A list of paths to the files that are part of the schema. */\n  filePaths: zod.array(zod.string()),\n})\n\nexport type BundleThemeExtension = zod.infer<typeof BundleThemeExtensionSchema>\n\nexport const BundleFunctionExtensionSchema = zod.object({\n  /** The extension UUID */\n  id: zod.string(),\n  /** The path to the .wasm file of the function. */\n  wasmPath: zod.string(),\n})\n\nexport type BundleFunctionExtension = zod.infer<typeof BundleFunctionExtensionSchema>\n\nexport const BundleSchema = zod.object({\n  /** The application API key */\n  id: zod.string(),\n  /** The collection of extensions that are part of the bundle */\n  extensions: zod.object({\n    /** UI extensions */\n    ui: zod.array(BundleUIExtensionSchema),\n    /** Theme extensions */\n    theme: zod.array(BundleThemeExtensionSchema),\n    /** Function extensions */\n    function: zod.array(BundleFunctionExtensionSchema),\n  }),\n})\n\nexport type Bundle = zod.infer<typeof BundleSchema>\n"]}