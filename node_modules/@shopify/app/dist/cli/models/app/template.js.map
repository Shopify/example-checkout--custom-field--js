{"version":3,"file":"template.js","sourceRoot":"","sources":["../../../../src/cli/models/app/template.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,oBAAoB,EAAC,MAAM,oBAAoB,CAAA;AAUvD,MAAM,UAAU,+BAA+B,CAAC,cAAsC;IACpF,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACjC,OAAO;YACL,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,IAAI,EAAE,IAAI,CAAC,YAAY;YACvB,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE;YACjH,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YAChD,KAAK,EAAE,CAAC,IAAI,CAAC;SACd,CAAA;IACH,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,SAAkC;IAC7E,OAAO,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAA;AAC/F,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,SAAkC;IACrE,OAAO,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAA;AACzF,CAAC","sourcesContent":["import {GenericSpecification} from './extensions.js'\nimport {extensionTypesGroups} from '../../constants.js'\n\nexport interface TemplateSpecification {\n  identifier: string\n  name: string\n  group: string\n  supportLinks: string[]\n  types: GenericSpecification[]\n}\n\nexport function convertSpecificationsToTemplate(specifications: GenericSpecification[]): TemplateSpecification[] {\n  return specifications.map((spec) => {\n    return {\n      identifier: spec.identifier,\n      name: spec.externalName,\n      group: spec.group || extensionTypesGroups.find((group) => group.extensions.includes(spec.identifier))?.name || '',\n      supportLinks: spec.helpURL ? [spec.helpURL] : [],\n      types: [spec],\n    }\n  })\n}\n\nexport function getTypesExternalIdentitifier(templates: TemplateSpecification[]): string[] {\n  return templates.flatMap((template) => template.types.map((type) => type.externalIdentifier))\n}\n\nexport function getTypesExternalName(templates: TemplateSpecification[]): string[] {\n  return templates.flatMap((template) => template.types.map((type) => type.externalName))\n}\n"]}