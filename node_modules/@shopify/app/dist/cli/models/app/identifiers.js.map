{"version":3,"file":"identifiers.js","sourceRoot":"","sources":["../../../../src/cli/models/app/identifiers.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAA;AAClD,OAAO,EAAC,WAAW,EAAC,MAAM,+BAA+B,CAAA;AACzD,OAAO,EAAC,WAAW,EAAC,MAAM,gCAAgC,CAAA;AAC1D,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AA8BnD;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,EAAC,GAAG,EAAE,WAAW,EAAE,OAAO,EAA8B,EACxD,iBAAiB,GAAG,OAAO,CAAC,GAAG;IAE/B,IAAI,UAAU,GAAG,GAAG,CAAC,MAAM,CAAA;IAC3B,IAAI,CAAC,UAAU,EAAE;QACf,UAAU,GAAG;YACX,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,eAAe,CAAC,UAAU,CAAC;YACzD,SAAS,EAAE,EAAE;SACd,CAAA;KACF;IACD,MAAM,gBAAgB,GAA4B,EAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,EAAC,CAAA;IACpF,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,yBAAyB,CAAC,EAAE;QACrD,gBAAgB,CAAC,GAAG,CAAC,yBAAyB,CAAC,GAAG,WAAW,CAAC,GAAG,CAAA;KAClE;IACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;QACzD,MAAM,WAAW,GAAG,WAAW,WAAW,CAAC,UAAU,CAAC,KAAK,CAAA;QAC3D,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAE;YACnC,gBAAgB,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,UAAU,CAAE,CAAA;SACpE;IACH,CAAC,CAAC,CAAA;IAEF,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,OAAO,KAAK,QAAQ,CAAA;IAC/G,UAAU,CAAC,SAAS,GAAG,gBAAgB,CAAA;IACvC,IAAI,KAAK,EAAE;QACT,MAAM,WAAW,CAAC,UAAU,CAAC,CAAA;KAC9B;IAED,kDAAkD;IAClD,GAAG,CAAC,MAAM,GAAG,UAAU,CAAA;IACvB,OAAO,GAAG,CAAA;AACZ,CAAC;AAKD;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAC/B,EAAC,GAAG,EAA2B,EAC/B,iBAAiB,GAAG,OAAO,CAAC,GAAG;IAE/B,MAAM,YAAY,GAAG;QACnB,GAAG,GAAG,CAAC,MAAM,EAAE,SAAS;QACxB,GAAI,iBAAkD;KACvD,CAAA;IACD,MAAM,qBAAqB,GAA4B,EAAE,CAAA;IACzD,MAAM,gBAAgB,GAAG,CAAC,SAAoB,EAAE,EAAE;QAChD,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC,EAAE;YAC3E,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,yBAAyB,CAAE,CAAA;SACtG;IACH,CAAC,CAAA;IACD,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;IAC3C,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;IACjD,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;IAE9C,OAAO;QACL,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,yBAAyB,CAAC;QAChD,UAAU,EAAE,qBAAqB;KAClC,CAAA;AACH,CAAC","sourcesContent":["import {Extension} from './extensions.js'\nimport {dotEnvFileNames} from '../../constants.js'\nimport {writeDotEnv} from '@shopify/cli-kit/node/dot-env'\nimport {constantize} from '@shopify/cli-kit/common/string'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport type {AppInterface} from './app.js'\n\nexport interface IdentifiersExtensions {\n  [localIdentifier: string]: string\n}\n\nexport interface Identifiers {\n  /** Application's API Key */\n  app: string\n\n  /**\n   * The extensions' unique identifiers.\n   */\n  extensions: IdentifiersExtensions\n\n  /**\n   * The extensions' numeric identifiers (expressed as a string).\n   */\n  extensionIds: IdentifiersExtensions\n}\n\nexport type UuidOnlyIdentifiers = Omit<Identifiers, 'extensionIds'>\ntype UpdateAppIdentifiersCommand = 'dev' | 'deploy'\ninterface UpdateAppIdentifiersOptions {\n  app: AppInterface\n  identifiers: UuidOnlyIdentifiers\n  command: UpdateAppIdentifiersCommand\n}\n\n/**\n * Given an app and a set of identifiers, it persists the identifiers in the .env files.\n * @param options - Options.\n * @returns An copy of the app with the environment updated to reflect the updated identifiers.\n */\nexport async function updateAppIdentifiers(\n  {app, identifiers, command}: UpdateAppIdentifiersOptions,\n  systemEnvironment = process.env,\n): Promise<AppInterface> {\n  let dotenvFile = app.dotenv\n  if (!dotenvFile) {\n    dotenvFile = {\n      path: joinPath(app.directory, dotEnvFileNames.production),\n      variables: {},\n    }\n  }\n  const updatedVariables: {[key: string]: string} = {...(app.dotenv?.variables ?? {})}\n  if (!systemEnvironment[app.idEnvironmentVariableName]) {\n    updatedVariables[app.idEnvironmentVariableName] = identifiers.app\n  }\n  Object.keys(identifiers.extensions).forEach((identifier) => {\n    const envVariable = `SHOPIFY_${constantize(identifier)}_ID`\n    if (!systemEnvironment[envVariable]) {\n      updatedVariables[envVariable] = identifiers.extensions[identifier]!\n    }\n  })\n\n  const write = JSON.stringify(dotenvFile.variables) !== JSON.stringify(updatedVariables) && command === 'deploy'\n  dotenvFile.variables = updatedVariables\n  if (write) {\n    await writeDotEnv(dotenvFile)\n  }\n\n  // eslint-disable-next-line require-atomic-updates\n  app.dotenv = dotenvFile\n  return app\n}\n\ninterface GetAppIdentifiersOptions {\n  app: AppInterface\n}\n/**\n * Given an app and a environment, it fetches the ids from the environment\n * and returns them.\n */\nexport function getAppIdentifiers(\n  {app}: GetAppIdentifiersOptions,\n  systemEnvironment = process.env,\n): Partial<UuidOnlyIdentifiers> {\n  const envVariables = {\n    ...app.dotenv?.variables,\n    ...(systemEnvironment as {[variable: string]: string}),\n  }\n  const extensionsIdentifiers: {[key: string]: string} = {}\n  const processExtension = (extension: Extension) => {\n    if (Object.keys(envVariables).includes(extension.idEnvironmentVariableName)) {\n      extensionsIdentifiers[extension.localIdentifier] = envVariables[extension.idEnvironmentVariableName]!\n    }\n  }\n  app.extensions.ui.forEach(processExtension)\n  app.extensions.function.forEach(processExtension)\n  app.extensions.theme.forEach(processExtension)\n\n  return {\n    app: envVariables[app.idEnvironmentVariableName],\n    extensions: extensionsIdentifiers,\n  }\n}\n"]}