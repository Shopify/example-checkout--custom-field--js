{"version":3,"file":"extensions.js","sourceRoot":"","sources":["../../../../src/cli/models/app/extensions.ts"],"names":[],"mappings":"AA0EA,MAAM,UAAU,aAAa,CAAC,IAA0B;IACtD,OAAO,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAA;AACjC,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,IAA0B;IACzD,OAAO,IAAI,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAA;AACpC,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,IAA0B;IAC5D,OAAO,IAAI,CAAC,QAAQ,EAAE,KAAK,UAAU,CAAA;AACvC,CAAC","sourcesContent":["import {FunctionSpec, FunctionConfigType} from '../extensions/functions.js'\nimport {ThemeConfigContents, ThemeExtensionSpec} from '../extensions/theme.js'\nimport {UIExtensionSpec} from '../extensions/ui.js'\nimport {BaseConfigContents} from '../extensions/schemas.js'\nimport {ExtensionFlavorValue} from '../../services/generate/extension.js'\nimport {TokenizedString} from '@shopify/cli-kit/node/output'\nimport {Result} from '@shopify/cli-kit/node/result'\nimport {DependencyVersion} from '@shopify/cli-kit/node/node-package-manager'\n\nexport type ExtensionCategory = 'ui' | 'function' | 'theme'\n\n/**\n * Common interface for ExtensionSpec and FunctionSpec\n */\nexport interface GenericSpecification {\n  identifier: string\n  externalIdentifier: string\n  externalName: string\n  registrationLimit: number\n  helpURL?: string\n  supportedFlavors: ExtensionFlavor[]\n  gated: boolean\n  category: () => ExtensionCategory\n  group?: string\n}\n\nexport interface ExtensionFlavor {\n  name: string\n  value: ExtensionFlavorValue\n  path?: string\n}\n\nexport interface Extension {\n  idEnvironmentVariableName: string\n  localIdentifier: string\n  configurationPath: string\n  directory: string\n  type: string\n  externalType: string\n  graphQLType: string\n  publishURL(options: {orgId: string; appId: string; extensionId?: string}): Promise<string>\n}\n\nexport type FunctionExtension<TConfiguration extends FunctionConfigType = FunctionConfigType> = Extension & {\n  configuration: TConfiguration\n  entrySourceFilePath?: string\n  buildCommand: string | undefined\n  buildWasmPath: string\n  inputQueryPath: string\n  isJavaScript: boolean\n}\n\nexport type ThemeExtension<TConfiguration extends ThemeConfigContents = ThemeConfigContents> = Extension & {\n  configuration: TConfiguration\n  previewMessage(url: string, storeFqdn: string): TokenizedString | undefined\n  outputBundlePath: string\n}\n\nexport type UIExtension<TConfiguration extends BaseConfigContents = BaseConfigContents> = Extension & {\n  configuration: TConfiguration\n  entrySourceFilePath?: string\n  outputBundlePath: string\n  devUUID: string\n  surface: string\n  dependency?: DependencyVersion\n  getBundleExtensionStdinContent(): string\n  validate(): Promise<Result<unknown, string>>\n  preDeployValidation(): Promise<void>\n  deployConfig(): Promise<{[key: string]: unknown}>\n  previewMessage(url: string, storeFqdn: string): TokenizedString | undefined\n  shouldFetchCartUrl(): boolean\n  hasExtensionPointTarget(target: string): boolean\n}\n\nexport function isUIExtension(spec: GenericSpecification): spec is UIExtensionSpec {\n  return spec.category() === 'ui'\n}\n\nexport function isThemeExtension(spec: GenericSpecification): spec is ThemeExtensionSpec {\n  return spec.category() === 'theme'\n}\n\nexport function isFunctionExtension(spec: GenericSpecification): spec is FunctionSpec {\n  return spec.category() === 'function'\n}\n"]}