{"version":3,"file":"ui.js","sourceRoot":"","sources":["../../../../src/cli/models/extensions/ui.ts"],"names":[],"mappings":"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","sourcesContent":["import {ZodSchemaType, BaseConfigContents, BaseUIExtensionSchema} from './schemas.js'\nimport {ExtensionCategory, ExtensionFlavor, GenericSpecification, UIExtension} from '../app/extensions.js'\nimport {blocks, defaultExtensionFlavors} from '../../constants.js'\nimport {ok, Result} from '@shopify/cli-kit/node/result'\nimport {capitalize, constantize} from '@shopify/cli-kit/common/string'\nimport {randomUUID} from '@shopify/cli-kit/node/crypto'\nimport {partnersFqdn} from '@shopify/cli-kit/node/context/fqdn'\nimport {joinPath, basename} from '@shopify/cli-kit/node/path'\nimport {outputContent, outputToken, TokenizedString} from '@shopify/cli-kit/node/output'\n\n/**\n * Extension specification with all the needed properties and methods to load an extension.\n */\nexport interface UIExtensionSpec<TConfiguration extends BaseConfigContents = BaseConfigContents>\n  extends GenericSpecification {\n  identifier: string\n  partnersWebIdentifier: string\n  surface: string\n  singleEntryPath: boolean\n  registrationLimit: number\n  supportedFlavors: ExtensionFlavor[]\n  gated: boolean\n  helpURL?: string\n  dependency?: {name: string; version: string}\n  templatePath?: string\n  graphQLType?: string\n  schema: ZodSchemaType<TConfiguration>\n  getBundleExtensionStdinContent?: (config: TConfiguration) => string\n  deployConfig?: (config: TConfiguration, directory: string) => Promise<{[key: string]: unknown}>\n  validate?: (config: TConfiguration, directory: string) => Promise<Result<unknown, string>>\n  preDeployValidation?: (extension: UIExtensionInstance<TConfiguration>) => Promise<void>\n  category: () => ExtensionCategory\n  previewMessage?: (\n    host: string,\n    uuid: string,\n    config: TConfiguration,\n    storeFqdn: string,\n  ) => TokenizedString | undefined\n  shouldFetchCartUrl?(config: TConfiguration): boolean\n  hasExtensionPointTarget?(config: TConfiguration, target: string): boolean\n}\n\n/**\n * Class that represents an instance of a local extension\n * Before creating this class we've validated that:\n * - There is a spec for this type of extension\n * - The Schema for that spec is followed by the extension config toml file\n * - We were able to find an entry point file for that extension\n *\n * It supports extension points, making this Class compatible with both new ui-extension\n * and legacy extension types. Extension points are optional and this class will handle them if present.\n *\n * This class holds the public interface to interact with extensions\n */\nexport class UIExtensionInstance<TConfiguration extends BaseConfigContents = BaseConfigContents>\n  implements UIExtension<TConfiguration>\n{\n  entrySourceFilePath: string\n  outputBundlePath: string\n  devUUID: string\n  localIdentifier: string\n  idEnvironmentVariableName: string\n  directory: string\n  configuration: TConfiguration\n  configurationPath: string\n\n  private specification: UIExtensionSpec\n\n  get graphQLType() {\n    return (this.specification.graphQLType ?? this.specification.identifier).toUpperCase()\n  }\n\n  get identifier() {\n    return this.specification.identifier\n  }\n\n  get type() {\n    return this.specification.identifier\n  }\n\n  get humanName() {\n    return this.specification.externalName\n  }\n\n  get name() {\n    return this.configuration.name\n  }\n\n  get dependency() {\n    return this.specification.dependency\n  }\n\n  get externalType() {\n    return this.specification.externalIdentifier\n  }\n\n  get surface() {\n    return this.specification.surface\n  }\n\n  constructor(options: {\n    configuration: TConfiguration\n    configurationPath: string\n    entryPath: string\n    directory: string\n    specification: UIExtensionSpec\n  }) {\n    this.configuration = options.configuration\n    this.configurationPath = options.configurationPath\n    this.entrySourceFilePath = options.entryPath\n    this.directory = options.directory\n    this.specification = options.specification\n    this.outputBundlePath = joinPath(options.directory, 'dist/main.js')\n    this.devUUID = `dev-${randomUUID()}`\n    this.localIdentifier = basename(options.directory)\n    this.idEnvironmentVariableName = `SHOPIFY_${constantize(basename(this.directory))}_ID`\n  }\n\n  deployConfig(): Promise<{[key: string]: unknown}> {\n    return this.specification.deployConfig?.(this.configuration, this.directory) ?? Promise.resolve({})\n  }\n\n  validate() {\n    if (!this.specification.validate) return Promise.resolve(ok(undefined))\n    return this.specification.validate(this.configuration, this.directory)\n  }\n\n  preDeployValidation(): Promise<void> {\n    if (!this.specification.preDeployValidation) return Promise.resolve()\n    return this.specification.preDeployValidation(this)\n  }\n\n  async publishURL(options: {orgId: string; appId: string; extensionId?: string}) {\n    const fqdn = await partnersFqdn()\n    const parnersPath = this.specification.partnersWebIdentifier\n    return `https://${fqdn}/${options.orgId}/apps/${options.appId}/extensions/${parnersPath}/${options.extensionId}`\n  }\n\n  previewMessage(url: string, storeFqdn: string) {\n    const heading = outputToken.heading(`${this.name} (${this.humanName})`)\n    let message = outputContent`Preview link: ${url}/extensions/${this.devUUID}`\n\n    if (this.specification.previewMessage) {\n      const customMessage = this.specification.previewMessage(url, this.devUUID, this.configuration, storeFqdn)\n      if (!customMessage) return\n      message = customMessage\n    }\n\n    return outputContent`${heading}\\n${message.value}\\n`\n  }\n\n  getBundleExtensionStdinContent() {\n    if (this.specification.getBundleExtensionStdinContent) {\n      return this.specification.getBundleExtensionStdinContent(this.configuration)\n    }\n    const relativeImportPath = this.entrySourceFilePath?.replace(this.directory, '')\n    return `import '.${relativeImportPath}';`\n  }\n\n  shouldFetchCartUrl(): boolean {\n    return this.specification.shouldFetchCartUrl?.(this.configuration) || false\n  }\n\n  hasExtensionPointTarget(target: string): boolean {\n    return this.specification.hasExtensionPointTarget?.(this.configuration, target) || false\n  }\n}\n\n/**\n * These fields are forbidden when creating a new ExtensionSpec\n * They belong to the ExtensionSpec interface, but the values are obtained from the API\n * and should not be set by the user locally\n *\n * WARNING: 'surface' should be included here but is not yet compatible with the extension server\n */\nexport type ForbiddenFields = 'registrationLimit' | 'category' | 'externalIdentifier' | 'externalName' | 'name'\n\n/**\n * Partial ExtensionSpec type used when creating a new ExtensionSpec, the only mandatory field is the identifier\n */\nexport interface CreateExtensionSpecType<TConfiguration extends BaseConfigContents = BaseConfigContents>\n  extends Partial<Omit<UIExtensionSpec<TConfiguration>, ForbiddenFields>> {\n  identifier: string\n}\n\n/**\n * Create a new ui extension spec.\n *\n * Everything but \"identifer\" is optional.\n * ```ts\n * identifier: string // unique identifier for the extension type\n * externalIdentifier: string // identifier used externally (default: same as \"identifier\")\n * partnersWebIdentifier: string // identifier used in the partners web UI (default: same as \"identifier\")\n * surface?: string // surface where the extension is going to be rendered (default: 'unknown')\n * singleEntryPath: boolean // whether the extension has a single entry point (default: true)\n * supportedFlavors: {name: string; value: string}[] // list of supported flavors (default: 'javascript', 'typescript', 'typescript-react', 'javascript-react')\n * helpURL?: string // url to the help page for the extension, shown after generating the extension\n * dependency?: {name: string; version: string} // dependency to be added to the extension's package.json\n * templatePath?: string // path to the template to be used when generating the extension\n * graphQLType?: string // GraphQL type of the extension (default: same as \"identifier\")\n * schema?: ZodSchemaType<TConfiguration> // schema used to validate the extension's configuration (default: BaseUIExtensionSchema)\n * getBundleExtensionStdinContent?: (configuration: TConfiguration) => string // function to generate the content of the stdin file used to bundle the extension\n * validate?: (configuration: TConfiguration, directory: string) => Promise<Result<undefined, Error>> // function to validate the extension's configuration\n * preDeployValidation?: (configuration: TConfiguration) => Promise<void> // function to validate the extension's configuration before deploying it\n * deployConfig?: (configuration: TConfiguration, directory: string) => Promise<{[key: string]: unknown}> // function to generate the extensions configuration payload to be deployed\n * previewMessage?: (url: string, devUUID: string, configuration: TConfiguration, storeFqdn: string) => string | undefined // function to generate the preview message shown to the user during `dev`\n * shouldFetchCartUrl?: (configuration: TConfiguration) => boolean // function to determine if the extension should fetch the cart url\n * hasExtensionPointTarget?: (configuration: TConfiguration, target: string) => boolean // function to determine if the extension has a given extension point target\n * ```\n */\nexport function createUIExtensionSpecification<TConfiguration extends BaseConfigContents = BaseConfigContents>(\n  spec: CreateExtensionSpecType<TConfiguration>,\n): UIExtensionSpec<TConfiguration> {\n  const defaults = {\n    // these two fields are going to be overridden by the extension specification API response,\n    // but we need them to have a default value for tests\n    externalIdentifier: `${spec.identifier}_external`,\n    externalName: capitalize(spec.identifier.replace(/_/g, ' ')),\n    surface: 'unknown',\n    partnersWebIdentifier: spec.identifier,\n    singleEntryPath: true,\n    gated: false,\n    schema: BaseUIExtensionSchema as ZodSchemaType<TConfiguration>,\n    registrationLimit: blocks.extensions.defaultRegistrationLimit,\n    supportedFlavors: defaultExtensionFlavors,\n    category: (): ExtensionCategory => (spec.identifier === 'theme' ? 'theme' : 'ui'),\n  }\n  return {...defaults, ...spec}\n}\n"]}