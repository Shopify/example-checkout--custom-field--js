{"version":3,"file":"specifications.js","sourceRoot":"","sources":["../../../../src/cli/models/extensions/specifications.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,yCAAyC,EAAC,MAAM,oCAAoC,CAAA;AAC5F,OAAO,EAAC,eAAe,EAAC,MAAM,0BAA0B,CAAA;AACxD,OAAO,EAAC,OAAO,EAAC,MAAM,kCAAkC,CAAA;AAExD,OAAO,EAAC,QAAQ,EAAE,OAAO,EAAC,MAAM,4BAA4B,CAAA;AAC5D,OAAO,EAAC,IAAI,EAAC,MAAM,0BAA0B,CAAA;AAC7C,OAAO,EAAC,aAAa,EAAC,MAAM,KAAK,CAAA;AAEjC,MAAM,CAAC,KAAK,UAAU,6BAA6B,CAAC,MAAc;IAChE,MAAM,KAAK,GAAG,MAAM,mCAAmC,EAAE,CAAA;IACzD,MAAM,OAAO,GAAG,MAAM,yCAAyC,CAAC,MAAM,CAAC,CAAA;IACvE,OAAO,CAAC,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC,CAAA;AAC/B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mCAAmC;IACvD,OAAO,iBAAiB,CAAC,mBAAmB,CAAC,CAAA;AAC/C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,uBAAuB;IAC3C,OAAO,iBAAiB,CAAC,sBAAsB,CAAC,CAAA;AAClD,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAAC,MAAc;IAC/D,MAAM,EAAE,GAAG,MAAM,6BAA6B,CAAC,MAAM,CAAC,CAAA;IACtD,MAAM,KAAK,GAAG,MAAM,uBAAuB,EAAE,CAAA;IAC7C,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC,CAAA;AAC1B,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,iCAAiC;IACrD,MAAM,EAAE,GAAG,MAAM,mCAAmC,EAAE,CAAA;IACtD,MAAM,KAAK,GAAG,MAAM,uBAAuB,EAAE,CAAA;IAC7C,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC,CAAA;AAC1B,CAAC;AAED,MAAM,iBAAiB,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAA;AAErD,KAAK,UAAU,kBAAkB,CAAC,aAAqB;IACrD;;;;OAIG;IACH,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAA;IACnG,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC,EAAC,CAAC,CAAA;IAEhE,0DAA0D;IAC1D,MAAM,EAAC,QAAQ,EAAC,GAAG,eAAe,EAAE,CAAA;IACpC,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,CAAA;KAC9C;IAED,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;IAClD,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC3C,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;IACrD,OAAO,KAAK,CAAA;AACd,CAAC","sourcesContent":["import {UIExtensionSpec} from './ui.js'\nimport {ThemeExtensionSpec} from './theme.js'\nimport {GenericSpecification} from '../app/extensions.js'\nimport {loadUIExtensionSpecificiationsFromPlugins} from '../../private/plugins/extension.js'\nimport {platformAndArch} from '@shopify/cli-kit/node/os'\nimport {memoize} from '@shopify/cli-kit/common/function'\nimport {Config} from '@oclif/core'\nimport {joinPath, dirname} from '@shopify/cli-kit/node/path'\nimport {glob} from '@shopify/cli-kit/node/fs'\nimport {fileURLToPath} from 'url'\n\nexport async function loadUIExtensionSpecifications(config: Config): Promise<UIExtensionSpec[]> {\n  const local = await loadLocalUIExtensionsSpecifications()\n  const plugins = await loadUIExtensionSpecificiationsFromPlugins(config)\n  return [...local, ...plugins]\n}\n\nexport async function loadLocalUIExtensionsSpecifications(): Promise<UIExtensionSpec[]> {\n  return memoizedLoadSpecs('ui-specifications')\n}\n\nexport async function loadThemeSpecifications(): Promise<ThemeExtensionSpec[]> {\n  return memoizedLoadSpecs('theme-specifications')\n}\n\n/**\n * Load all specifications from the local file system AND plugins\n */\nexport async function loadExtensionsSpecifications(config: Config): Promise<GenericSpecification[]> {\n  const ui = await loadUIExtensionSpecifications(config)\n  const theme = await loadThemeSpecifications()\n  return [...ui, ...theme]\n}\n\n/**\n * Load all specifications ONLY from the local file system\n */\nexport async function loadLocalExtensionsSpecifications(): Promise<GenericSpecification[]> {\n  const ui = await loadLocalUIExtensionsSpecifications()\n  const theme = await loadThemeSpecifications()\n  return [...ui, ...theme]\n}\n\nconst memoizedLoadSpecs = memoize(loadSpecifications)\n\nasync function loadSpecifications(directoryName: string) {\n  /**\n   * When running tests, \"await import('.../spec..ts')\" is handled by Vitest which does\n   * transform the TS module into a JS one before loading it. Hence the inclusion of .ts\n   * in the list of files.\n   */\n  const url = joinPath(dirname(fileURLToPath(import.meta.url)), joinPath(directoryName, '*.{js,ts}'))\n  let files = await glob(url, {ignore: ['**.d.ts', '**.test.ts']})\n\n  // From Node 18, all windows paths must start with file://\n  const {platform} = platformAndArch()\n  if (platform === 'windows') {\n    files = files.map((file) => `file://${file}`)\n  }\n\n  const promises = files.map((file) => import(file))\n  const modules = await Promise.all(promises)\n  const specs = modules.map((module) => module.default)\n  return specs\n}\n"]}