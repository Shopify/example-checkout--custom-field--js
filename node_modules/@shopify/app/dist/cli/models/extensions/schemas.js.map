{"version":3,"file":"schemas.js","sourceRoot":"","sources":["../../../../src/cli/models/extensions/schemas.ts"],"names":[],"mappings":"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","sourcesContent":["import {zod} from '@shopify/cli-kit/node/schema'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ZodSchemaType<T> = zod.ZodType<T, any, any>\n\nexport const MetafieldSchema = zod.object({\n  namespace: zod.string(),\n  key: zod.string(),\n})\n\nexport const CapabilitiesSchema = zod.object({\n  network_access: zod.boolean().optional(),\n  block_progress: zod.boolean().optional(),\n  api_access: zod.boolean().optional(),\n})\n\nexport const TypeSchema = zod.object({\n  type: zod.string().default('ui_extension'),\n})\n\nexport const NewExtensionPointSchema = zod.object({\n  target: zod.string(),\n  module: zod.string(),\n  metafields: zod.array(MetafieldSchema).optional(),\n})\n\nexport const OldExtensionPointsSchema = zod.array(zod.string()).default([])\nexport const NewExtensionPointsSchema = zod.array(NewExtensionPointSchema)\nexport const ExtensionPointSchema = zod.union([OldExtensionPointsSchema, NewExtensionPointsSchema])\nexport const ApiVersionSchema = zod.string()\n\nexport type ApiVersionSchemaType = zod.infer<typeof ApiVersionSchema>\n\nexport const BaseUIExtensionSchema = zod.object({\n  name: zod.string(),\n  description: zod.string().optional(),\n  type: zod.string().default('ui_extension'),\n  apiVersion: ApiVersionSchema.optional(),\n  extensionPoints: zod.any().optional(),\n  capabilities: CapabilitiesSchema.optional(),\n  metafields: zod.array(MetafieldSchema).optional().default([]),\n  categories: zod.array(zod.string()).optional(),\n})\n\nexport const ThemeExtensionSchema = zod.object({\n  name: zod.string(),\n  type: zod.literal('theme'),\n})\n\nexport const BaseFunctionConfigurationSchema = zod.object({\n  name: zod.string(),\n  type: zod.string(),\n  description: zod.string().optional().default(''),\n  build: zod.object({\n    command: zod\n      .string()\n      .transform((value) => (value.trim() === '' ? undefined : value))\n      .optional(),\n    path: zod.string().optional(),\n  }),\n  configurationUi: zod.boolean().optional().default(true),\n  ui: zod\n    .object({\n      enable_create: zod.boolean().optional(),\n      paths: zod\n        .object({\n          create: zod.string(),\n          details: zod.string(),\n        })\n        .optional(),\n    })\n    .optional(),\n  apiVersion: zod.string(),\n  input: zod\n    .object({\n      variables: zod\n        .object({\n          namespace: zod.string(),\n          key: zod.string(),\n        })\n        .optional(),\n    })\n    .optional(),\n})\n\nexport type NewExtensionPointSchemaType = zod.infer<typeof NewExtensionPointSchema>\n\n// Base config type that all config schemas must extend.\nexport type BaseConfigContents = zod.infer<typeof BaseUIExtensionSchema>\n"]}