{"version":3,"file":"locales-configuration.js","sourceRoot":"","sources":["../../../../src/cli/utilities/extensions/locales-configuration.ts"],"names":[],"mappings":"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","sourcesContent":["import {joinPath, basename} from '@shopify/cli-kit/node/path'\nimport {glob} from '@shopify/cli-kit/node/fs'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport fs from 'fs'\n\nconst L10N_FILE_SIZE_LIMIT = 16 * 1024\nconst L10N_BUNDLE_SIZE_LIMIT = 256 * 1024\n\nexport async function loadLocalesConfig(extensionPath: string, extensionIdentifier: string) {\n  const localesPaths = await glob(joinPath(extensionPath, 'locales/*.json'))\n  if (localesPaths.length === 0) return {}\n\n  // Bundle validations\n  const totalBundleSize = bundleSize(localesPaths)\n  const defaultLanguageCode = findDefaultLocale(localesPaths)\n\n  if (defaultLanguageCode.length === 0)\n    throw new AbortError(\n      `Missing default language in ${extensionIdentifier} configuration`,\n      'Make sure to have a {locale}.default.json file in your locales directory',\n    )\n\n  if (defaultLanguageCode.length > 1)\n    throw new AbortError(\n      `Error loading ${extensionIdentifier}`,\n      `There must be one (and only one) locale identified as the default locale: e.g. \"en.default.json\"`,\n    )\n\n  if (totalBundleSize > L10N_BUNDLE_SIZE_LIMIT)\n    throw new AbortError(\n      `Error loading ${extensionIdentifier}`,\n      `Total size of all locale files must be less than ${L10N_BUNDLE_SIZE_LIMIT}`,\n    )\n\n  // Locale validations\n  for (const locale of localesPaths) {\n    const size = fs.statSync(locale).size\n    if (size > L10N_FILE_SIZE_LIMIT)\n      throw new AbortError(\n        `Error loading ${extensionIdentifier}`,\n        `Locale file ${locale} size must be less than ${L10N_FILE_SIZE_LIMIT}`,\n      )\n    if (size === 0) throw new AbortError(`Error loading ${extensionIdentifier}`, `Locale file ${locale} can't be empty`)\n  }\n\n  return {\n    default_locale: defaultLanguageCode[0],\n    translations: getAllLocales(localesPaths),\n  }\n}\n\nfunction findDefaultLocale(filePaths: string[]) {\n  const defaultLocale = filePaths.filter((locale) => basename(locale).endsWith('.default.json'))\n  return defaultLocale.map((locale) => basename(locale).split('.')[0])\n}\n\nfunction getAllLocales(localesPath: string[]) {\n  const all: {[key: string]: string} = {}\n  for (const localePath of localesPath) {\n    const localeCode = basename(localePath).split('.')[0]!\n    const locale = fs.readFileSync(localePath, 'base64')\n    all[localeCode] = locale\n  }\n  return all\n}\n\nfunction bundleSize(localesPaths: string[]) {\n  return localesPaths.map((locale) => fs.statSync(locale).size).reduce((acc, size) => acc + size, 0)\n}\n"]}