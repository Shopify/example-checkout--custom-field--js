{"version":3,"file":"analytics.js","sourceRoot":"","sources":["../../../src/cli/utilities/analytics.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,sBAAsB,EAAC,MAAM,+BAA+B,CAAA;AAEpE;;;;;;;;GAQG;AAEH,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,OAAe,EAAE,SAAiB;IAC7E,IAAI,CAAC,SAAS,EAAE;QACd,OAAM;KACP;IAED,IAAI,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;QACnC,OAAO,WAAW,CAAA;KACnB;IAED,MAAM,QAAQ,GAAG,CAAC,MAAM,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;IAC9G,OAAO,QAAQ,IAAI,QAAQ,CAAA;AAC7B,CAAC","sourcesContent":["import {Config} from '@oclif/core'\nimport {getListOfTunnelPlugins} from '@shopify/cli-kit/node/plugins'\n\n/**\n * Return the name of the tunnel provider used to send analytics. Returns 'localhost' or provider name if any of those\n * strings are included in the {@link tunnelUrl} param. Returns 'custom' otherwise\n *\n * @param options - Oclif configuration. Needed to call the hook for retrieving the list of tunner providers\n * @param tunnelUrl - Tunnel url. Used as pattern to match provider name\n * @returns 'localhost' or provider name if any of those strings are included in\n *  the tunnelUrl or 'custom' otherwise\n */\n\nexport async function getAnalyticsTunnelType(options: Config, tunnelUrl: string): Promise<string | undefined> {\n  if (!tunnelUrl) {\n    return\n  }\n\n  if (tunnelUrl.includes('localhost')) {\n    return 'localhost'\n  }\n\n  const provider = (await getListOfTunnelPlugins(options)).plugins.find((plugin) => tunnelUrl?.includes(plugin))\n  return provider ?? 'custom'\n}\n"]}