{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../src/cli/validators/extensions/functions.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAA;AACnD,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAC,aAAa,EAAE,WAAW,EAAE,gBAAgB,EAAC,MAAM,8BAA8B,CAAA;AAEzF,MAAM,aAAa,GAAG,CAAC,SAAqC,EAAU,EAAE;IACtE,OAAO,gBAAgB,CAAC,aAAa,CAAA,KAAK,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AACnH,CAAC,CAAA;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,UAA+B;IAC9E,MAAM,6BAA6B,CAAC,UAAU,CAAC,CAAA;AACjD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,6BAA6B,CAAC,UAA+B;IACjF,MAAM,qBAAqB,GAAG,CAC5B,MAAM,OAAO,CAAC,GAAG,CACf,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;QACjC,MAAM,QAAQ,GAAG,SAAS,CAAC,aAAa,CAAA;QACxC,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC,CAAC,SAAS;YACX,CAAC,CAAC;gBACE,EAAE,EAAE,SAAS,CAAC,eAAe;gBAC7B,IAAI,EAAE,SAAS,CAAC,aAAa;aAC9B,CAAA;IACP,CAAC,CAAC,CACH,CACF,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,KAAK,SAAS,CAAiC,CAAA;IAChF,IAAI,qBAAqB,CAAC,MAAM,KAAK,CAAC,EAAE;QACtC,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,qBAAqB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAC3F,MAAM,IAAI,UAAU,CAClB,aAAa,CAAA;MACb,cAAc;SACX,EACH,yEAAyE,CAC1E,CAAA;KACF;AACH,CAAC","sourcesContent":["import {FunctionExtension} from '../../models/app/extensions.js'\nimport {fileExists} from '@shopify/cli-kit/node/fs'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputContent, outputToken, stringifyMessage} from '@shopify/cli-kit/node/output'\n\nconst extensionLine = (extension: {id: string; path: string}): string => {\n  return stringifyMessage(outputContent`Â· ${outputToken.green(extension.id)}: ${outputToken.path(extension.path)}`)\n}\n\nexport async function validateFunctionExtensions(extensions: FunctionExtension[]) {\n  await validateFunctionsWasmPresence(extensions)\n}\n\nexport async function validateFunctionsWasmPresence(extensions: FunctionExtension[]) {\n  const extensionsWithoutWasm = (\n    await Promise.all(\n      extensions.map(async (extension) => {\n        const wasmPath = extension.buildWasmPath\n        return (await fileExists(wasmPath))\n          ? undefined\n          : {\n              id: extension.localIdentifier,\n              path: extension.buildWasmPath,\n            }\n      }),\n    )\n  ).filter((extension) => extension !== undefined) as {id: string; path: string}[]\n  if (extensionsWithoutWasm.length !== 0) {\n    const extensionLines = outputToken.raw(extensionsWithoutWasm.map(extensionLine).join('\\n'))\n    throw new AbortError(\n      outputContent`The following function extensions haven't compiled the wasm in the expected path:\n    ${extensionLines}\n        `,\n      `Make sure the build command outputs the wasm in the expected directory.`,\n    )\n  }\n}\n"]}