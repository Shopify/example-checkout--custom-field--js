{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {isAutocorrectEnabled} from './services/conf.js'\nimport {Hook} from '@oclif/core'\nimport {bigram} from 'n-gram'\nimport {renderConfirmationPrompt, renderFatalError, renderInfo} from '@shopify/cli-kit/node/ui'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\n\nfunction sanitizeCmd(cmd: string): string {\n  return cmd.replace(/:/g, ' ')\n}\n\nfunction relativeScore(commandBigrams: string[], userCommandBigrams: string[]): number {\n  const map: {[key: string]: number} = {}\n  commandBigrams.forEach((elem) => {\n    map[elem] = map[elem] ? map[elem]! + 1 : 1\n  })\n  const result: string[] = []\n  for (const key of userCommandBigrams) {\n    if (key in map && map[key]! > 0) {\n      result.push(key)\n      map[key]--\n    }\n  }\n  return result.length\n}\n\nexport function findAlternativeCommand(opts: Parameters<Hook.CommandNotFound>[0]): string | undefined {\n  if (opts.id.length < 2) return undefined\n  const hiddenCommands = new Set(opts.config.commands.filter((cmd) => cmd.hidden).map((cmd) => cmd.id))\n  const availableCommands = Array.from(\n    new Set(\n      [...opts.config.commandIDs, ...opts.config.commands.flatMap((cmd) => cmd.aliases)].filter(\n        (cmd) => !hiddenCommands.has(cmd),\n      ),\n    ),\n  )\n\n  const userCommandBigrams = bigram(opts.id)\n\n  const commandsWithScores = availableCommands\n    .map((cmd) => {\n      const commandBigram = bigram(cmd)\n      return {score: relativeScore(commandBigram, userCommandBigrams), cmd}\n    })\n    // only choose commands that have at least two bigrams in common\n    .filter(({score}) => score >= 2)\n    .sort((first, second) => {\n      // highest score is better, so we sort descending\n      const scoreDifference = second.score - first.score\n      if (scoreDifference !== 0) return scoreDifference\n      // if the scores are equal, we prefer the shorter command\n      return first.cmd.length - second.cmd.length\n    })\n\n  outputDebug(`'Did you mean' options: ${JSON.stringify(commandsWithScores)}`)\n\n  if (commandsWithScores.length > 0) {\n    const {cmd} = commandsWithScores[0]!\n    return cmd\n  }\n}\n\nexport async function shouldRunCommand(result: string, userCommand: string) {\n  if (isAutocorrectEnabled()) {\n    renderInfo({\n      body: ['Autocorrecting', {command: sanitizeCmd(userCommand)}, 'to', {command: sanitizeCmd(result)}, {char: '.'}],\n    })\n    return true\n  }\n\n  return renderConfirmationPrompt({\n    message: [\n      'Command',\n      {command: userCommand},\n      'not found. Did you mean',\n      {command: sanitizeCmd(result)},\n      {char: '?'},\n    ],\n  })\n}\n\n// eslint-disable-next-line func-style\nconst hook: Hook.CommandNotFound = async function (opts) {\n  const result = findAlternativeCommand(opts)\n  const userCommand = sanitizeCmd(opts.id)\n\n  if (!result) {\n    renderFatalError(new AbortError(`Command '${userCommand}' not found.`))\n    return\n  }\n\n  if (await shouldRunCommand(result, userCommand)) {\n    await this.config.runCommand(result, opts.argv)\n  }\n}\n\nexport default hook\n"]}