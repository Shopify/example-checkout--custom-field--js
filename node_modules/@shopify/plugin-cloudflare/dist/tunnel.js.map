{"version":3,"file":"tunnel.js","sourceRoot":"","sources":["../src/tunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import {TUNNEL_PROVIDER} from './provider.js'\nimport {startTunnel, TunnelError} from '@shopify/cli-kit/node/plugins/tunnel'\nimport {err, ok, Result} from '@shopify/cli-kit/node/result'\nimport {exec} from '@shopify/cli-kit/node/system'\nimport {joinPath, dirname} from '@shopify/cli-kit/node/path'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\nimport {isUnitTest} from '@shopify/cli-kit/node/context/local'\nimport {Writable} from 'stream'\nimport {fileURLToPath} from 'url'\n\nexport default startTunnel({provider: TUNNEL_PROVIDER, action: hookStart})\n\nexport type ReturnType = Promise<Result<{url: string}, TunnelError>>\n\n// How much time to wait for a tunnel to be established. in seconds.\nconst TUNNEL_TIMEOUT = isUnitTest() ? 0.2 : 40\n\nexport async function hookStart(port: number): ReturnType {\n  try {\n    const {url} = await tunnel({port})\n    return ok({url})\n    // eslint-disable-next-line no-catch-all/no-catch-all, @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    const tunnelError = new TunnelError('unknown', error.message)\n    return err(tunnelError)\n  }\n}\n\nasync function tunnel(options: {port: number}): Promise<{url: string}> {\n  const args: string[] = ['tunnel', '--url', `http://localhost:${options.port}`, '--no-autoupdate']\n  const errors: string[] = []\n\n  let connected = false\n  let resolved = false\n  let url: string | undefined\n\n  return new Promise<{url: string}>((resolve, reject) => {\n    setTimeout(() => {\n      if (!resolved) {\n        resolved = true\n        const lastErrors = errors.slice(-5).join('\\n')\n        reject(new Error(`Timed out while creating a cloudflare tunnel: ${lastErrors}`))\n      }\n    }, TUNNEL_TIMEOUT * 1000)\n\n    const customStdout = new Writable({\n      write(chunk, _, callback) {\n        outputDebug(chunk.toString())\n        if (resolved) return\n        if (!url) url = findUrl(chunk)\n        if (findConnection(chunk)) connected = true\n        if (connected) {\n          if (!url) return reject(new Error('A connection was established but no Tunnel URL was found'))\n          resolved = true\n          resolve({url})\n        }\n        const errorMessage = findError(chunk)\n        if (errorMessage) errors.push(errorMessage)\n        callback()\n      },\n    })\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    exec(getBinPathTarget(), args, {\n      stdout: customStdout,\n      stderr: customStdout,\n    })\n  })\n}\n\nfunction findUrl(data: Buffer): string | undefined {\n  const match = data.toString().match(/(https?:\\/\\/[^\\s]+trycloudflare\\.com)/) ?? undefined\n  return match && match[1]\n}\n\nfunction findError(data: Buffer): string | undefined {\n  const knownErrors = [\n    /failed to request quick Tunnel/,\n    /failed to unmarshal quick Tunnel/,\n    /failed to parse quick Tunnel ID/,\n    /failed to provision routing/,\n    /ERR Couldn't start tunnel/,\n    /ERR Failed to serve quic connection/,\n  ]\n  const match = knownErrors.some((error) => error.test(data.toString()))\n  return match ? data.toString() : undefined\n}\n\nfunction findConnection(data: Buffer): string | undefined {\n  const match = data.toString().match(/INF Connection/) ?? undefined\n  return match && match[0]\n}\n\n/**\n * Get the path where the binary was installed.\n * If the environment variable SHOPIFY_CLI_CLOUDFLARED_PATH is set, use that.\n */\nfunction getBinPathTarget() {\n  if (process.env.SHOPIFY_CLI_CLOUDFLARED_PATH) {\n    return process.env.SHOPIFY_CLI_CLOUDFLARED_PATH\n  }\n  return joinPath(\n    dirname(fileURLToPath(import.meta.url)),\n    '..',\n    'bin',\n    process.platform === 'win32' ? 'cloudflared.exe' : 'cloudflared',\n  )\n}\n"]}