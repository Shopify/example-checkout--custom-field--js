"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqliteConnection = void 0;
var tslib_1 = require("tslib");
var sqlite3_1 = tslib_1.__importDefault(require("sqlite3"));
var SqliteConnection = /** @class */ (function () {
    function SqliteConnection(database, sessionStorageIdentifier) {
        this.sessionStorageIdentifier = sessionStorageIdentifier;
        this.ready = this.init(database);
    }
    SqliteConnection.prototype.query = function (query, params) {
        if (params === void 0) { params = []; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.db.all(query, params, function (err, result) {
                                    if (err) {
                                        reject(err);
                                        return;
                                    }
                                    resolve(result);
                                });
                            })];
                }
            });
        });
    };
    SqliteConnection.prototype.executeRawQuery = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.db.exec(query, function (err) {
                                    if (err) {
                                        reject(err);
                                        return;
                                    }
                                    resolve();
                                });
                            })];
                }
            });
        });
    };
    SqliteConnection.prototype.hasTable = function (tablename) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, rows;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready];
                    case 1:
                        _a.sent();
                        query = "\n    SELECT name FROM sqlite_schema\n    WHERE\n      type = 'table' AND\n      name = ".concat(this.getArgumentPlaceholder(), ";\n    ");
                        return [4 /*yield*/, this.query(query, [tablename])];
                    case 2:
                        rows = _a.sent();
                        return [2 /*return*/, rows.length === 1];
                }
            });
        });
    };
    SqliteConnection.prototype.getArgumentPlaceholder = function (_) {
        return "?";
    };
    SqliteConnection.prototype.connect = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready];
                    case 1:
                        _a.sent();
                        // Nothing to do here
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    SqliteConnection.prototype.disconnect = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready];
                    case 1:
                        _a.sent();
                        // Nothing to do here
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    SqliteConnection.prototype.init = function (database) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.db =
                    typeof database === 'string' ? new sqlite3_1.default.Database(database) : database;
                return [2 /*return*/];
            });
        });
    };
    return SqliteConnection;
}());
exports.SqliteConnection = SqliteConnection;
//# sourceMappingURL=sqlite-connection.js.map