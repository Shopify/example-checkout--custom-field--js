import { ConfigInterface } from '../base-types';
import { WebhookRegistry, RegisterReturn, RegisterParams } from './types';
export declare function register(config: ConfigInterface, webhookRegistry: WebhookRegistry): ({ session, }: RegisterParams) => Promise<RegisterReturn>;
export declare const TEMPLATE_GET_HANDLERS = "{\n  webhookSubscriptions(\n    first: 250,\n    after: {{END_CURSOR}},\n  ) {\n    edges {\n      node {\n        id\n        topic\n        includeFields\n        metafieldNamespaces\n        privateMetafieldNamespaces\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}";
export declare const TEMPLATE_MUTATION = "\n  mutation webhookSubscription {\n    {{MUTATION_NAME}}(\n      {{IDENTIFIER}},\n      {{MUTATION_PARAMS}}\n    ) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n";
//# sourceMappingURL=register.d.ts.map